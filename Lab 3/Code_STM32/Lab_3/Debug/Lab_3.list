
Lab_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d58  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002e64  08002e64  00012e64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e84  08002e84  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08002e84  08002e84  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002e84  08002e84  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e84  08002e84  00012e84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e88  08002e88  00012e88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08002e8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  20000068  08002ef4  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  08002ef4  00020114  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000092d1  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a1b  00000000  00000000  00029362  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a70  00000000  00000000  0002ad80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000978  00000000  00000000  0002b7f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016aa6  00000000  00000000  0002c168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b467  00000000  00000000  00042c0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008241e  00000000  00000000  0004e075  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d0493  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000295c  00000000  00000000  000d04e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08002e4c 	.word	0x08002e4c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08002e4c 	.word	0x08002e4c

0800014c <isButtonSelectPressed>:
int timer_for_key_select_press = 200;
int timer_for_key_modify_press = 50;
int timer_for_key_set_value_press = 200;


int isButtonSelectPressed(){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	if(button_select_flag == 1){
 8000150:	4b06      	ldr	r3, [pc, #24]	; (800016c <isButtonSelectPressed+0x20>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d104      	bne.n	8000162 <isButtonSelectPressed+0x16>
		button_select_flag = 0;
 8000158:	4b04      	ldr	r3, [pc, #16]	; (800016c <isButtonSelectPressed+0x20>)
 800015a:	2200      	movs	r2, #0
 800015c:	601a      	str	r2, [r3, #0]
		return 1;
 800015e:	2301      	movs	r3, #1
 8000160:	e000      	b.n	8000164 <isButtonSelectPressed+0x18>
	}
	return 0;
 8000162:	2300      	movs	r3, #0
}
 8000164:	4618      	mov	r0, r3
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
 800016c:	20000084 	.word	0x20000084

08000170 <isButtonModifyPressed>:

int isButtonModifyPressed(){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	if(button_modify_flag == 1){
 8000174:	4b06      	ldr	r3, [pc, #24]	; (8000190 <isButtonModifyPressed+0x20>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	2b01      	cmp	r3, #1
 800017a:	d104      	bne.n	8000186 <isButtonModifyPressed+0x16>
		button_modify_flag = 0;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <isButtonModifyPressed+0x20>)
 800017e:	2200      	movs	r2, #0
 8000180:	601a      	str	r2, [r3, #0]
		return 1;
 8000182:	2301      	movs	r3, #1
 8000184:	e000      	b.n	8000188 <isButtonModifyPressed+0x18>
	}
	return 0;
 8000186:	2300      	movs	r3, #0
}
 8000188:	4618      	mov	r0, r3
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr
 8000190:	20000088 	.word	0x20000088

08000194 <isButtonSetValuePressed>:

int isButtonSetValuePressed(){
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
	if(button_set_value_flag == 1){
 8000198:	4b06      	ldr	r3, [pc, #24]	; (80001b4 <isButtonSetValuePressed+0x20>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	2b01      	cmp	r3, #1
 800019e:	d104      	bne.n	80001aa <isButtonSetValuePressed+0x16>
		button_set_value_flag = 0;
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <isButtonSetValuePressed+0x20>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
		return 1;
 80001a6:	2301      	movs	r3, #1
 80001a8:	e000      	b.n	80001ac <isButtonSetValuePressed+0x18>
	}
	return 0;
 80001aa:	2300      	movs	r3, #0
}
 80001ac:	4618      	mov	r0, r3
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr
 80001b4:	2000008c 	.word	0x2000008c

080001b8 <subKey1>:

/////////////////////////////////////
void subKey1(){
 80001b8:	b480      	push	{r7}
 80001ba:	af00      	add	r7, sp, #0
	button_select_flag = 1;
 80001bc:	4b03      	ldr	r3, [pc, #12]	; (80001cc <subKey1+0x14>)
 80001be:	2201      	movs	r2, #1
 80001c0:	601a      	str	r2, [r3, #0]
}
 80001c2:	bf00      	nop
 80001c4:	46bd      	mov	sp, r7
 80001c6:	bc80      	pop	{r7}
 80001c8:	4770      	bx	lr
 80001ca:	bf00      	nop
 80001cc:	20000084 	.word	0x20000084

080001d0 <subKey2>:

void subKey2(){
 80001d0:	b480      	push	{r7}
 80001d2:	af00      	add	r7, sp, #0
	button_modify_flag = 1;
 80001d4:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <subKey2+0x14>)
 80001d6:	2201      	movs	r2, #1
 80001d8:	601a      	str	r2, [r3, #0]
}
 80001da:	bf00      	nop
 80001dc:	46bd      	mov	sp, r7
 80001de:	bc80      	pop	{r7}
 80001e0:	4770      	bx	lr
 80001e2:	bf00      	nop
 80001e4:	20000088 	.word	0x20000088

080001e8 <subKey3>:

void  subKey3(){
 80001e8:	b480      	push	{r7}
 80001ea:	af00      	add	r7, sp, #0
	button_set_value_flag = 1;
 80001ec:	4b03      	ldr	r3, [pc, #12]	; (80001fc <subKey3+0x14>)
 80001ee:	2201      	movs	r2, #1
 80001f0:	601a      	str	r2, [r3, #0]
}
 80001f2:	bf00      	nop
 80001f4:	46bd      	mov	sp, r7
 80001f6:	bc80      	pop	{r7}
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	2000008c 	.word	0x2000008c

08000200 <getKeySelectInput>:

///////////////////////////////////////////

void getKeySelectInput(){
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
	key_reg0_button1 = key_reg1_button1;
 8000204:	4b1f      	ldr	r3, [pc, #124]	; (8000284 <getKeySelectInput+0x84>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	4a1f      	ldr	r2, [pc, #124]	; (8000288 <getKeySelectInput+0x88>)
 800020a:	6013      	str	r3, [r2, #0]
    key_reg1_button1 = key_reg2_button1;
 800020c:	4b1f      	ldr	r3, [pc, #124]	; (800028c <getKeySelectInput+0x8c>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	4a1c      	ldr	r2, [pc, #112]	; (8000284 <getKeySelectInput+0x84>)
 8000212:	6013      	str	r3, [r2, #0]
    key_reg2_button1 = HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin);
 8000214:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000218:	481d      	ldr	r0, [pc, #116]	; (8000290 <getKeySelectInput+0x90>)
 800021a:	f001 fdd7 	bl	8001dcc <HAL_GPIO_ReadPin>
 800021e:	4603      	mov	r3, r0
 8000220:	461a      	mov	r2, r3
 8000222:	4b1a      	ldr	r3, [pc, #104]	; (800028c <getKeySelectInput+0x8c>)
 8000224:	601a      	str	r2, [r3, #0]
    if ((key_reg0_button1 == key_reg1_button1) && (key_reg1_button1 == key_reg2_button1))
 8000226:	4b18      	ldr	r3, [pc, #96]	; (8000288 <getKeySelectInput+0x88>)
 8000228:	681a      	ldr	r2, [r3, #0]
 800022a:	4b16      	ldr	r3, [pc, #88]	; (8000284 <getKeySelectInput+0x84>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	429a      	cmp	r2, r3
 8000230:	d125      	bne.n	800027e <getKeySelectInput+0x7e>
 8000232:	4b14      	ldr	r3, [pc, #80]	; (8000284 <getKeySelectInput+0x84>)
 8000234:	681a      	ldr	r2, [r3, #0]
 8000236:	4b15      	ldr	r3, [pc, #84]	; (800028c <getKeySelectInput+0x8c>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	429a      	cmp	r2, r3
 800023c:	d11f      	bne.n	800027e <getKeySelectInput+0x7e>
    {
        if (key_reg2_button1 != stable_state1)
 800023e:	4b13      	ldr	r3, [pc, #76]	; (800028c <getKeySelectInput+0x8c>)
 8000240:	681a      	ldr	r2, [r3, #0]
 8000242:	4b14      	ldr	r3, [pc, #80]	; (8000294 <getKeySelectInput+0x94>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	429a      	cmp	r2, r3
 8000248:	d00d      	beq.n	8000266 <getKeySelectInput+0x66>
        {
            stable_state1 = key_reg2_button1;
 800024a:	4b10      	ldr	r3, [pc, #64]	; (800028c <getKeySelectInput+0x8c>)
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	4a11      	ldr	r2, [pc, #68]	; (8000294 <getKeySelectInput+0x94>)
 8000250:	6013      	str	r3, [r2, #0]

            if (key_reg2_button1 == PRESSED_STATE)
 8000252:	4b0e      	ldr	r3, [pc, #56]	; (800028c <getKeySelectInput+0x8c>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	2b00      	cmp	r3, #0
 8000258:	d111      	bne.n	800027e <getKeySelectInput+0x7e>
            {
            	subKey1();
 800025a:	f7ff ffad 	bl	80001b8 <subKey1>
                timer_for_key_select_press = 200;
 800025e:	4b0e      	ldr	r3, [pc, #56]	; (8000298 <getKeySelectInput+0x98>)
 8000260:	22c8      	movs	r2, #200	; 0xc8
 8000262:	601a      	str	r2, [r3, #0]
            {
            	stable_state1 = NORMAL_STATE;
            }
        }
    }
}
 8000264:	e00b      	b.n	800027e <getKeySelectInput+0x7e>
            timer_for_key_select_press--;
 8000266:	4b0c      	ldr	r3, [pc, #48]	; (8000298 <getKeySelectInput+0x98>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	3b01      	subs	r3, #1
 800026c:	4a0a      	ldr	r2, [pc, #40]	; (8000298 <getKeySelectInput+0x98>)
 800026e:	6013      	str	r3, [r2, #0]
            if (timer_for_key_select_press == 0)
 8000270:	4b09      	ldr	r3, [pc, #36]	; (8000298 <getKeySelectInput+0x98>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	2b00      	cmp	r3, #0
 8000276:	d102      	bne.n	800027e <getKeySelectInput+0x7e>
            	stable_state1 = NORMAL_STATE;
 8000278:	4b06      	ldr	r3, [pc, #24]	; (8000294 <getKeySelectInput+0x94>)
 800027a:	2201      	movs	r2, #1
 800027c:	601a      	str	r2, [r3, #0]
}
 800027e:	bf00      	nop
 8000280:	bd80      	pop	{r7, pc}
 8000282:	bf00      	nop
 8000284:	20000004 	.word	0x20000004
 8000288:	20000000 	.word	0x20000000
 800028c:	20000008 	.word	0x20000008
 8000290:	40010800 	.word	0x40010800
 8000294:	2000000c 	.word	0x2000000c
 8000298:	20000030 	.word	0x20000030

0800029c <getKeyModifyInput>:


void getKeyModifyInput(){
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0
	key_reg0_button2 = key_reg1_button2;
 80002a0:	4b1f      	ldr	r3, [pc, #124]	; (8000320 <getKeyModifyInput+0x84>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	4a1f      	ldr	r2, [pc, #124]	; (8000324 <getKeyModifyInput+0x88>)
 80002a6:	6013      	str	r3, [r2, #0]
    key_reg1_button2 = key_reg2_button2;
 80002a8:	4b1f      	ldr	r3, [pc, #124]	; (8000328 <getKeyModifyInput+0x8c>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	4a1c      	ldr	r2, [pc, #112]	; (8000320 <getKeyModifyInput+0x84>)
 80002ae:	6013      	str	r3, [r2, #0]
    key_reg2_button2 = HAL_GPIO_ReadPin(Button2_GPIO_Port, Button2_Pin);
 80002b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002b4:	481d      	ldr	r0, [pc, #116]	; (800032c <getKeyModifyInput+0x90>)
 80002b6:	f001 fd89 	bl	8001dcc <HAL_GPIO_ReadPin>
 80002ba:	4603      	mov	r3, r0
 80002bc:	461a      	mov	r2, r3
 80002be:	4b1a      	ldr	r3, [pc, #104]	; (8000328 <getKeyModifyInput+0x8c>)
 80002c0:	601a      	str	r2, [r3, #0]
    if ((key_reg0_button2 == key_reg1_button2) && (key_reg1_button2 == key_reg2_button2))
 80002c2:	4b18      	ldr	r3, [pc, #96]	; (8000324 <getKeyModifyInput+0x88>)
 80002c4:	681a      	ldr	r2, [r3, #0]
 80002c6:	4b16      	ldr	r3, [pc, #88]	; (8000320 <getKeyModifyInput+0x84>)
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	429a      	cmp	r2, r3
 80002cc:	d125      	bne.n	800031a <getKeyModifyInput+0x7e>
 80002ce:	4b14      	ldr	r3, [pc, #80]	; (8000320 <getKeyModifyInput+0x84>)
 80002d0:	681a      	ldr	r2, [r3, #0]
 80002d2:	4b15      	ldr	r3, [pc, #84]	; (8000328 <getKeyModifyInput+0x8c>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	429a      	cmp	r2, r3
 80002d8:	d11f      	bne.n	800031a <getKeyModifyInput+0x7e>
    {
        if (key_reg2_button2 != stable_state2)
 80002da:	4b13      	ldr	r3, [pc, #76]	; (8000328 <getKeyModifyInput+0x8c>)
 80002dc:	681a      	ldr	r2, [r3, #0]
 80002de:	4b14      	ldr	r3, [pc, #80]	; (8000330 <getKeyModifyInput+0x94>)
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	429a      	cmp	r2, r3
 80002e4:	d00d      	beq.n	8000302 <getKeyModifyInput+0x66>
        {
            stable_state2 = key_reg2_button2;
 80002e6:	4b10      	ldr	r3, [pc, #64]	; (8000328 <getKeyModifyInput+0x8c>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	4a11      	ldr	r2, [pc, #68]	; (8000330 <getKeyModifyInput+0x94>)
 80002ec:	6013      	str	r3, [r2, #0]

            if (key_reg2_button2 == PRESSED_STATE)
 80002ee:	4b0e      	ldr	r3, [pc, #56]	; (8000328 <getKeyModifyInput+0x8c>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d111      	bne.n	800031a <getKeyModifyInput+0x7e>
            {
                subKey2();
 80002f6:	f7ff ff6b 	bl	80001d0 <subKey2>
                timer_for_key_modify_press = 50;
 80002fa:	4b0e      	ldr	r3, [pc, #56]	; (8000334 <getKeyModifyInput+0x98>)
 80002fc:	2232      	movs	r2, #50	; 0x32
 80002fe:	601a      	str	r2, [r3, #0]
            {
            	stable_state2 = NORMAL_STATE;
            }
        }
    }
}
 8000300:	e00b      	b.n	800031a <getKeyModifyInput+0x7e>
            timer_for_key_modify_press--;
 8000302:	4b0c      	ldr	r3, [pc, #48]	; (8000334 <getKeyModifyInput+0x98>)
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	3b01      	subs	r3, #1
 8000308:	4a0a      	ldr	r2, [pc, #40]	; (8000334 <getKeyModifyInput+0x98>)
 800030a:	6013      	str	r3, [r2, #0]
            if (timer_for_key_modify_press == 0)
 800030c:	4b09      	ldr	r3, [pc, #36]	; (8000334 <getKeyModifyInput+0x98>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	2b00      	cmp	r3, #0
 8000312:	d102      	bne.n	800031a <getKeyModifyInput+0x7e>
            	stable_state2 = NORMAL_STATE;
 8000314:	4b06      	ldr	r3, [pc, #24]	; (8000330 <getKeyModifyInput+0x94>)
 8000316:	2201      	movs	r2, #1
 8000318:	601a      	str	r2, [r3, #0]
}
 800031a:	bf00      	nop
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	20000014 	.word	0x20000014
 8000324:	20000010 	.word	0x20000010
 8000328:	20000018 	.word	0x20000018
 800032c:	40010800 	.word	0x40010800
 8000330:	2000001c 	.word	0x2000001c
 8000334:	20000034 	.word	0x20000034

08000338 <getKeySetValueInput>:


void getKeySetValueInput(){
 8000338:	b580      	push	{r7, lr}
 800033a:	af00      	add	r7, sp, #0
	key_reg0_button3 = key_reg1_button3;
 800033c:	4b1f      	ldr	r3, [pc, #124]	; (80003bc <getKeySetValueInput+0x84>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	4a1f      	ldr	r2, [pc, #124]	; (80003c0 <getKeySetValueInput+0x88>)
 8000342:	6013      	str	r3, [r2, #0]
    key_reg1_button3 = key_reg2_button3;
 8000344:	4b1f      	ldr	r3, [pc, #124]	; (80003c4 <getKeySetValueInput+0x8c>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	4a1c      	ldr	r2, [pc, #112]	; (80003bc <getKeySetValueInput+0x84>)
 800034a:	6013      	str	r3, [r2, #0]
    key_reg2_button3 = HAL_GPIO_ReadPin(Button3_GPIO_Port, Button3_Pin);
 800034c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000350:	481d      	ldr	r0, [pc, #116]	; (80003c8 <getKeySetValueInput+0x90>)
 8000352:	f001 fd3b 	bl	8001dcc <HAL_GPIO_ReadPin>
 8000356:	4603      	mov	r3, r0
 8000358:	461a      	mov	r2, r3
 800035a:	4b1a      	ldr	r3, [pc, #104]	; (80003c4 <getKeySetValueInput+0x8c>)
 800035c:	601a      	str	r2, [r3, #0]
    if ((key_reg0_button3 == key_reg1_button3) && (key_reg1_button3 == key_reg2_button3))
 800035e:	4b18      	ldr	r3, [pc, #96]	; (80003c0 <getKeySetValueInput+0x88>)
 8000360:	681a      	ldr	r2, [r3, #0]
 8000362:	4b16      	ldr	r3, [pc, #88]	; (80003bc <getKeySetValueInput+0x84>)
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	429a      	cmp	r2, r3
 8000368:	d125      	bne.n	80003b6 <getKeySetValueInput+0x7e>
 800036a:	4b14      	ldr	r3, [pc, #80]	; (80003bc <getKeySetValueInput+0x84>)
 800036c:	681a      	ldr	r2, [r3, #0]
 800036e:	4b15      	ldr	r3, [pc, #84]	; (80003c4 <getKeySetValueInput+0x8c>)
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	429a      	cmp	r2, r3
 8000374:	d11f      	bne.n	80003b6 <getKeySetValueInput+0x7e>
    {
        if (key_reg2_button3 != stable_state3)
 8000376:	4b13      	ldr	r3, [pc, #76]	; (80003c4 <getKeySetValueInput+0x8c>)
 8000378:	681a      	ldr	r2, [r3, #0]
 800037a:	4b14      	ldr	r3, [pc, #80]	; (80003cc <getKeySetValueInput+0x94>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	429a      	cmp	r2, r3
 8000380:	d00d      	beq.n	800039e <getKeySetValueInput+0x66>
        {
            stable_state3 = key_reg2_button3;
 8000382:	4b10      	ldr	r3, [pc, #64]	; (80003c4 <getKeySetValueInput+0x8c>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	4a11      	ldr	r2, [pc, #68]	; (80003cc <getKeySetValueInput+0x94>)
 8000388:	6013      	str	r3, [r2, #0]

            if (key_reg2_button3 == PRESSED_STATE)
 800038a:	4b0e      	ldr	r3, [pc, #56]	; (80003c4 <getKeySetValueInput+0x8c>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	2b00      	cmp	r3, #0
 8000390:	d111      	bne.n	80003b6 <getKeySetValueInput+0x7e>
            {
                subKey3();
 8000392:	f7ff ff29 	bl	80001e8 <subKey3>
                timer_for_key_set_value_press = 200;
 8000396:	4b0e      	ldr	r3, [pc, #56]	; (80003d0 <getKeySetValueInput+0x98>)
 8000398:	22c8      	movs	r2, #200	; 0xc8
 800039a:	601a      	str	r2, [r3, #0]
            {
            	stable_state3 = NORMAL_STATE;
            }
        }
    }
}
 800039c:	e00b      	b.n	80003b6 <getKeySetValueInput+0x7e>
            timer_for_key_set_value_press--;
 800039e:	4b0c      	ldr	r3, [pc, #48]	; (80003d0 <getKeySetValueInput+0x98>)
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	3b01      	subs	r3, #1
 80003a4:	4a0a      	ldr	r2, [pc, #40]	; (80003d0 <getKeySetValueInput+0x98>)
 80003a6:	6013      	str	r3, [r2, #0]
            if (timer_for_key_set_value_press == 0)
 80003a8:	4b09      	ldr	r3, [pc, #36]	; (80003d0 <getKeySetValueInput+0x98>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d102      	bne.n	80003b6 <getKeySetValueInput+0x7e>
            	stable_state3 = NORMAL_STATE;
 80003b0:	4b06      	ldr	r3, [pc, #24]	; (80003cc <getKeySetValueInput+0x94>)
 80003b2:	2201      	movs	r2, #1
 80003b4:	601a      	str	r2, [r3, #0]
}
 80003b6:	bf00      	nop
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	bf00      	nop
 80003bc:	20000024 	.word	0x20000024
 80003c0:	20000020 	.word	0x20000020
 80003c4:	20000028 	.word	0x20000028
 80003c8:	40010800 	.word	0x40010800
 80003cc:	2000002c 	.word	0x2000002c
 80003d0:	20000038 	.word	0x20000038

080003d4 <fsm_run>:
 *      Author: Vy Nguyen
 */

#include "fsm.h"

void fsm_run(){
 80003d4:	b580      	push	{r7, lr}
 80003d6:	af00      	add	r7, sp, #0
	switch(status){
 80003d8:	4bb5      	ldr	r3, [pc, #724]	; (80006b0 <fsm_run+0x2dc>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	3b0c      	subs	r3, #12
 80003de:	2b0b      	cmp	r3, #11
 80003e0:	f200 82d8 	bhi.w	8000994 <fsm_run+0x5c0>
 80003e4:	a201      	add	r2, pc, #4	; (adr r2, 80003ec <fsm_run+0x18>)
 80003e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003ea:	bf00      	nop
 80003ec:	0800041d 	.word	0x0800041d
 80003f0:	080005d1 	.word	0x080005d1
 80003f4:	080007ad 	.word	0x080007ad
 80003f8:	08000995 	.word	0x08000995
 80003fc:	08000995 	.word	0x08000995
 8000400:	08000995 	.word	0x08000995
 8000404:	08000995 	.word	0x08000995
 8000408:	08000995 	.word	0x08000995
 800040c:	08000995 	.word	0x08000995
 8000410:	0800050d 	.word	0x0800050d
 8000414:	080006e9 	.word	0x080006e9
 8000418:	080008c7 	.word	0x080008c7

		case MODE_2:
			resetTimer1ForTrafficLight();
 800041c:	f001 f89e 	bl	800155c <resetTimer1ForTrafficLight>
			resetTimer2ForEn7seg();
 8000420:	f001 f8ac 	bl	800157c <resetTimer2ForEn7seg>
			resetTimer3ForDisplay();
 8000424:	f001 f8ba 	bl	800159c <resetTimer3ForDisplay>

			HAL_GPIO_WritePin ( LED_YELLOW_1_3_GPIO_Port , LED_YELLOW_1_3_Pin , GPIO_PIN_SET);
 8000428:	2201      	movs	r2, #1
 800042a:	2140      	movs	r1, #64	; 0x40
 800042c:	48a1      	ldr	r0, [pc, #644]	; (80006b4 <fsm_run+0x2e0>)
 800042e:	f001 fce4 	bl	8001dfa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( LED_GREEN_1_3_GPIO_Port , LED_GREEN_1_3_Pin , GPIO_PIN_SET);
 8000432:	2201      	movs	r2, #1
 8000434:	2180      	movs	r1, #128	; 0x80
 8000436:	489f      	ldr	r0, [pc, #636]	; (80006b4 <fsm_run+0x2e0>)
 8000438:	f001 fcdf 	bl	8001dfa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( LED_YELLOW_2_4_GPIO_Port , LED_YELLOW_2_4_Pin , GPIO_PIN_SET);
 800043c:	2201      	movs	r2, #1
 800043e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000442:	489c      	ldr	r0, [pc, #624]	; (80006b4 <fsm_run+0x2e0>)
 8000444:	f001 fcd9 	bl	8001dfa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( LED_GREEN_2_4_GPIO_Port , LED_GREEN_2_4_Pin , GPIO_PIN_SET);
 8000448:	2201      	movs	r2, #1
 800044a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800044e:	4899      	ldr	r0, [pc, #612]	; (80006b4 <fsm_run+0x2e0>)
 8000450:	f001 fcd3 	bl	8001dfa <HAL_GPIO_WritePin>

			if(timer5_flag_for_toggle == 1){
 8000454:	4b98      	ldr	r3, [pc, #608]	; (80006b8 <fsm_run+0x2e4>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	2b01      	cmp	r3, #1
 800045a:	d10c      	bne.n	8000476 <fsm_run+0xa2>
				HAL_GPIO_TogglePin(LED_RED_1_3_GPIO_Port, LED_RED_1_3_Pin);
 800045c:	2120      	movs	r1, #32
 800045e:	4895      	ldr	r0, [pc, #596]	; (80006b4 <fsm_run+0x2e0>)
 8000460:	f001 fce3 	bl	8001e2a <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(LED_RED_2_4_GPIO_Port, LED_RED_2_4_Pin);
 8000464:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000468:	4892      	ldr	r0, [pc, #584]	; (80006b4 <fsm_run+0x2e0>)
 800046a:	f001 fcde 	bl	8001e2a <HAL_GPIO_TogglePin>
				setTimer5ForToggle(500);
 800046e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000472:	f001 f859 	bl	8001528 <setTimer5ForToggle>
			}

			if(timer4_flag_for_7seg_follow_mode){
 8000476:	4b91      	ldr	r3, [pc, #580]	; (80006bc <fsm_run+0x2e8>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	2b00      	cmp	r3, #0
 800047c:	d026      	beq.n	80004cc <fsm_run+0xf8>
				led_buffer[0] = 0;
 800047e:	4b90      	ldr	r3, [pc, #576]	; (80006c0 <fsm_run+0x2ec>)
 8000480:	2200      	movs	r2, #0
 8000482:	601a      	str	r2, [r3, #0]
				led_buffer[1] = 2;
 8000484:	4b8e      	ldr	r3, [pc, #568]	; (80006c0 <fsm_run+0x2ec>)
 8000486:	2202      	movs	r2, #2
 8000488:	605a      	str	r2, [r3, #4]
				led_buffer[2] = counter_led_red/10;
 800048a:	4b8e      	ldr	r3, [pc, #568]	; (80006c4 <fsm_run+0x2f0>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	4a8e      	ldr	r2, [pc, #568]	; (80006c8 <fsm_run+0x2f4>)
 8000490:	fb82 1203 	smull	r1, r2, r2, r3
 8000494:	1092      	asrs	r2, r2, #2
 8000496:	17db      	asrs	r3, r3, #31
 8000498:	1ad3      	subs	r3, r2, r3
 800049a:	4a89      	ldr	r2, [pc, #548]	; (80006c0 <fsm_run+0x2ec>)
 800049c:	6093      	str	r3, [r2, #8]
				led_buffer[3] = counter_led_red%10;
 800049e:	4b89      	ldr	r3, [pc, #548]	; (80006c4 <fsm_run+0x2f0>)
 80004a0:	6819      	ldr	r1, [r3, #0]
 80004a2:	4b89      	ldr	r3, [pc, #548]	; (80006c8 <fsm_run+0x2f4>)
 80004a4:	fb83 2301 	smull	r2, r3, r3, r1
 80004a8:	109a      	asrs	r2, r3, #2
 80004aa:	17cb      	asrs	r3, r1, #31
 80004ac:	1ad2      	subs	r2, r2, r3
 80004ae:	4613      	mov	r3, r2
 80004b0:	009b      	lsls	r3, r3, #2
 80004b2:	4413      	add	r3, r2
 80004b4:	005b      	lsls	r3, r3, #1
 80004b6:	1aca      	subs	r2, r1, r3
 80004b8:	4b81      	ldr	r3, [pc, #516]	; (80006c0 <fsm_run+0x2ec>)
 80004ba:	60da      	str	r2, [r3, #12]
				update7SEG(index_led);
 80004bc:	4b83      	ldr	r3, [pc, #524]	; (80006cc <fsm_run+0x2f8>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	4618      	mov	r0, r3
 80004c2:	f000 fcb5 	bl	8000e30 <update7SEG>
				setTimer4For7segFollowMode(250);
 80004c6:	20fa      	movs	r0, #250	; 0xfa
 80004c8:	f001 f814 	bl	80014f4 <setTimer4For7segFollowMode>
			}

			if(isButtonSelectPressed() == 1){
 80004cc:	f7ff fe3e 	bl	800014c <isButtonSelectPressed>
 80004d0:	4603      	mov	r3, r0
 80004d2:	2b01      	cmp	r3, #1
 80004d4:	d102      	bne.n	80004dc <fsm_run+0x108>
				status = MODE_3;
 80004d6:	4b76      	ldr	r3, [pc, #472]	; (80006b0 <fsm_run+0x2dc>)
 80004d8:	220d      	movs	r2, #13
 80004da:	601a      	str	r2, [r3, #0]
			}

			if(isButtonModifyPressed() == 1){
 80004dc:	f7ff fe48 	bl	8000170 <isButtonModifyPressed>
 80004e0:	4603      	mov	r3, r0
 80004e2:	2b01      	cmp	r3, #1
 80004e4:	d10f      	bne.n	8000506 <fsm_run+0x132>
				status = LED_RED_ANIMATION;
 80004e6:	4b72      	ldr	r3, [pc, #456]	; (80006b0 <fsm_run+0x2dc>)
 80004e8:	2215      	movs	r2, #21
 80004ea:	601a      	str	r2, [r3, #0]
				if(counter_led_red >= 99){
 80004ec:	4b75      	ldr	r3, [pc, #468]	; (80006c4 <fsm_run+0x2f0>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	2b62      	cmp	r3, #98	; 0x62
 80004f2:	dd03      	ble.n	80004fc <fsm_run+0x128>
					counter_led_red = 1;
 80004f4:	4b73      	ldr	r3, [pc, #460]	; (80006c4 <fsm_run+0x2f0>)
 80004f6:	2201      	movs	r2, #1
 80004f8:	601a      	str	r2, [r3, #0]
 80004fa:	e004      	b.n	8000506 <fsm_run+0x132>
				}
				else counter_led_red++;
 80004fc:	4b71      	ldr	r3, [pc, #452]	; (80006c4 <fsm_run+0x2f0>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	3301      	adds	r3, #1
 8000502:	4a70      	ldr	r2, [pc, #448]	; (80006c4 <fsm_run+0x2f0>)
 8000504:	6013      	str	r3, [r2, #0]
			}

			if(isButtonSetValuePressed() == 1){
 8000506:	f7ff fe45 	bl	8000194 <isButtonSetValuePressed>

			};
			break;
 800050a:	e268      	b.n	80009de <fsm_run+0x60a>

		case LED_RED_ANIMATION:
			if(timer5_flag_for_toggle == 1){
 800050c:	4b6a      	ldr	r3, [pc, #424]	; (80006b8 <fsm_run+0x2e4>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	2b01      	cmp	r3, #1
 8000512:	d10c      	bne.n	800052e <fsm_run+0x15a>
				HAL_GPIO_TogglePin(LED_RED_1_3_GPIO_Port, LED_RED_1_3_Pin);
 8000514:	2120      	movs	r1, #32
 8000516:	4867      	ldr	r0, [pc, #412]	; (80006b4 <fsm_run+0x2e0>)
 8000518:	f001 fc87 	bl	8001e2a <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(LED_RED_2_4_GPIO_Port, LED_RED_2_4_Pin);
 800051c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000520:	4864      	ldr	r0, [pc, #400]	; (80006b4 <fsm_run+0x2e0>)
 8000522:	f001 fc82 	bl	8001e2a <HAL_GPIO_TogglePin>
				setTimer5ForToggle(500);
 8000526:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800052a:	f000 fffd 	bl	8001528 <setTimer5ForToggle>
			}

			if(timer4_flag_for_7seg_follow_mode){
 800052e:	4b63      	ldr	r3, [pc, #396]	; (80006bc <fsm_run+0x2e8>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	2b00      	cmp	r3, #0
 8000534:	d020      	beq.n	8000578 <fsm_run+0x1a4>
				led_buffer[2] = counter_led_red/10;
 8000536:	4b63      	ldr	r3, [pc, #396]	; (80006c4 <fsm_run+0x2f0>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	4a63      	ldr	r2, [pc, #396]	; (80006c8 <fsm_run+0x2f4>)
 800053c:	fb82 1203 	smull	r1, r2, r2, r3
 8000540:	1092      	asrs	r2, r2, #2
 8000542:	17db      	asrs	r3, r3, #31
 8000544:	1ad3      	subs	r3, r2, r3
 8000546:	4a5e      	ldr	r2, [pc, #376]	; (80006c0 <fsm_run+0x2ec>)
 8000548:	6093      	str	r3, [r2, #8]
				led_buffer[3] = counter_led_red%10;
 800054a:	4b5e      	ldr	r3, [pc, #376]	; (80006c4 <fsm_run+0x2f0>)
 800054c:	6819      	ldr	r1, [r3, #0]
 800054e:	4b5e      	ldr	r3, [pc, #376]	; (80006c8 <fsm_run+0x2f4>)
 8000550:	fb83 2301 	smull	r2, r3, r3, r1
 8000554:	109a      	asrs	r2, r3, #2
 8000556:	17cb      	asrs	r3, r1, #31
 8000558:	1ad2      	subs	r2, r2, r3
 800055a:	4613      	mov	r3, r2
 800055c:	009b      	lsls	r3, r3, #2
 800055e:	4413      	add	r3, r2
 8000560:	005b      	lsls	r3, r3, #1
 8000562:	1aca      	subs	r2, r1, r3
 8000564:	4b56      	ldr	r3, [pc, #344]	; (80006c0 <fsm_run+0x2ec>)
 8000566:	60da      	str	r2, [r3, #12]
				update7SEG(index_led);
 8000568:	4b58      	ldr	r3, [pc, #352]	; (80006cc <fsm_run+0x2f8>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4618      	mov	r0, r3
 800056e:	f000 fc5f 	bl	8000e30 <update7SEG>
				setTimer4For7segFollowMode(250);
 8000572:	20fa      	movs	r0, #250	; 0xfa
 8000574:	f000 ffbe 	bl	80014f4 <setTimer4For7segFollowMode>
			}

			if(isButtonModifyPressed() == 1){
 8000578:	f7ff fdfa 	bl	8000170 <isButtonModifyPressed>
 800057c:	4603      	mov	r3, r0
 800057e:	2b01      	cmp	r3, #1
 8000580:	d10c      	bne.n	800059c <fsm_run+0x1c8>
				if(counter_led_red >= 99){
 8000582:	4b50      	ldr	r3, [pc, #320]	; (80006c4 <fsm_run+0x2f0>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	2b62      	cmp	r3, #98	; 0x62
 8000588:	dd03      	ble.n	8000592 <fsm_run+0x1be>
					counter_led_red = 1;
 800058a:	4b4e      	ldr	r3, [pc, #312]	; (80006c4 <fsm_run+0x2f0>)
 800058c:	2201      	movs	r2, #1
 800058e:	601a      	str	r2, [r3, #0]
 8000590:	e004      	b.n	800059c <fsm_run+0x1c8>
				}
				else counter_led_red++;
 8000592:	4b4c      	ldr	r3, [pc, #304]	; (80006c4 <fsm_run+0x2f0>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	3301      	adds	r3, #1
 8000598:	4a4a      	ldr	r2, [pc, #296]	; (80006c4 <fsm_run+0x2f0>)
 800059a:	6013      	str	r3, [r2, #0]
			}

			if(isButtonSelectPressed() == 1){
 800059c:	f7ff fdd6 	bl	800014c <isButtonSelectPressed>

			};

			if(isButtonSetValuePressed() == 1){
 80005a0:	f7ff fdf8 	bl	8000194 <isButtonSetValuePressed>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b01      	cmp	r3, #1
 80005a8:	f040 8214 	bne.w	80009d4 <fsm_run+0x600>
				if(counter_led_red > counter_led_yellow){
 80005ac:	4b45      	ldr	r3, [pc, #276]	; (80006c4 <fsm_run+0x2f0>)
 80005ae:	681a      	ldr	r2, [r3, #0]
 80005b0:	4b47      	ldr	r3, [pc, #284]	; (80006d0 <fsm_run+0x2fc>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	429a      	cmp	r2, r3
 80005b6:	f340 820d 	ble.w	80009d4 <fsm_run+0x600>
					counter_led_green = counter_led_red - counter_led_yellow;
 80005ba:	4b42      	ldr	r3, [pc, #264]	; (80006c4 <fsm_run+0x2f0>)
 80005bc:	681a      	ldr	r2, [r3, #0]
 80005be:	4b44      	ldr	r3, [pc, #272]	; (80006d0 <fsm_run+0x2fc>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	1ad3      	subs	r3, r2, r3
 80005c4:	4a43      	ldr	r2, [pc, #268]	; (80006d4 <fsm_run+0x300>)
 80005c6:	6013      	str	r3, [r2, #0]
					status = MODE_2;
 80005c8:	4b39      	ldr	r3, [pc, #228]	; (80006b0 <fsm_run+0x2dc>)
 80005ca:	220c      	movs	r2, #12
 80005cc:	601a      	str	r2, [r3, #0]
				}
			}
			break;
 80005ce:	e201      	b.n	80009d4 <fsm_run+0x600>


		case MODE_3:
			resetTimer1ForTrafficLight();
 80005d0:	f000 ffc4 	bl	800155c <resetTimer1ForTrafficLight>
			resetTimer2ForEn7seg();
 80005d4:	f000 ffd2 	bl	800157c <resetTimer2ForEn7seg>
			resetTimer3ForDisplay();
 80005d8:	f000 ffe0 	bl	800159c <resetTimer3ForDisplay>

			HAL_GPIO_WritePin ( LED_RED_1_3_GPIO_Port , LED_RED_1_3_Pin , GPIO_PIN_SET );
 80005dc:	2201      	movs	r2, #1
 80005de:	2120      	movs	r1, #32
 80005e0:	4834      	ldr	r0, [pc, #208]	; (80006b4 <fsm_run+0x2e0>)
 80005e2:	f001 fc0a 	bl	8001dfa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( LED_GREEN_1_3_GPIO_Port , LED_GREEN_1_3_Pin , GPIO_PIN_SET);
 80005e6:	2201      	movs	r2, #1
 80005e8:	2180      	movs	r1, #128	; 0x80
 80005ea:	4832      	ldr	r0, [pc, #200]	; (80006b4 <fsm_run+0x2e0>)
 80005ec:	f001 fc05 	bl	8001dfa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( LED_RED_2_4_GPIO_Port , LED_RED_2_4_Pin , GPIO_PIN_SET );
 80005f0:	2201      	movs	r2, #1
 80005f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005f6:	482f      	ldr	r0, [pc, #188]	; (80006b4 <fsm_run+0x2e0>)
 80005f8:	f001 fbff 	bl	8001dfa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( LED_GREEN_2_4_GPIO_Port , LED_GREEN_2_4_Pin , GPIO_PIN_SET);
 80005fc:	2201      	movs	r2, #1
 80005fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000602:	482c      	ldr	r0, [pc, #176]	; (80006b4 <fsm_run+0x2e0>)
 8000604:	f001 fbf9 	bl	8001dfa <HAL_GPIO_WritePin>

			if(timer5_flag_for_toggle == 1){
 8000608:	4b2b      	ldr	r3, [pc, #172]	; (80006b8 <fsm_run+0x2e4>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	2b01      	cmp	r3, #1
 800060e:	d10c      	bne.n	800062a <fsm_run+0x256>
				HAL_GPIO_TogglePin( LED_YELLOW_1_3_GPIO_Port , LED_YELLOW_1_3_Pin);
 8000610:	2140      	movs	r1, #64	; 0x40
 8000612:	4828      	ldr	r0, [pc, #160]	; (80006b4 <fsm_run+0x2e0>)
 8000614:	f001 fc09 	bl	8001e2a <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin( LED_YELLOW_2_4_GPIO_Port , LED_YELLOW_2_4_Pin );
 8000618:	f44f 7100 	mov.w	r1, #512	; 0x200
 800061c:	4825      	ldr	r0, [pc, #148]	; (80006b4 <fsm_run+0x2e0>)
 800061e:	f001 fc04 	bl	8001e2a <HAL_GPIO_TogglePin>
				setTimer5ForToggle(500);
 8000622:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000626:	f000 ff7f 	bl	8001528 <setTimer5ForToggle>
			}

			if(timer4_flag_for_7seg_follow_mode){
 800062a:	4b24      	ldr	r3, [pc, #144]	; (80006bc <fsm_run+0x2e8>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	2b00      	cmp	r3, #0
 8000630:	d026      	beq.n	8000680 <fsm_run+0x2ac>
				led_buffer[0] = 0;
 8000632:	4b23      	ldr	r3, [pc, #140]	; (80006c0 <fsm_run+0x2ec>)
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
				led_buffer[1] = 3;
 8000638:	4b21      	ldr	r3, [pc, #132]	; (80006c0 <fsm_run+0x2ec>)
 800063a:	2203      	movs	r2, #3
 800063c:	605a      	str	r2, [r3, #4]
				led_buffer[2] = counter_led_yellow/10;
 800063e:	4b24      	ldr	r3, [pc, #144]	; (80006d0 <fsm_run+0x2fc>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	4a21      	ldr	r2, [pc, #132]	; (80006c8 <fsm_run+0x2f4>)
 8000644:	fb82 1203 	smull	r1, r2, r2, r3
 8000648:	1092      	asrs	r2, r2, #2
 800064a:	17db      	asrs	r3, r3, #31
 800064c:	1ad3      	subs	r3, r2, r3
 800064e:	4a1c      	ldr	r2, [pc, #112]	; (80006c0 <fsm_run+0x2ec>)
 8000650:	6093      	str	r3, [r2, #8]
				led_buffer[3] = counter_led_yellow%10;
 8000652:	4b1f      	ldr	r3, [pc, #124]	; (80006d0 <fsm_run+0x2fc>)
 8000654:	6819      	ldr	r1, [r3, #0]
 8000656:	4b1c      	ldr	r3, [pc, #112]	; (80006c8 <fsm_run+0x2f4>)
 8000658:	fb83 2301 	smull	r2, r3, r3, r1
 800065c:	109a      	asrs	r2, r3, #2
 800065e:	17cb      	asrs	r3, r1, #31
 8000660:	1ad2      	subs	r2, r2, r3
 8000662:	4613      	mov	r3, r2
 8000664:	009b      	lsls	r3, r3, #2
 8000666:	4413      	add	r3, r2
 8000668:	005b      	lsls	r3, r3, #1
 800066a:	1aca      	subs	r2, r1, r3
 800066c:	4b14      	ldr	r3, [pc, #80]	; (80006c0 <fsm_run+0x2ec>)
 800066e:	60da      	str	r2, [r3, #12]
				update7SEG(index_led);
 8000670:	4b16      	ldr	r3, [pc, #88]	; (80006cc <fsm_run+0x2f8>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4618      	mov	r0, r3
 8000676:	f000 fbdb 	bl	8000e30 <update7SEG>
				setTimer4For7segFollowMode(250);
 800067a:	20fa      	movs	r0, #250	; 0xfa
 800067c:	f000 ff3a 	bl	80014f4 <setTimer4For7segFollowMode>
			}

			if(isButtonSelectPressed() == 1){
 8000680:	f7ff fd64 	bl	800014c <isButtonSelectPressed>
 8000684:	4603      	mov	r3, r0
 8000686:	2b01      	cmp	r3, #1
 8000688:	d102      	bne.n	8000690 <fsm_run+0x2bc>
				status = MODE_4;
 800068a:	4b09      	ldr	r3, [pc, #36]	; (80006b0 <fsm_run+0x2dc>)
 800068c:	220e      	movs	r2, #14
 800068e:	601a      	str	r2, [r3, #0]
			}

			if(isButtonModifyPressed() == 1){
 8000690:	f7ff fd6e 	bl	8000170 <isButtonModifyPressed>
 8000694:	4603      	mov	r3, r0
 8000696:	2b01      	cmp	r3, #1
 8000698:	d123      	bne.n	80006e2 <fsm_run+0x30e>
				status = LED_YELLOW_ANIMATION;
 800069a:	4b05      	ldr	r3, [pc, #20]	; (80006b0 <fsm_run+0x2dc>)
 800069c:	2216      	movs	r2, #22
 800069e:	601a      	str	r2, [r3, #0]
				if(counter_led_yellow >= 10){
 80006a0:	4b0b      	ldr	r3, [pc, #44]	; (80006d0 <fsm_run+0x2fc>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	2b09      	cmp	r3, #9
 80006a6:	dd17      	ble.n	80006d8 <fsm_run+0x304>
					counter_led_yellow = 1;
 80006a8:	4b09      	ldr	r3, [pc, #36]	; (80006d0 <fsm_run+0x2fc>)
 80006aa:	2201      	movs	r2, #1
 80006ac:	601a      	str	r2, [r3, #0]
 80006ae:	e018      	b.n	80006e2 <fsm_run+0x30e>
 80006b0:	20000090 	.word	0x20000090
 80006b4:	40010800 	.word	0x40010800
 80006b8:	200000c4 	.word	0x200000c4
 80006bc:	200000bc 	.word	0x200000bc
 80006c0:	20000048 	.word	0x20000048
 80006c4:	2000003c 	.word	0x2000003c
 80006c8:	66666667 	.word	0x66666667
 80006cc:	20000094 	.word	0x20000094
 80006d0:	20000040 	.word	0x20000040
 80006d4:	20000044 	.word	0x20000044
				}
				else counter_led_yellow++;
 80006d8:	4baf      	ldr	r3, [pc, #700]	; (8000998 <fsm_run+0x5c4>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	3301      	adds	r3, #1
 80006de:	4aae      	ldr	r2, [pc, #696]	; (8000998 <fsm_run+0x5c4>)
 80006e0:	6013      	str	r3, [r2, #0]
			}

			if(isButtonSetValuePressed() == 1){
 80006e2:	f7ff fd57 	bl	8000194 <isButtonSetValuePressed>

			};
			break;
 80006e6:	e17a      	b.n	80009de <fsm_run+0x60a>


		case LED_YELLOW_ANIMATION:
			if(timer5_flag_for_toggle == 1){
 80006e8:	4bac      	ldr	r3, [pc, #688]	; (800099c <fsm_run+0x5c8>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	2b01      	cmp	r3, #1
 80006ee:	d10c      	bne.n	800070a <fsm_run+0x336>
				HAL_GPIO_TogglePin(LED_YELLOW_1_3_GPIO_Port, LED_YELLOW_1_3_Pin);
 80006f0:	2140      	movs	r1, #64	; 0x40
 80006f2:	48ab      	ldr	r0, [pc, #684]	; (80009a0 <fsm_run+0x5cc>)
 80006f4:	f001 fb99 	bl	8001e2a <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(LED_YELLOW_2_4_GPIO_Port, LED_YELLOW_2_4_Pin);
 80006f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006fc:	48a8      	ldr	r0, [pc, #672]	; (80009a0 <fsm_run+0x5cc>)
 80006fe:	f001 fb94 	bl	8001e2a <HAL_GPIO_TogglePin>
				setTimer5ForToggle(500);
 8000702:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000706:	f000 ff0f 	bl	8001528 <setTimer5ForToggle>
			}

			if(timer4_flag_for_7seg_follow_mode){
 800070a:	4ba6      	ldr	r3, [pc, #664]	; (80009a4 <fsm_run+0x5d0>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d020      	beq.n	8000754 <fsm_run+0x380>
				led_buffer[2] = counter_led_yellow/10;
 8000712:	4ba1      	ldr	r3, [pc, #644]	; (8000998 <fsm_run+0x5c4>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	4aa4      	ldr	r2, [pc, #656]	; (80009a8 <fsm_run+0x5d4>)
 8000718:	fb82 1203 	smull	r1, r2, r2, r3
 800071c:	1092      	asrs	r2, r2, #2
 800071e:	17db      	asrs	r3, r3, #31
 8000720:	1ad3      	subs	r3, r2, r3
 8000722:	4aa2      	ldr	r2, [pc, #648]	; (80009ac <fsm_run+0x5d8>)
 8000724:	6093      	str	r3, [r2, #8]
				led_buffer[3] = counter_led_yellow%10;
 8000726:	4b9c      	ldr	r3, [pc, #624]	; (8000998 <fsm_run+0x5c4>)
 8000728:	6819      	ldr	r1, [r3, #0]
 800072a:	4b9f      	ldr	r3, [pc, #636]	; (80009a8 <fsm_run+0x5d4>)
 800072c:	fb83 2301 	smull	r2, r3, r3, r1
 8000730:	109a      	asrs	r2, r3, #2
 8000732:	17cb      	asrs	r3, r1, #31
 8000734:	1ad2      	subs	r2, r2, r3
 8000736:	4613      	mov	r3, r2
 8000738:	009b      	lsls	r3, r3, #2
 800073a:	4413      	add	r3, r2
 800073c:	005b      	lsls	r3, r3, #1
 800073e:	1aca      	subs	r2, r1, r3
 8000740:	4b9a      	ldr	r3, [pc, #616]	; (80009ac <fsm_run+0x5d8>)
 8000742:	60da      	str	r2, [r3, #12]
				update7SEG(index_led);
 8000744:	4b9a      	ldr	r3, [pc, #616]	; (80009b0 <fsm_run+0x5dc>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4618      	mov	r0, r3
 800074a:	f000 fb71 	bl	8000e30 <update7SEG>
				setTimer4For7segFollowMode(250);
 800074e:	20fa      	movs	r0, #250	; 0xfa
 8000750:	f000 fed0 	bl	80014f4 <setTimer4For7segFollowMode>
			}

			if(isButtonModifyPressed() == 1){
 8000754:	f7ff fd0c 	bl	8000170 <isButtonModifyPressed>
 8000758:	4603      	mov	r3, r0
 800075a:	2b01      	cmp	r3, #1
 800075c:	d10c      	bne.n	8000778 <fsm_run+0x3a4>
				if(counter_led_yellow >= 10){
 800075e:	4b8e      	ldr	r3, [pc, #568]	; (8000998 <fsm_run+0x5c4>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	2b09      	cmp	r3, #9
 8000764:	dd03      	ble.n	800076e <fsm_run+0x39a>
					counter_led_yellow = 1;
 8000766:	4b8c      	ldr	r3, [pc, #560]	; (8000998 <fsm_run+0x5c4>)
 8000768:	2201      	movs	r2, #1
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	e004      	b.n	8000778 <fsm_run+0x3a4>
				}
				else counter_led_yellow++;
 800076e:	4b8a      	ldr	r3, [pc, #552]	; (8000998 <fsm_run+0x5c4>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	3301      	adds	r3, #1
 8000774:	4a88      	ldr	r2, [pc, #544]	; (8000998 <fsm_run+0x5c4>)
 8000776:	6013      	str	r3, [r2, #0]
			}

			if(isButtonSelectPressed() == 1){
 8000778:	f7ff fce8 	bl	800014c <isButtonSelectPressed>

			};

			if(isButtonSetValuePressed() == 1){
 800077c:	f7ff fd0a 	bl	8000194 <isButtonSetValuePressed>
 8000780:	4603      	mov	r3, r0
 8000782:	2b01      	cmp	r3, #1
 8000784:	f040 8128 	bne.w	80009d8 <fsm_run+0x604>
				if(counter_led_red > counter_led_yellow){
 8000788:	4b8a      	ldr	r3, [pc, #552]	; (80009b4 <fsm_run+0x5e0>)
 800078a:	681a      	ldr	r2, [r3, #0]
 800078c:	4b82      	ldr	r3, [pc, #520]	; (8000998 <fsm_run+0x5c4>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	429a      	cmp	r2, r3
 8000792:	f340 8121 	ble.w	80009d8 <fsm_run+0x604>
					counter_led_green = counter_led_red - counter_led_yellow;
 8000796:	4b87      	ldr	r3, [pc, #540]	; (80009b4 <fsm_run+0x5e0>)
 8000798:	681a      	ldr	r2, [r3, #0]
 800079a:	4b7f      	ldr	r3, [pc, #508]	; (8000998 <fsm_run+0x5c4>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	1ad3      	subs	r3, r2, r3
 80007a0:	4a85      	ldr	r2, [pc, #532]	; (80009b8 <fsm_run+0x5e4>)
 80007a2:	6013      	str	r3, [r2, #0]
					status = MODE_3;
 80007a4:	4b85      	ldr	r3, [pc, #532]	; (80009bc <fsm_run+0x5e8>)
 80007a6:	220d      	movs	r2, #13
 80007a8:	601a      	str	r2, [r3, #0]
				}
			}
			break;
 80007aa:	e115      	b.n	80009d8 <fsm_run+0x604>


		case MODE_4:
			resetTimer1ForTrafficLight();
 80007ac:	f000 fed6 	bl	800155c <resetTimer1ForTrafficLight>
			resetTimer2ForEn7seg();
 80007b0:	f000 fee4 	bl	800157c <resetTimer2ForEn7seg>
			resetTimer3ForDisplay();
 80007b4:	f000 fef2 	bl	800159c <resetTimer3ForDisplay>

			HAL_GPIO_WritePin ( LED_YELLOW_1_3_GPIO_Port , LED_YELLOW_1_3_Pin , GPIO_PIN_SET);
 80007b8:	2201      	movs	r2, #1
 80007ba:	2140      	movs	r1, #64	; 0x40
 80007bc:	4878      	ldr	r0, [pc, #480]	; (80009a0 <fsm_run+0x5cc>)
 80007be:	f001 fb1c 	bl	8001dfa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( LED_RED_1_3_GPIO_Port , LED_RED_1_3_Pin , GPIO_PIN_SET);
 80007c2:	2201      	movs	r2, #1
 80007c4:	2120      	movs	r1, #32
 80007c6:	4876      	ldr	r0, [pc, #472]	; (80009a0 <fsm_run+0x5cc>)
 80007c8:	f001 fb17 	bl	8001dfa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( LED_YELLOW_2_4_GPIO_Port , LED_YELLOW_2_4_Pin , GPIO_PIN_SET);
 80007cc:	2201      	movs	r2, #1
 80007ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007d2:	4873      	ldr	r0, [pc, #460]	; (80009a0 <fsm_run+0x5cc>)
 80007d4:	f001 fb11 	bl	8001dfa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( LED_RED_2_4_GPIO_Port , LED_RED_2_4_Pin , GPIO_PIN_SET);
 80007d8:	2201      	movs	r2, #1
 80007da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007de:	4870      	ldr	r0, [pc, #448]	; (80009a0 <fsm_run+0x5cc>)
 80007e0:	f001 fb0b 	bl	8001dfa <HAL_GPIO_WritePin>

			if(timer5_flag_for_toggle == 1){
 80007e4:	4b6d      	ldr	r3, [pc, #436]	; (800099c <fsm_run+0x5c8>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	2b01      	cmp	r3, #1
 80007ea:	d10c      	bne.n	8000806 <fsm_run+0x432>
				HAL_GPIO_TogglePin(LED_GREEN_1_3_GPIO_Port, LED_GREEN_1_3_Pin);
 80007ec:	2180      	movs	r1, #128	; 0x80
 80007ee:	486c      	ldr	r0, [pc, #432]	; (80009a0 <fsm_run+0x5cc>)
 80007f0:	f001 fb1b 	bl	8001e2a <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(LED_GREEN_2_4_GPIO_Port, LED_GREEN_2_4_Pin);
 80007f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007f8:	4869      	ldr	r0, [pc, #420]	; (80009a0 <fsm_run+0x5cc>)
 80007fa:	f001 fb16 	bl	8001e2a <HAL_GPIO_TogglePin>
				setTimer5ForToggle(500);
 80007fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000802:	f000 fe91 	bl	8001528 <setTimer5ForToggle>
			}

			if(timer4_flag_for_7seg_follow_mode){
 8000806:	4b67      	ldr	r3, [pc, #412]	; (80009a4 <fsm_run+0x5d0>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d026      	beq.n	800085c <fsm_run+0x488>
				led_buffer[0] = 0;
 800080e:	4b67      	ldr	r3, [pc, #412]	; (80009ac <fsm_run+0x5d8>)
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]
				led_buffer[1] = 4;
 8000814:	4b65      	ldr	r3, [pc, #404]	; (80009ac <fsm_run+0x5d8>)
 8000816:	2204      	movs	r2, #4
 8000818:	605a      	str	r2, [r3, #4]
				led_buffer[2] = counter_led_green/10;
 800081a:	4b67      	ldr	r3, [pc, #412]	; (80009b8 <fsm_run+0x5e4>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	4a62      	ldr	r2, [pc, #392]	; (80009a8 <fsm_run+0x5d4>)
 8000820:	fb82 1203 	smull	r1, r2, r2, r3
 8000824:	1092      	asrs	r2, r2, #2
 8000826:	17db      	asrs	r3, r3, #31
 8000828:	1ad3      	subs	r3, r2, r3
 800082a:	4a60      	ldr	r2, [pc, #384]	; (80009ac <fsm_run+0x5d8>)
 800082c:	6093      	str	r3, [r2, #8]
				led_buffer[3] = counter_led_green%10;
 800082e:	4b62      	ldr	r3, [pc, #392]	; (80009b8 <fsm_run+0x5e4>)
 8000830:	6819      	ldr	r1, [r3, #0]
 8000832:	4b5d      	ldr	r3, [pc, #372]	; (80009a8 <fsm_run+0x5d4>)
 8000834:	fb83 2301 	smull	r2, r3, r3, r1
 8000838:	109a      	asrs	r2, r3, #2
 800083a:	17cb      	asrs	r3, r1, #31
 800083c:	1ad2      	subs	r2, r2, r3
 800083e:	4613      	mov	r3, r2
 8000840:	009b      	lsls	r3, r3, #2
 8000842:	4413      	add	r3, r2
 8000844:	005b      	lsls	r3, r3, #1
 8000846:	1aca      	subs	r2, r1, r3
 8000848:	4b58      	ldr	r3, [pc, #352]	; (80009ac <fsm_run+0x5d8>)
 800084a:	60da      	str	r2, [r3, #12]
				update7SEG(index_led);
 800084c:	4b58      	ldr	r3, [pc, #352]	; (80009b0 <fsm_run+0x5dc>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4618      	mov	r0, r3
 8000852:	f000 faed 	bl	8000e30 <update7SEG>
				setTimer4For7segFollowMode(250);
 8000856:	20fa      	movs	r0, #250	; 0xfa
 8000858:	f000 fe4c 	bl	80014f4 <setTimer4For7segFollowMode>
			}

			if(isButtonSelectPressed() == 1){
 800085c:	f7ff fc76 	bl	800014c <isButtonSelectPressed>
 8000860:	4603      	mov	r3, r0
 8000862:	2b01      	cmp	r3, #1
 8000864:	d117      	bne.n	8000896 <fsm_run+0x4c2>
				status = MODE_1;
 8000866:	4b55      	ldr	r3, [pc, #340]	; (80009bc <fsm_run+0x5e8>)
 8000868:	220b      	movs	r2, #11
 800086a:	601a      	str	r2, [r3, #0]
				resetTimer1ForTrafficLight();
 800086c:	f000 fe76 	bl	800155c <resetTimer1ForTrafficLight>
				resetTimer2ForEn7seg();
 8000870:	f000 fe84 	bl	800157c <resetTimer2ForEn7seg>
				resetTimer3ForDisplay();
 8000874:	f000 fe92 	bl	800159c <resetTimer3ForDisplay>

				count_led_1_3 = 0;
 8000878:	4b51      	ldr	r3, [pc, #324]	; (80009c0 <fsm_run+0x5ec>)
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
				count_led_2_4 = 0;
 800087e:	4b51      	ldr	r3, [pc, #324]	; (80009c4 <fsm_run+0x5f0>)
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
				timer1_flag_for_traffic_light = 1;
 8000884:	4b50      	ldr	r3, [pc, #320]	; (80009c8 <fsm_run+0x5f4>)
 8000886:	2201      	movs	r2, #1
 8000888:	601a      	str	r2, [r3, #0]
				timer2_flag_for_en_7seg = 1;
 800088a:	4b50      	ldr	r3, [pc, #320]	; (80009cc <fsm_run+0x5f8>)
 800088c:	2201      	movs	r2, #1
 800088e:	601a      	str	r2, [r3, #0]
				timer3_flag_for_display = 1;
 8000890:	4b4f      	ldr	r3, [pc, #316]	; (80009d0 <fsm_run+0x5fc>)
 8000892:	2201      	movs	r2, #1
 8000894:	601a      	str	r2, [r3, #0]
			}

			if(isButtonModifyPressed() == 1){
 8000896:	f7ff fc6b 	bl	8000170 <isButtonModifyPressed>
 800089a:	4603      	mov	r3, r0
 800089c:	2b01      	cmp	r3, #1
 800089e:	d10f      	bne.n	80008c0 <fsm_run+0x4ec>
				status = LED_GREEN_ANIMATION;
 80008a0:	4b46      	ldr	r3, [pc, #280]	; (80009bc <fsm_run+0x5e8>)
 80008a2:	2217      	movs	r2, #23
 80008a4:	601a      	str	r2, [r3, #0]
				if(counter_led_green >= 99){
 80008a6:	4b44      	ldr	r3, [pc, #272]	; (80009b8 <fsm_run+0x5e4>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	2b62      	cmp	r3, #98	; 0x62
 80008ac:	dd03      	ble.n	80008b6 <fsm_run+0x4e2>
					counter_led_green = 1;
 80008ae:	4b42      	ldr	r3, [pc, #264]	; (80009b8 <fsm_run+0x5e4>)
 80008b0:	2201      	movs	r2, #1
 80008b2:	601a      	str	r2, [r3, #0]
 80008b4:	e004      	b.n	80008c0 <fsm_run+0x4ec>
				}
				else counter_led_green++;
 80008b6:	4b40      	ldr	r3, [pc, #256]	; (80009b8 <fsm_run+0x5e4>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	3301      	adds	r3, #1
 80008bc:	4a3e      	ldr	r2, [pc, #248]	; (80009b8 <fsm_run+0x5e4>)
 80008be:	6013      	str	r3, [r2, #0]
			}

			if(isButtonSetValuePressed() == 1){
 80008c0:	f7ff fc68 	bl	8000194 <isButtonSetValuePressed>
			};
			break;
 80008c4:	e08b      	b.n	80009de <fsm_run+0x60a>


		case LED_GREEN_ANIMATION:
			if(timer5_flag_for_toggle == 1){
 80008c6:	4b35      	ldr	r3, [pc, #212]	; (800099c <fsm_run+0x5c8>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	2b01      	cmp	r3, #1
 80008cc:	d10c      	bne.n	80008e8 <fsm_run+0x514>
				HAL_GPIO_TogglePin(LED_GREEN_1_3_GPIO_Port, LED_GREEN_1_3_Pin);
 80008ce:	2180      	movs	r1, #128	; 0x80
 80008d0:	4833      	ldr	r0, [pc, #204]	; (80009a0 <fsm_run+0x5cc>)
 80008d2:	f001 faaa 	bl	8001e2a <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(LED_GREEN_2_4_GPIO_Port, LED_GREEN_2_4_Pin);
 80008d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008da:	4831      	ldr	r0, [pc, #196]	; (80009a0 <fsm_run+0x5cc>)
 80008dc:	f001 faa5 	bl	8001e2a <HAL_GPIO_TogglePin>
				setTimer5ForToggle(500);
 80008e0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008e4:	f000 fe20 	bl	8001528 <setTimer5ForToggle>
			}

			if(timer4_flag_for_7seg_follow_mode){
 80008e8:	4b2e      	ldr	r3, [pc, #184]	; (80009a4 <fsm_run+0x5d0>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d020      	beq.n	8000932 <fsm_run+0x55e>
				led_buffer[2] = counter_led_green/10;
 80008f0:	4b31      	ldr	r3, [pc, #196]	; (80009b8 <fsm_run+0x5e4>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4a2c      	ldr	r2, [pc, #176]	; (80009a8 <fsm_run+0x5d4>)
 80008f6:	fb82 1203 	smull	r1, r2, r2, r3
 80008fa:	1092      	asrs	r2, r2, #2
 80008fc:	17db      	asrs	r3, r3, #31
 80008fe:	1ad3      	subs	r3, r2, r3
 8000900:	4a2a      	ldr	r2, [pc, #168]	; (80009ac <fsm_run+0x5d8>)
 8000902:	6093      	str	r3, [r2, #8]
				led_buffer[3] = counter_led_green%10;
 8000904:	4b2c      	ldr	r3, [pc, #176]	; (80009b8 <fsm_run+0x5e4>)
 8000906:	6819      	ldr	r1, [r3, #0]
 8000908:	4b27      	ldr	r3, [pc, #156]	; (80009a8 <fsm_run+0x5d4>)
 800090a:	fb83 2301 	smull	r2, r3, r3, r1
 800090e:	109a      	asrs	r2, r3, #2
 8000910:	17cb      	asrs	r3, r1, #31
 8000912:	1ad2      	subs	r2, r2, r3
 8000914:	4613      	mov	r3, r2
 8000916:	009b      	lsls	r3, r3, #2
 8000918:	4413      	add	r3, r2
 800091a:	005b      	lsls	r3, r3, #1
 800091c:	1aca      	subs	r2, r1, r3
 800091e:	4b23      	ldr	r3, [pc, #140]	; (80009ac <fsm_run+0x5d8>)
 8000920:	60da      	str	r2, [r3, #12]
				update7SEG(index_led);
 8000922:	4b23      	ldr	r3, [pc, #140]	; (80009b0 <fsm_run+0x5dc>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	4618      	mov	r0, r3
 8000928:	f000 fa82 	bl	8000e30 <update7SEG>
				setTimer4For7segFollowMode(250);
 800092c:	20fa      	movs	r0, #250	; 0xfa
 800092e:	f000 fde1 	bl	80014f4 <setTimer4For7segFollowMode>
			}

			if(isButtonModifyPressed() == 1){
 8000932:	f7ff fc1d 	bl	8000170 <isButtonModifyPressed>
 8000936:	4603      	mov	r3, r0
 8000938:	2b01      	cmp	r3, #1
 800093a:	d10c      	bne.n	8000956 <fsm_run+0x582>
				if(counter_led_green >= 99){
 800093c:	4b1e      	ldr	r3, [pc, #120]	; (80009b8 <fsm_run+0x5e4>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	2b62      	cmp	r3, #98	; 0x62
 8000942:	dd03      	ble.n	800094c <fsm_run+0x578>
					counter_led_green = 1;
 8000944:	4b1c      	ldr	r3, [pc, #112]	; (80009b8 <fsm_run+0x5e4>)
 8000946:	2201      	movs	r2, #1
 8000948:	601a      	str	r2, [r3, #0]
 800094a:	e004      	b.n	8000956 <fsm_run+0x582>
				}
				else counter_led_green++;
 800094c:	4b1a      	ldr	r3, [pc, #104]	; (80009b8 <fsm_run+0x5e4>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	3301      	adds	r3, #1
 8000952:	4a19      	ldr	r2, [pc, #100]	; (80009b8 <fsm_run+0x5e4>)
 8000954:	6013      	str	r3, [r2, #0]
			}

			if(isButtonSelectPressed() == 1){
 8000956:	f7ff fbf9 	bl	800014c <isButtonSelectPressed>

			};

			if(isButtonSetValuePressed() == 1){
 800095a:	f7ff fc1b 	bl	8000194 <isButtonSetValuePressed>
 800095e:	4603      	mov	r3, r0
 8000960:	2b01      	cmp	r3, #1
 8000962:	d13b      	bne.n	80009dc <fsm_run+0x608>
				if((counter_led_yellow + counter_led_green < 100) && (counter_led_green > counter_led_yellow)){
 8000964:	4b0c      	ldr	r3, [pc, #48]	; (8000998 <fsm_run+0x5c4>)
 8000966:	681a      	ldr	r2, [r3, #0]
 8000968:	4b13      	ldr	r3, [pc, #76]	; (80009b8 <fsm_run+0x5e4>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4413      	add	r3, r2
 800096e:	2b63      	cmp	r3, #99	; 0x63
 8000970:	dc34      	bgt.n	80009dc <fsm_run+0x608>
 8000972:	4b11      	ldr	r3, [pc, #68]	; (80009b8 <fsm_run+0x5e4>)
 8000974:	681a      	ldr	r2, [r3, #0]
 8000976:	4b08      	ldr	r3, [pc, #32]	; (8000998 <fsm_run+0x5c4>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	429a      	cmp	r2, r3
 800097c:	dd2e      	ble.n	80009dc <fsm_run+0x608>
					counter_led_red = counter_led_green + counter_led_yellow;
 800097e:	4b0e      	ldr	r3, [pc, #56]	; (80009b8 <fsm_run+0x5e4>)
 8000980:	681a      	ldr	r2, [r3, #0]
 8000982:	4b05      	ldr	r3, [pc, #20]	; (8000998 <fsm_run+0x5c4>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	4413      	add	r3, r2
 8000988:	4a0a      	ldr	r2, [pc, #40]	; (80009b4 <fsm_run+0x5e0>)
 800098a:	6013      	str	r3, [r2, #0]
					status = MODE_4;
 800098c:	4b0b      	ldr	r3, [pc, #44]	; (80009bc <fsm_run+0x5e8>)
 800098e:	220e      	movs	r2, #14
 8000990:	601a      	str	r2, [r3, #0]
				}
			}
			break;
 8000992:	e023      	b.n	80009dc <fsm_run+0x608>

		default:
			break;
 8000994:	bf00      	nop
 8000996:	e022      	b.n	80009de <fsm_run+0x60a>
 8000998:	20000040 	.word	0x20000040
 800099c:	200000c4 	.word	0x200000c4
 80009a0:	40010800 	.word	0x40010800
 80009a4:	200000bc 	.word	0x200000bc
 80009a8:	66666667 	.word	0x66666667
 80009ac:	20000048 	.word	0x20000048
 80009b0:	20000094 	.word	0x20000094
 80009b4:	2000003c 	.word	0x2000003c
 80009b8:	20000044 	.word	0x20000044
 80009bc:	20000090 	.word	0x20000090
 80009c0:	20000098 	.word	0x20000098
 80009c4:	2000009c 	.word	0x2000009c
 80009c8:	200000a4 	.word	0x200000a4
 80009cc:	200000ac 	.word	0x200000ac
 80009d0:	200000b4 	.word	0x200000b4
			break;
 80009d4:	bf00      	nop
 80009d6:	e002      	b.n	80009de <fsm_run+0x60a>
			break;
 80009d8:	bf00      	nop
 80009da:	e000      	b.n	80009de <fsm_run+0x60a>
			break;
 80009dc:	bf00      	nop
	}
}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop

080009e4 <fsm_automatic_mode1_run>:
 */

#include "fsm_automatic_mode1_run.h"
#include "software_timer.h"

void fsm_automatic_mode1_run(){
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
	if(timer3_flag_for_display == 1){
 80009e8:	4bc2      	ldr	r3, [pc, #776]	; (8000cf4 <fsm_automatic_mode1_run+0x310>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	2b01      	cmp	r3, #1
 80009ee:	d105      	bne.n	80009fc <fsm_automatic_mode1_run+0x18>
		display();
 80009f0:	f000 fac6 	bl	8000f80 <display>
		setTimer3ForDisplay(1000);
 80009f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009f8:	f000 fd62 	bl	80014c0 <setTimer3ForDisplay>
	}

	if(timer2_flag_for_en_7seg == 1){
 80009fc:	4bbe      	ldr	r3, [pc, #760]	; (8000cf8 <fsm_automatic_mode1_run+0x314>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	2b01      	cmp	r3, #1
 8000a02:	d107      	bne.n	8000a14 <fsm_automatic_mode1_run+0x30>
		update7SEG(index_led);
 8000a04:	4bbd      	ldr	r3, [pc, #756]	; (8000cfc <fsm_automatic_mode1_run+0x318>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f000 fa11 	bl	8000e30 <update7SEG>
		setTimer2ForEn7seg(250);
 8000a0e:	20fa      	movs	r0, #250	; 0xfa
 8000a10:	f000 fd3c 	bl	800148c <setTimer2ForEn7seg>
	}

	switch(status){
 8000a14:	4bba      	ldr	r3, [pc, #744]	; (8000d00 <fsm_automatic_mode1_run+0x31c>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	3b01      	subs	r3, #1
 8000a1a:	2b0a      	cmp	r3, #10
 8000a1c:	f200 815e 	bhi.w	8000cdc <fsm_automatic_mode1_run+0x2f8>
 8000a20:	a201      	add	r2, pc, #4	; (adr r2, 8000a28 <fsm_automatic_mode1_run+0x44>)
 8000a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a26:	bf00      	nop
 8000a28:	08000ab1 	.word	0x08000ab1
 8000a2c:	08000b3d 	.word	0x08000b3d
 8000a30:	08000bc9 	.word	0x08000bc9
 8000a34:	08000c53 	.word	0x08000c53
 8000a38:	08000cdd 	.word	0x08000cdd
 8000a3c:	08000cdd 	.word	0x08000cdd
 8000a40:	08000cdd 	.word	0x08000cdd
 8000a44:	08000cdd 	.word	0x08000cdd
 8000a48:	08000cdd 	.word	0x08000cdd
 8000a4c:	08000cdd 	.word	0x08000cdd
 8000a50:	08000a55 	.word	0x08000a55

		case MODE_1:
			HAL_GPIO_WritePin ( LED_RED_1_3_GPIO_Port , LED_RED_1_3_Pin , GPIO_PIN_SET );
 8000a54:	2201      	movs	r2, #1
 8000a56:	2120      	movs	r1, #32
 8000a58:	48aa      	ldr	r0, [pc, #680]	; (8000d04 <fsm_automatic_mode1_run+0x320>)
 8000a5a:	f001 f9ce 	bl	8001dfa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( LED_YELLOW_1_3_GPIO_Port , LED_YELLOW_1_3_Pin , GPIO_PIN_SET);
 8000a5e:	2201      	movs	r2, #1
 8000a60:	2140      	movs	r1, #64	; 0x40
 8000a62:	48a8      	ldr	r0, [pc, #672]	; (8000d04 <fsm_automatic_mode1_run+0x320>)
 8000a64:	f001 f9c9 	bl	8001dfa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( LED_GREEN_1_3_GPIO_Port , LED_GREEN_1_3_Pin , GPIO_PIN_SET);
 8000a68:	2201      	movs	r2, #1
 8000a6a:	2180      	movs	r1, #128	; 0x80
 8000a6c:	48a5      	ldr	r0, [pc, #660]	; (8000d04 <fsm_automatic_mode1_run+0x320>)
 8000a6e:	f001 f9c4 	bl	8001dfa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( LED_RED_2_4_GPIO_Port , LED_RED_2_4_Pin , GPIO_PIN_SET );
 8000a72:	2201      	movs	r2, #1
 8000a74:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a78:	48a2      	ldr	r0, [pc, #648]	; (8000d04 <fsm_automatic_mode1_run+0x320>)
 8000a7a:	f001 f9be 	bl	8001dfa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( LED_YELLOW_2_4_GPIO_Port , LED_YELLOW_2_4_Pin , GPIO_PIN_SET);
 8000a7e:	2201      	movs	r2, #1
 8000a80:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a84:	489f      	ldr	r0, [pc, #636]	; (8000d04 <fsm_automatic_mode1_run+0x320>)
 8000a86:	f001 f9b8 	bl	8001dfa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( LED_GREEN_2_4_GPIO_Port , LED_GREEN_2_4_Pin , GPIO_PIN_SET);
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a90:	489c      	ldr	r0, [pc, #624]	; (8000d04 <fsm_automatic_mode1_run+0x320>)
 8000a92:	f001 f9b2 	bl	8001dfa <HAL_GPIO_WritePin>

			status = RED_GREEN;
 8000a96:	4b9a      	ldr	r3, [pc, #616]	; (8000d00 <fsm_automatic_mode1_run+0x31c>)
 8000a98:	2201      	movs	r2, #1
 8000a9a:	601a      	str	r2, [r3, #0]
			setTimer1ForTrafficLight(counter_led_green*1000);
 8000a9c:	4b9a      	ldr	r3, [pc, #616]	; (8000d08 <fsm_automatic_mode1_run+0x324>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000aa4:	fb02 f303 	mul.w	r3, r2, r3
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f000 fcd5 	bl	8001458 <setTimer1ForTrafficLight>
			break;
 8000aae:	e11e      	b.n	8000cee <fsm_automatic_mode1_run+0x30a>

		case RED_GREEN:
			HAL_GPIO_WritePin ( LED_RED_1_3_GPIO_Port , LED_RED_1_3_Pin , GPIO_PIN_RESET );
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	2120      	movs	r1, #32
 8000ab4:	4893      	ldr	r0, [pc, #588]	; (8000d04 <fsm_automatic_mode1_run+0x320>)
 8000ab6:	f001 f9a0 	bl	8001dfa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( LED_YELLOW_1_3_GPIO_Port , LED_YELLOW_1_3_Pin , GPIO_PIN_SET);
 8000aba:	2201      	movs	r2, #1
 8000abc:	2140      	movs	r1, #64	; 0x40
 8000abe:	4891      	ldr	r0, [pc, #580]	; (8000d04 <fsm_automatic_mode1_run+0x320>)
 8000ac0:	f001 f99b 	bl	8001dfa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( LED_GREEN_1_3_GPIO_Port , LED_GREEN_1_3_Pin , GPIO_PIN_SET);
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	2180      	movs	r1, #128	; 0x80
 8000ac8:	488e      	ldr	r0, [pc, #568]	; (8000d04 <fsm_automatic_mode1_run+0x320>)
 8000aca:	f001 f996 	bl	8001dfa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( LED_RED_2_4_GPIO_Port , LED_RED_2_4_Pin , GPIO_PIN_SET );
 8000ace:	2201      	movs	r2, #1
 8000ad0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ad4:	488b      	ldr	r0, [pc, #556]	; (8000d04 <fsm_automatic_mode1_run+0x320>)
 8000ad6:	f001 f990 	bl	8001dfa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( LED_YELLOW_2_4_GPIO_Port , LED_YELLOW_2_4_Pin , GPIO_PIN_SET);
 8000ada:	2201      	movs	r2, #1
 8000adc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ae0:	4888      	ldr	r0, [pc, #544]	; (8000d04 <fsm_automatic_mode1_run+0x320>)
 8000ae2:	f001 f98a 	bl	8001dfa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( LED_GREEN_2_4_GPIO_Port , LED_GREEN_2_4_Pin , GPIO_PIN_RESET);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000aec:	4885      	ldr	r0, [pc, #532]	; (8000d04 <fsm_automatic_mode1_run+0x320>)
 8000aee:	f001 f984 	bl	8001dfa <HAL_GPIO_WritePin>

			if(timer1_flag_for_traffic_light == 1){
 8000af2:	4b86      	ldr	r3, [pc, #536]	; (8000d0c <fsm_automatic_mode1_run+0x328>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	2b01      	cmp	r3, #1
 8000af8:	d10b      	bne.n	8000b12 <fsm_automatic_mode1_run+0x12e>
				status = RED_YELLOW;
 8000afa:	4b81      	ldr	r3, [pc, #516]	; (8000d00 <fsm_automatic_mode1_run+0x31c>)
 8000afc:	2202      	movs	r2, #2
 8000afe:	601a      	str	r2, [r3, #0]
				setTimer1ForTrafficLight(counter_led_yellow *1000);
 8000b00:	4b83      	ldr	r3, [pc, #524]	; (8000d10 <fsm_automatic_mode1_run+0x32c>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b08:	fb02 f303 	mul.w	r3, r2, r3
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f000 fca3 	bl	8001458 <setTimer1ForTrafficLight>
			}

			if(isButtonSelectPressed() == 1){
 8000b12:	f7ff fb1b 	bl	800014c <isButtonSelectPressed>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b01      	cmp	r3, #1
 8000b1a:	f040 80e1 	bne.w	8000ce0 <fsm_automatic_mode1_run+0x2fc>
				status = MODE_2;
 8000b1e:	4b78      	ldr	r3, [pc, #480]	; (8000d00 <fsm_automatic_mode1_run+0x31c>)
 8000b20:	220c      	movs	r2, #12
 8000b22:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin ( LED_RED_1_3_GPIO_Port , LED_RED_1_3_Pin , GPIO_PIN_RESET ) ;
 8000b24:	2200      	movs	r2, #0
 8000b26:	2120      	movs	r1, #32
 8000b28:	4876      	ldr	r0, [pc, #472]	; (8000d04 <fsm_automatic_mode1_run+0x320>)
 8000b2a:	f001 f966 	bl	8001dfa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin ( LED_RED_2_4_GPIO_Port , LED_RED_2_4_Pin , GPIO_PIN_RESET ) ;
 8000b2e:	2200      	movs	r2, #0
 8000b30:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b34:	4873      	ldr	r0, [pc, #460]	; (8000d04 <fsm_automatic_mode1_run+0x320>)
 8000b36:	f001 f960 	bl	8001dfa <HAL_GPIO_WritePin>
			}
			break;
 8000b3a:	e0d1      	b.n	8000ce0 <fsm_automatic_mode1_run+0x2fc>


		case RED_YELLOW:
			HAL_GPIO_WritePin ( LED_RED_1_3_GPIO_Port , LED_RED_1_3_Pin , GPIO_PIN_RESET ) ;
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	2120      	movs	r1, #32
 8000b40:	4870      	ldr	r0, [pc, #448]	; (8000d04 <fsm_automatic_mode1_run+0x320>)
 8000b42:	f001 f95a 	bl	8001dfa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( LED_YELLOW_1_3_GPIO_Port , LED_YELLOW_1_3_Pin , GPIO_PIN_SET) ;
 8000b46:	2201      	movs	r2, #1
 8000b48:	2140      	movs	r1, #64	; 0x40
 8000b4a:	486e      	ldr	r0, [pc, #440]	; (8000d04 <fsm_automatic_mode1_run+0x320>)
 8000b4c:	f001 f955 	bl	8001dfa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( LED_GREEN_1_3_GPIO_Port , LED_GREEN_1_3_Pin , GPIO_PIN_SET) ;
 8000b50:	2201      	movs	r2, #1
 8000b52:	2180      	movs	r1, #128	; 0x80
 8000b54:	486b      	ldr	r0, [pc, #428]	; (8000d04 <fsm_automatic_mode1_run+0x320>)
 8000b56:	f001 f950 	bl	8001dfa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( LED_RED_2_4_GPIO_Port , LED_RED_2_4_Pin , GPIO_PIN_SET ) ;
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b60:	4868      	ldr	r0, [pc, #416]	; (8000d04 <fsm_automatic_mode1_run+0x320>)
 8000b62:	f001 f94a 	bl	8001dfa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( LED_YELLOW_2_4_GPIO_Port , LED_YELLOW_2_4_Pin , GPIO_PIN_RESET) ;
 8000b66:	2200      	movs	r2, #0
 8000b68:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b6c:	4865      	ldr	r0, [pc, #404]	; (8000d04 <fsm_automatic_mode1_run+0x320>)
 8000b6e:	f001 f944 	bl	8001dfa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( LED_GREEN_2_4_GPIO_Port , LED_GREEN_2_4_Pin , GPIO_PIN_SET) ;
 8000b72:	2201      	movs	r2, #1
 8000b74:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b78:	4862      	ldr	r0, [pc, #392]	; (8000d04 <fsm_automatic_mode1_run+0x320>)
 8000b7a:	f001 f93e 	bl	8001dfa <HAL_GPIO_WritePin>

			if(timer1_flag_for_traffic_light == 1){
 8000b7e:	4b63      	ldr	r3, [pc, #396]	; (8000d0c <fsm_automatic_mode1_run+0x328>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	2b01      	cmp	r3, #1
 8000b84:	d10b      	bne.n	8000b9e <fsm_automatic_mode1_run+0x1ba>
				status = GREEN_RED;
 8000b86:	4b5e      	ldr	r3, [pc, #376]	; (8000d00 <fsm_automatic_mode1_run+0x31c>)
 8000b88:	2203      	movs	r2, #3
 8000b8a:	601a      	str	r2, [r3, #0]
				setTimer1ForTrafficLight(counter_led_green*1000);
 8000b8c:	4b5e      	ldr	r3, [pc, #376]	; (8000d08 <fsm_automatic_mode1_run+0x324>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b94:	fb02 f303 	mul.w	r3, r2, r3
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f000 fc5d 	bl	8001458 <setTimer1ForTrafficLight>
			}

			if(isButtonSelectPressed() == 1){
 8000b9e:	f7ff fad5 	bl	800014c <isButtonSelectPressed>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b01      	cmp	r3, #1
 8000ba6:	f040 809d 	bne.w	8000ce4 <fsm_automatic_mode1_run+0x300>
				status = MODE_2;
 8000baa:	4b55      	ldr	r3, [pc, #340]	; (8000d00 <fsm_automatic_mode1_run+0x31c>)
 8000bac:	220c      	movs	r2, #12
 8000bae:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin ( LED_RED_1_3_GPIO_Port , LED_RED_1_3_Pin , GPIO_PIN_RESET ) ;
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	2120      	movs	r1, #32
 8000bb4:	4853      	ldr	r0, [pc, #332]	; (8000d04 <fsm_automatic_mode1_run+0x320>)
 8000bb6:	f001 f920 	bl	8001dfa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin ( LED_RED_2_4_GPIO_Port , LED_RED_2_4_Pin , GPIO_PIN_RESET ) ;
 8000bba:	2200      	movs	r2, #0
 8000bbc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bc0:	4850      	ldr	r0, [pc, #320]	; (8000d04 <fsm_automatic_mode1_run+0x320>)
 8000bc2:	f001 f91a 	bl	8001dfa <HAL_GPIO_WritePin>
			}
			break;
 8000bc6:	e08d      	b.n	8000ce4 <fsm_automatic_mode1_run+0x300>

		case GREEN_RED:
			HAL_GPIO_WritePin ( LED_RED_1_3_GPIO_Port , LED_RED_1_3_Pin , GPIO_PIN_SET ) ;
 8000bc8:	2201      	movs	r2, #1
 8000bca:	2120      	movs	r1, #32
 8000bcc:	484d      	ldr	r0, [pc, #308]	; (8000d04 <fsm_automatic_mode1_run+0x320>)
 8000bce:	f001 f914 	bl	8001dfa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( LED_YELLOW_1_3_GPIO_Port , LED_YELLOW_1_3_Pin , GPIO_PIN_SET) ;
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	2140      	movs	r1, #64	; 0x40
 8000bd6:	484b      	ldr	r0, [pc, #300]	; (8000d04 <fsm_automatic_mode1_run+0x320>)
 8000bd8:	f001 f90f 	bl	8001dfa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( LED_GREEN_1_3_GPIO_Port , LED_GREEN_1_3_Pin , GPIO_PIN_RESET) ;
 8000bdc:	2200      	movs	r2, #0
 8000bde:	2180      	movs	r1, #128	; 0x80
 8000be0:	4848      	ldr	r0, [pc, #288]	; (8000d04 <fsm_automatic_mode1_run+0x320>)
 8000be2:	f001 f90a 	bl	8001dfa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( LED_RED_2_4_GPIO_Port , LED_RED_2_4_Pin , GPIO_PIN_RESET ) ;
 8000be6:	2200      	movs	r2, #0
 8000be8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bec:	4845      	ldr	r0, [pc, #276]	; (8000d04 <fsm_automatic_mode1_run+0x320>)
 8000bee:	f001 f904 	bl	8001dfa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( LED_YELLOW_2_4_GPIO_Port , LED_YELLOW_2_4_Pin , GPIO_PIN_SET) ;
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bf8:	4842      	ldr	r0, [pc, #264]	; (8000d04 <fsm_automatic_mode1_run+0x320>)
 8000bfa:	f001 f8fe 	bl	8001dfa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( LED_GREEN_2_4_GPIO_Port , LED_GREEN_2_4_Pin , GPIO_PIN_SET) ;
 8000bfe:	2201      	movs	r2, #1
 8000c00:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c04:	483f      	ldr	r0, [pc, #252]	; (8000d04 <fsm_automatic_mode1_run+0x320>)
 8000c06:	f001 f8f8 	bl	8001dfa <HAL_GPIO_WritePin>

			if(timer1_flag_for_traffic_light == 1){
 8000c0a:	4b40      	ldr	r3, [pc, #256]	; (8000d0c <fsm_automatic_mode1_run+0x328>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	2b01      	cmp	r3, #1
 8000c10:	d10b      	bne.n	8000c2a <fsm_automatic_mode1_run+0x246>
				status = YELLOW_RED;
 8000c12:	4b3b      	ldr	r3, [pc, #236]	; (8000d00 <fsm_automatic_mode1_run+0x31c>)
 8000c14:	2204      	movs	r2, #4
 8000c16:	601a      	str	r2, [r3, #0]
				setTimer1ForTrafficLight(counter_led_yellow*1000);
 8000c18:	4b3d      	ldr	r3, [pc, #244]	; (8000d10 <fsm_automatic_mode1_run+0x32c>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c20:	fb02 f303 	mul.w	r3, r2, r3
 8000c24:	4618      	mov	r0, r3
 8000c26:	f000 fc17 	bl	8001458 <setTimer1ForTrafficLight>
			}

			if(isButtonSelectPressed() == 1){
 8000c2a:	f7ff fa8f 	bl	800014c <isButtonSelectPressed>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b01      	cmp	r3, #1
 8000c32:	d159      	bne.n	8000ce8 <fsm_automatic_mode1_run+0x304>
				status = MODE_2;
 8000c34:	4b32      	ldr	r3, [pc, #200]	; (8000d00 <fsm_automatic_mode1_run+0x31c>)
 8000c36:	220c      	movs	r2, #12
 8000c38:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin ( LED_RED_1_3_GPIO_Port , LED_RED_1_3_Pin , GPIO_PIN_RESET ) ;
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2120      	movs	r1, #32
 8000c3e:	4831      	ldr	r0, [pc, #196]	; (8000d04 <fsm_automatic_mode1_run+0x320>)
 8000c40:	f001 f8db 	bl	8001dfa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin ( LED_RED_2_4_GPIO_Port , LED_RED_2_4_Pin , GPIO_PIN_RESET ) ;
 8000c44:	2200      	movs	r2, #0
 8000c46:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c4a:	482e      	ldr	r0, [pc, #184]	; (8000d04 <fsm_automatic_mode1_run+0x320>)
 8000c4c:	f001 f8d5 	bl	8001dfa <HAL_GPIO_WritePin>
			}
			break;
 8000c50:	e04a      	b.n	8000ce8 <fsm_automatic_mode1_run+0x304>

		case YELLOW_RED:
			HAL_GPIO_WritePin ( LED_RED_1_3_GPIO_Port , LED_RED_1_3_Pin , GPIO_PIN_SET ) ;
 8000c52:	2201      	movs	r2, #1
 8000c54:	2120      	movs	r1, #32
 8000c56:	482b      	ldr	r0, [pc, #172]	; (8000d04 <fsm_automatic_mode1_run+0x320>)
 8000c58:	f001 f8cf 	bl	8001dfa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( LED_YELLOW_1_3_GPIO_Port , LED_YELLOW_1_3_Pin , GPIO_PIN_RESET) ;
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	2140      	movs	r1, #64	; 0x40
 8000c60:	4828      	ldr	r0, [pc, #160]	; (8000d04 <fsm_automatic_mode1_run+0x320>)
 8000c62:	f001 f8ca 	bl	8001dfa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( LED_GREEN_1_3_GPIO_Port , LED_GREEN_1_3_Pin , GPIO_PIN_SET) ;
 8000c66:	2201      	movs	r2, #1
 8000c68:	2180      	movs	r1, #128	; 0x80
 8000c6a:	4826      	ldr	r0, [pc, #152]	; (8000d04 <fsm_automatic_mode1_run+0x320>)
 8000c6c:	f001 f8c5 	bl	8001dfa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( LED_RED_2_4_GPIO_Port , LED_RED_2_4_Pin , GPIO_PIN_RESET ) ;
 8000c70:	2200      	movs	r2, #0
 8000c72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c76:	4823      	ldr	r0, [pc, #140]	; (8000d04 <fsm_automatic_mode1_run+0x320>)
 8000c78:	f001 f8bf 	bl	8001dfa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( LED_YELLOW_2_4_GPIO_Port , LED_YELLOW_2_4_Pin , GPIO_PIN_SET) ;
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c82:	4820      	ldr	r0, [pc, #128]	; (8000d04 <fsm_automatic_mode1_run+0x320>)
 8000c84:	f001 f8b9 	bl	8001dfa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( LED_GREEN_2_4_GPIO_Port , LED_GREEN_2_4_Pin , GPIO_PIN_SET) ;
 8000c88:	2201      	movs	r2, #1
 8000c8a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c8e:	481d      	ldr	r0, [pc, #116]	; (8000d04 <fsm_automatic_mode1_run+0x320>)
 8000c90:	f001 f8b3 	bl	8001dfa <HAL_GPIO_WritePin>

			if(timer1_flag_for_traffic_light == 1){
 8000c94:	4b1d      	ldr	r3, [pc, #116]	; (8000d0c <fsm_automatic_mode1_run+0x328>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	2b01      	cmp	r3, #1
 8000c9a:	d10b      	bne.n	8000cb4 <fsm_automatic_mode1_run+0x2d0>
				status = RED_GREEN;
 8000c9c:	4b18      	ldr	r3, [pc, #96]	; (8000d00 <fsm_automatic_mode1_run+0x31c>)
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	601a      	str	r2, [r3, #0]
				setTimer1ForTrafficLight(counter_led_green*1000);
 8000ca2:	4b19      	ldr	r3, [pc, #100]	; (8000d08 <fsm_automatic_mode1_run+0x324>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000caa:	fb02 f303 	mul.w	r3, r2, r3
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f000 fbd2 	bl	8001458 <setTimer1ForTrafficLight>
			}

			if(isButtonSelectPressed() == 1){
 8000cb4:	f7ff fa4a 	bl	800014c <isButtonSelectPressed>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b01      	cmp	r3, #1
 8000cbc:	d116      	bne.n	8000cec <fsm_automatic_mode1_run+0x308>
				status = MODE_2;
 8000cbe:	4b10      	ldr	r3, [pc, #64]	; (8000d00 <fsm_automatic_mode1_run+0x31c>)
 8000cc0:	220c      	movs	r2, #12
 8000cc2:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin ( LED_RED_1_3_GPIO_Port , LED_RED_1_3_Pin , GPIO_PIN_RESET ) ;
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	2120      	movs	r1, #32
 8000cc8:	480e      	ldr	r0, [pc, #56]	; (8000d04 <fsm_automatic_mode1_run+0x320>)
 8000cca:	f001 f896 	bl	8001dfa <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin ( LED_RED_2_4_GPIO_Port , LED_RED_2_4_Pin , GPIO_PIN_RESET ) ;
 8000cce:	2200      	movs	r2, #0
 8000cd0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cd4:	480b      	ldr	r0, [pc, #44]	; (8000d04 <fsm_automatic_mode1_run+0x320>)
 8000cd6:	f001 f890 	bl	8001dfa <HAL_GPIO_WritePin>
			}
			break;
 8000cda:	e007      	b.n	8000cec <fsm_automatic_mode1_run+0x308>

		default:
			break;
 8000cdc:	bf00      	nop
 8000cde:	e006      	b.n	8000cee <fsm_automatic_mode1_run+0x30a>
			break;
 8000ce0:	bf00      	nop
 8000ce2:	e004      	b.n	8000cee <fsm_automatic_mode1_run+0x30a>
			break;
 8000ce4:	bf00      	nop
 8000ce6:	e002      	b.n	8000cee <fsm_automatic_mode1_run+0x30a>
			break;
 8000ce8:	bf00      	nop
 8000cea:	e000      	b.n	8000cee <fsm_automatic_mode1_run+0x30a>
			break;
 8000cec:	bf00      	nop
	}
}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	200000b4 	.word	0x200000b4
 8000cf8:	200000ac 	.word	0x200000ac
 8000cfc:	20000094 	.word	0x20000094
 8000d00:	20000090 	.word	0x20000090
 8000d04:	40010800 	.word	0x40010800
 8000d08:	20000044 	.word	0x20000044
 8000d0c:	200000a4 	.word	0x200000a4
 8000d10:	20000040 	.word	0x20000040

08000d14 <display7SEG>:
int count_led_1_3 = 0;
int count_led_2_4 = 0;

//////////////////////////////////////
void display7SEG(int num)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
	if (num == 0)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d10a      	bne.n	8000d38 <display7SEG+0x24>
	{
		HAL_GPIO_WritePin (GPIOB, SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin|SEG4_Pin|SEG5_Pin, GPIO_PIN_RESET);
 8000d22:	2200      	movs	r2, #0
 8000d24:	213f      	movs	r1, #63	; 0x3f
 8000d26:	4841      	ldr	r0, [pc, #260]	; (8000e2c <display7SEG+0x118>)
 8000d28:	f001 f867 	bl	8001dfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (GPIOB, SEG6_Pin, GPIO_PIN_SET);
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	2140      	movs	r1, #64	; 0x40
 8000d30:	483e      	ldr	r0, [pc, #248]	; (8000e2c <display7SEG+0x118>)
 8000d32:	f001 f862 	bl	8001dfa <HAL_GPIO_WritePin>
	else
	{
		HAL_GPIO_WritePin (GPIOB, SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin|SEG5_Pin|SEG6_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin (GPIOB, SEG4_Pin, GPIO_PIN_SET);
	}
}
 8000d36:	e074      	b.n	8000e22 <display7SEG+0x10e>
	else if (num == 1)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	2b01      	cmp	r3, #1
 8000d3c:	d10a      	bne.n	8000d54 <display7SEG+0x40>
		HAL_GPIO_WritePin (GPIOB, SEG1_Pin|SEG2_Pin, GPIO_PIN_RESET);
 8000d3e:	2200      	movs	r2, #0
 8000d40:	2106      	movs	r1, #6
 8000d42:	483a      	ldr	r0, [pc, #232]	; (8000e2c <display7SEG+0x118>)
 8000d44:	f001 f859 	bl	8001dfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (GPIOB, SEG0_Pin|SEG3_Pin|SEG4_Pin|SEG5_Pin|SEG6_Pin, GPIO_PIN_SET);
 8000d48:	2201      	movs	r2, #1
 8000d4a:	2179      	movs	r1, #121	; 0x79
 8000d4c:	4837      	ldr	r0, [pc, #220]	; (8000e2c <display7SEG+0x118>)
 8000d4e:	f001 f854 	bl	8001dfa <HAL_GPIO_WritePin>
}
 8000d52:	e066      	b.n	8000e22 <display7SEG+0x10e>
	else if (num == 2)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2b02      	cmp	r3, #2
 8000d58:	d10a      	bne.n	8000d70 <display7SEG+0x5c>
		HAL_GPIO_WritePin (GPIOB, SEG0_Pin|SEG1_Pin|SEG3_Pin|SEG4_Pin|SEG6_Pin, GPIO_PIN_RESET);
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	215b      	movs	r1, #91	; 0x5b
 8000d5e:	4833      	ldr	r0, [pc, #204]	; (8000e2c <display7SEG+0x118>)
 8000d60:	f001 f84b 	bl	8001dfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (GPIOB, SEG2_Pin|SEG5_Pin, GPIO_PIN_SET);
 8000d64:	2201      	movs	r2, #1
 8000d66:	2124      	movs	r1, #36	; 0x24
 8000d68:	4830      	ldr	r0, [pc, #192]	; (8000e2c <display7SEG+0x118>)
 8000d6a:	f001 f846 	bl	8001dfa <HAL_GPIO_WritePin>
}
 8000d6e:	e058      	b.n	8000e22 <display7SEG+0x10e>
	else if (num == 3)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	2b03      	cmp	r3, #3
 8000d74:	d10a      	bne.n	8000d8c <display7SEG+0x78>
		HAL_GPIO_WritePin (GPIOB, SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin|SEG6_Pin, GPIO_PIN_RESET);
 8000d76:	2200      	movs	r2, #0
 8000d78:	214f      	movs	r1, #79	; 0x4f
 8000d7a:	482c      	ldr	r0, [pc, #176]	; (8000e2c <display7SEG+0x118>)
 8000d7c:	f001 f83d 	bl	8001dfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (GPIOB, SEG4_Pin|SEG5_Pin, GPIO_PIN_SET);
 8000d80:	2201      	movs	r2, #1
 8000d82:	2130      	movs	r1, #48	; 0x30
 8000d84:	4829      	ldr	r0, [pc, #164]	; (8000e2c <display7SEG+0x118>)
 8000d86:	f001 f838 	bl	8001dfa <HAL_GPIO_WritePin>
}
 8000d8a:	e04a      	b.n	8000e22 <display7SEG+0x10e>
	else if (num == 4)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	2b04      	cmp	r3, #4
 8000d90:	d10a      	bne.n	8000da8 <display7SEG+0x94>
		HAL_GPIO_WritePin (GPIOB, SEG1_Pin|SEG2_Pin|SEG5_Pin|SEG6_Pin, GPIO_PIN_RESET);
 8000d92:	2200      	movs	r2, #0
 8000d94:	2166      	movs	r1, #102	; 0x66
 8000d96:	4825      	ldr	r0, [pc, #148]	; (8000e2c <display7SEG+0x118>)
 8000d98:	f001 f82f 	bl	8001dfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (GPIOB, SEG0_Pin|SEG3_Pin|SEG4_Pin, GPIO_PIN_SET);
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	2119      	movs	r1, #25
 8000da0:	4822      	ldr	r0, [pc, #136]	; (8000e2c <display7SEG+0x118>)
 8000da2:	f001 f82a 	bl	8001dfa <HAL_GPIO_WritePin>
}
 8000da6:	e03c      	b.n	8000e22 <display7SEG+0x10e>
	else if (num == 5)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2b05      	cmp	r3, #5
 8000dac:	d10a      	bne.n	8000dc4 <display7SEG+0xb0>
		HAL_GPIO_WritePin (GPIOB, SEG0_Pin|SEG2_Pin|SEG3_Pin|SEG5_Pin|SEG6_Pin, GPIO_PIN_RESET);
 8000dae:	2200      	movs	r2, #0
 8000db0:	216d      	movs	r1, #109	; 0x6d
 8000db2:	481e      	ldr	r0, [pc, #120]	; (8000e2c <display7SEG+0x118>)
 8000db4:	f001 f821 	bl	8001dfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (GPIOB, SEG1_Pin|SEG4_Pin, GPIO_PIN_SET);
 8000db8:	2201      	movs	r2, #1
 8000dba:	2112      	movs	r1, #18
 8000dbc:	481b      	ldr	r0, [pc, #108]	; (8000e2c <display7SEG+0x118>)
 8000dbe:	f001 f81c 	bl	8001dfa <HAL_GPIO_WritePin>
}
 8000dc2:	e02e      	b.n	8000e22 <display7SEG+0x10e>
	else if (num == 6)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2b06      	cmp	r3, #6
 8000dc8:	d10a      	bne.n	8000de0 <display7SEG+0xcc>
		HAL_GPIO_WritePin (GPIOB, SEG0_Pin|SEG2_Pin|SEG3_Pin|SEG4_Pin|SEG5_Pin|SEG6_Pin, GPIO_PIN_RESET);
 8000dca:	2200      	movs	r2, #0
 8000dcc:	217d      	movs	r1, #125	; 0x7d
 8000dce:	4817      	ldr	r0, [pc, #92]	; (8000e2c <display7SEG+0x118>)
 8000dd0:	f001 f813 	bl	8001dfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (GPIOB, SEG1_Pin, GPIO_PIN_SET);
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	2102      	movs	r1, #2
 8000dd8:	4814      	ldr	r0, [pc, #80]	; (8000e2c <display7SEG+0x118>)
 8000dda:	f001 f80e 	bl	8001dfa <HAL_GPIO_WritePin>
}
 8000dde:	e020      	b.n	8000e22 <display7SEG+0x10e>
	else if (num == 7)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2b07      	cmp	r3, #7
 8000de4:	d10a      	bne.n	8000dfc <display7SEG+0xe8>
		HAL_GPIO_WritePin (GPIOB, SEG0_Pin|SEG1_Pin|SEG2_Pin, GPIO_PIN_RESET);
 8000de6:	2200      	movs	r2, #0
 8000de8:	2107      	movs	r1, #7
 8000dea:	4810      	ldr	r0, [pc, #64]	; (8000e2c <display7SEG+0x118>)
 8000dec:	f001 f805 	bl	8001dfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (GPIOB, SEG3_Pin|SEG4_Pin|SEG5_Pin|SEG6_Pin, GPIO_PIN_SET);
 8000df0:	2201      	movs	r2, #1
 8000df2:	2178      	movs	r1, #120	; 0x78
 8000df4:	480d      	ldr	r0, [pc, #52]	; (8000e2c <display7SEG+0x118>)
 8000df6:	f001 f800 	bl	8001dfa <HAL_GPIO_WritePin>
}
 8000dfa:	e012      	b.n	8000e22 <display7SEG+0x10e>
	else if (num == 8)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	2b08      	cmp	r3, #8
 8000e00:	d105      	bne.n	8000e0e <display7SEG+0xfa>
		HAL_GPIO_WritePin (GPIOB, SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin|SEG4_Pin|SEG5_Pin|SEG6_Pin, GPIO_PIN_RESET);
 8000e02:	2200      	movs	r2, #0
 8000e04:	217f      	movs	r1, #127	; 0x7f
 8000e06:	4809      	ldr	r0, [pc, #36]	; (8000e2c <display7SEG+0x118>)
 8000e08:	f000 fff7 	bl	8001dfa <HAL_GPIO_WritePin>
}
 8000e0c:	e009      	b.n	8000e22 <display7SEG+0x10e>
		HAL_GPIO_WritePin (GPIOB, SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin|SEG5_Pin|SEG6_Pin, GPIO_PIN_RESET);
 8000e0e:	2200      	movs	r2, #0
 8000e10:	216f      	movs	r1, #111	; 0x6f
 8000e12:	4806      	ldr	r0, [pc, #24]	; (8000e2c <display7SEG+0x118>)
 8000e14:	f000 fff1 	bl	8001dfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (GPIOB, SEG4_Pin, GPIO_PIN_SET);
 8000e18:	2201      	movs	r2, #1
 8000e1a:	2110      	movs	r1, #16
 8000e1c:	4803      	ldr	r0, [pc, #12]	; (8000e2c <display7SEG+0x118>)
 8000e1e:	f000 ffec 	bl	8001dfa <HAL_GPIO_WritePin>
}
 8000e22:	bf00      	nop
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	40010c00 	.word	0x40010c00

08000e30 <update7SEG>:



void update7SEG(int index){
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2b03      	cmp	r3, #3
 8000e3c:	f200 8094 	bhi.w	8000f68 <update7SEG+0x138>
 8000e40:	a201      	add	r2, pc, #4	; (adr r2, 8000e48 <update7SEG+0x18>)
 8000e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e46:	bf00      	nop
 8000e48:	08000e59 	.word	0x08000e59
 8000e4c:	08000e9d 	.word	0x08000e9d
 8000e50:	08000ee1 	.word	0x08000ee1
 8000e54:	08000f25 	.word	0x08000f25
	switch (index){
	case 0:
		//Display the first 7SEG with led_buffer[0]
		display7SEG(led_buffer[index]);
 8000e58:	4a46      	ldr	r2, [pc, #280]	; (8000f74 <update7SEG+0x144>)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff ff57 	bl	8000d14 <display7SEG>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 8000e66:	2200      	movs	r2, #0
 8000e68:	2180      	movs	r1, #128	; 0x80
 8000e6a:	4843      	ldr	r0, [pc, #268]	; (8000f78 <update7SEG+0x148>)
 8000e6c:	f000 ffc5 	bl	8001dfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000e70:	2201      	movs	r2, #1
 8000e72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e76:	4840      	ldr	r0, [pc, #256]	; (8000f78 <update7SEG+0x148>)
 8000e78:	f000 ffbf 	bl	8001dfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN2_Pin, SET);
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e82:	483d      	ldr	r0, [pc, #244]	; (8000f78 <update7SEG+0x148>)
 8000e84:	f000 ffb9 	bl	8001dfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN3_Pin, SET);
 8000e88:	2201      	movs	r2, #1
 8000e8a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e8e:	483a      	ldr	r0, [pc, #232]	; (8000f78 <update7SEG+0x148>)
 8000e90:	f000 ffb3 	bl	8001dfa <HAL_GPIO_WritePin>
		index_led = 1;
 8000e94:	4b39      	ldr	r3, [pc, #228]	; (8000f7c <update7SEG+0x14c>)
 8000e96:	2201      	movs	r2, #1
 8000e98:	601a      	str	r2, [r3, #0]
		break;
 8000e9a:	e066      	b.n	8000f6a <update7SEG+0x13a>

	case 1:
		//Display the first 7SEG with led_buffer[1]
		display7SEG(led_buffer[index]);
 8000e9c:	4a35      	ldr	r2, [pc, #212]	; (8000f74 <update7SEG+0x144>)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff ff35 	bl	8000d14 <display7SEG>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000eaa:	2201      	movs	r2, #1
 8000eac:	2180      	movs	r1, #128	; 0x80
 8000eae:	4832      	ldr	r0, [pc, #200]	; (8000f78 <update7SEG+0x148>)
 8000eb0:	f000 ffa3 	bl	8001dfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000eba:	482f      	ldr	r0, [pc, #188]	; (8000f78 <update7SEG+0x148>)
 8000ebc:	f000 ff9d 	bl	8001dfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN2_Pin, SET);
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ec6:	482c      	ldr	r0, [pc, #176]	; (8000f78 <update7SEG+0x148>)
 8000ec8:	f000 ff97 	bl	8001dfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN3_Pin, SET);
 8000ecc:	2201      	movs	r2, #1
 8000ece:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ed2:	4829      	ldr	r0, [pc, #164]	; (8000f78 <update7SEG+0x148>)
 8000ed4:	f000 ff91 	bl	8001dfa <HAL_GPIO_WritePin>
		index_led = 2;
 8000ed8:	4b28      	ldr	r3, [pc, #160]	; (8000f7c <update7SEG+0x14c>)
 8000eda:	2202      	movs	r2, #2
 8000edc:	601a      	str	r2, [r3, #0]
		break;
 8000ede:	e044      	b.n	8000f6a <update7SEG+0x13a>

	case 2:
		//Display the first 7SEG with led_buffer[2]
		display7SEG(led_buffer[index]);
 8000ee0:	4a24      	ldr	r2, [pc, #144]	; (8000f74 <update7SEG+0x144>)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f7ff ff13 	bl	8000d14 <display7SEG>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000eee:	2201      	movs	r2, #1
 8000ef0:	2180      	movs	r1, #128	; 0x80
 8000ef2:	4821      	ldr	r0, [pc, #132]	; (8000f78 <update7SEG+0x148>)
 8000ef4:	f000 ff81 	bl	8001dfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000ef8:	2201      	movs	r2, #1
 8000efa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000efe:	481e      	ldr	r0, [pc, #120]	; (8000f78 <update7SEG+0x148>)
 8000f00:	f000 ff7b 	bl	8001dfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN2_Pin, RESET);
 8000f04:	2200      	movs	r2, #0
 8000f06:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f0a:	481b      	ldr	r0, [pc, #108]	; (8000f78 <update7SEG+0x148>)
 8000f0c:	f000 ff75 	bl	8001dfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN3_Pin, SET);
 8000f10:	2201      	movs	r2, #1
 8000f12:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f16:	4818      	ldr	r0, [pc, #96]	; (8000f78 <update7SEG+0x148>)
 8000f18:	f000 ff6f 	bl	8001dfa <HAL_GPIO_WritePin>
		index_led = 3;
 8000f1c:	4b17      	ldr	r3, [pc, #92]	; (8000f7c <update7SEG+0x14c>)
 8000f1e:	2203      	movs	r2, #3
 8000f20:	601a      	str	r2, [r3, #0]
		break;
 8000f22:	e022      	b.n	8000f6a <update7SEG+0x13a>

	case 3:
		//Display the first 7SEG with led_buffer[3]
		display7SEG(led_buffer[index]);
 8000f24:	4a13      	ldr	r2, [pc, #76]	; (8000f74 <update7SEG+0x144>)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f7ff fef1 	bl	8000d14 <display7SEG>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000f32:	2201      	movs	r2, #1
 8000f34:	2180      	movs	r1, #128	; 0x80
 8000f36:	4810      	ldr	r0, [pc, #64]	; (8000f78 <update7SEG+0x148>)
 8000f38:	f000 ff5f 	bl	8001dfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f42:	480d      	ldr	r0, [pc, #52]	; (8000f78 <update7SEG+0x148>)
 8000f44:	f000 ff59 	bl	8001dfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN2_Pin, SET);
 8000f48:	2201      	movs	r2, #1
 8000f4a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f4e:	480a      	ldr	r0, [pc, #40]	; (8000f78 <update7SEG+0x148>)
 8000f50:	f000 ff53 	bl	8001dfa <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN3_Pin, RESET);
 8000f54:	2200      	movs	r2, #0
 8000f56:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f5a:	4807      	ldr	r0, [pc, #28]	; (8000f78 <update7SEG+0x148>)
 8000f5c:	f000 ff4d 	bl	8001dfa <HAL_GPIO_WritePin>
		index_led = 0;
 8000f60:	4b06      	ldr	r3, [pc, #24]	; (8000f7c <update7SEG+0x14c>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]
		break;
 8000f66:	e000      	b.n	8000f6a <update7SEG+0x13a>

	default:
		break;
 8000f68:	bf00      	nop
	}
}
 8000f6a:	bf00      	nop
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	20000048 	.word	0x20000048
 8000f78:	40010c00 	.word	0x40010c00
 8000f7c:	20000094 	.word	0x20000094

08000f80 <display>:


void display()
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
    if (count_led_1_3 < counter_led_red)
 8000f84:	4b95      	ldr	r3, [pc, #596]	; (80011dc <display+0x25c>)
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	4b95      	ldr	r3, [pc, #596]	; (80011e0 <display+0x260>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	da1f      	bge.n	8000fd0 <display+0x50>
    {
        led_buffer[0] = (counter_led_red - count_led_1_3) / 10;
 8000f90:	4b93      	ldr	r3, [pc, #588]	; (80011e0 <display+0x260>)
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	4b91      	ldr	r3, [pc, #580]	; (80011dc <display+0x25c>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	1ad3      	subs	r3, r2, r3
 8000f9a:	4a92      	ldr	r2, [pc, #584]	; (80011e4 <display+0x264>)
 8000f9c:	fb82 1203 	smull	r1, r2, r2, r3
 8000fa0:	1092      	asrs	r2, r2, #2
 8000fa2:	17db      	asrs	r3, r3, #31
 8000fa4:	1ad3      	subs	r3, r2, r3
 8000fa6:	4a90      	ldr	r2, [pc, #576]	; (80011e8 <display+0x268>)
 8000fa8:	6013      	str	r3, [r2, #0]
        led_buffer[1] = (counter_led_red - count_led_1_3) % 10;
 8000faa:	4b8d      	ldr	r3, [pc, #564]	; (80011e0 <display+0x260>)
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	4b8b      	ldr	r3, [pc, #556]	; (80011dc <display+0x25c>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	1ad1      	subs	r1, r2, r3
 8000fb4:	4b8b      	ldr	r3, [pc, #556]	; (80011e4 <display+0x264>)
 8000fb6:	fb83 2301 	smull	r2, r3, r3, r1
 8000fba:	109a      	asrs	r2, r3, #2
 8000fbc:	17cb      	asrs	r3, r1, #31
 8000fbe:	1ad2      	subs	r2, r2, r3
 8000fc0:	4613      	mov	r3, r2
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	4413      	add	r3, r2
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	1aca      	subs	r2, r1, r3
 8000fca:	4b87      	ldr	r3, [pc, #540]	; (80011e8 <display+0x268>)
 8000fcc:	605a      	str	r2, [r3, #4]
 8000fce:	e059      	b.n	8001084 <display+0x104>
    }
    else
    {
        if (count_led_1_3 < (counter_led_red + counter_led_green))
 8000fd0:	4b83      	ldr	r3, [pc, #524]	; (80011e0 <display+0x260>)
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	4b85      	ldr	r3, [pc, #532]	; (80011ec <display+0x26c>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	441a      	add	r2, r3
 8000fda:	4b80      	ldr	r3, [pc, #512]	; (80011dc <display+0x25c>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	429a      	cmp	r2, r3
 8000fe0:	dd25      	ble.n	800102e <display+0xae>
        {
            led_buffer[0] = (counter_led_red + counter_led_green - count_led_1_3) / 10;
 8000fe2:	4b7f      	ldr	r3, [pc, #508]	; (80011e0 <display+0x260>)
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	4b81      	ldr	r3, [pc, #516]	; (80011ec <display+0x26c>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	441a      	add	r2, r3
 8000fec:	4b7b      	ldr	r3, [pc, #492]	; (80011dc <display+0x25c>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	1ad3      	subs	r3, r2, r3
 8000ff2:	4a7c      	ldr	r2, [pc, #496]	; (80011e4 <display+0x264>)
 8000ff4:	fb82 1203 	smull	r1, r2, r2, r3
 8000ff8:	1092      	asrs	r2, r2, #2
 8000ffa:	17db      	asrs	r3, r3, #31
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	4a7a      	ldr	r2, [pc, #488]	; (80011e8 <display+0x268>)
 8001000:	6013      	str	r3, [r2, #0]
            led_buffer[1] = (counter_led_red + counter_led_green - count_led_1_3) % 10;
 8001002:	4b77      	ldr	r3, [pc, #476]	; (80011e0 <display+0x260>)
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	4b79      	ldr	r3, [pc, #484]	; (80011ec <display+0x26c>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	441a      	add	r2, r3
 800100c:	4b73      	ldr	r3, [pc, #460]	; (80011dc <display+0x25c>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	1ad1      	subs	r1, r2, r3
 8001012:	4b74      	ldr	r3, [pc, #464]	; (80011e4 <display+0x264>)
 8001014:	fb83 2301 	smull	r2, r3, r3, r1
 8001018:	109a      	asrs	r2, r3, #2
 800101a:	17cb      	asrs	r3, r1, #31
 800101c:	1ad2      	subs	r2, r2, r3
 800101e:	4613      	mov	r3, r2
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	4413      	add	r3, r2
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	1aca      	subs	r2, r1, r3
 8001028:	4b6f      	ldr	r3, [pc, #444]	; (80011e8 <display+0x268>)
 800102a:	605a      	str	r2, [r3, #4]
 800102c:	e02a      	b.n	8001084 <display+0x104>
        }
        else
        {
            led_buffer[0] = (counter_led_red + counter_led_green + counter_led_yellow - count_led_1_3) / 10;
 800102e:	4b6c      	ldr	r3, [pc, #432]	; (80011e0 <display+0x260>)
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	4b6e      	ldr	r3, [pc, #440]	; (80011ec <display+0x26c>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	441a      	add	r2, r3
 8001038:	4b6d      	ldr	r3, [pc, #436]	; (80011f0 <display+0x270>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	441a      	add	r2, r3
 800103e:	4b67      	ldr	r3, [pc, #412]	; (80011dc <display+0x25c>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	1ad3      	subs	r3, r2, r3
 8001044:	4a67      	ldr	r2, [pc, #412]	; (80011e4 <display+0x264>)
 8001046:	fb82 1203 	smull	r1, r2, r2, r3
 800104a:	1092      	asrs	r2, r2, #2
 800104c:	17db      	asrs	r3, r3, #31
 800104e:	1ad3      	subs	r3, r2, r3
 8001050:	4a65      	ldr	r2, [pc, #404]	; (80011e8 <display+0x268>)
 8001052:	6013      	str	r3, [r2, #0]
            led_buffer[1] = (counter_led_red + counter_led_green + counter_led_yellow - count_led_1_3) % 10;
 8001054:	4b62      	ldr	r3, [pc, #392]	; (80011e0 <display+0x260>)
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	4b64      	ldr	r3, [pc, #400]	; (80011ec <display+0x26c>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	441a      	add	r2, r3
 800105e:	4b64      	ldr	r3, [pc, #400]	; (80011f0 <display+0x270>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	441a      	add	r2, r3
 8001064:	4b5d      	ldr	r3, [pc, #372]	; (80011dc <display+0x25c>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	1ad1      	subs	r1, r2, r3
 800106a:	4b5e      	ldr	r3, [pc, #376]	; (80011e4 <display+0x264>)
 800106c:	fb83 2301 	smull	r2, r3, r3, r1
 8001070:	109a      	asrs	r2, r3, #2
 8001072:	17cb      	asrs	r3, r1, #31
 8001074:	1ad2      	subs	r2, r2, r3
 8001076:	4613      	mov	r3, r2
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	4413      	add	r3, r2
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	1aca      	subs	r2, r1, r3
 8001080:	4b59      	ldr	r3, [pc, #356]	; (80011e8 <display+0x268>)
 8001082:	605a      	str	r2, [r3, #4]
        }
    }
    count_led_1_3++;
 8001084:	4b55      	ldr	r3, [pc, #340]	; (80011dc <display+0x25c>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	3301      	adds	r3, #1
 800108a:	4a54      	ldr	r2, [pc, #336]	; (80011dc <display+0x25c>)
 800108c:	6013      	str	r3, [r2, #0]
    if (count_led_1_3 >= counter_led_red + counter_led_green + counter_led_yellow)
 800108e:	4b54      	ldr	r3, [pc, #336]	; (80011e0 <display+0x260>)
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	4b56      	ldr	r3, [pc, #344]	; (80011ec <display+0x26c>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	441a      	add	r2, r3
 8001098:	4b55      	ldr	r3, [pc, #340]	; (80011f0 <display+0x270>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	441a      	add	r2, r3
 800109e:	4b4f      	ldr	r3, [pc, #316]	; (80011dc <display+0x25c>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	429a      	cmp	r2, r3
 80010a4:	dc02      	bgt.n	80010ac <display+0x12c>
        count_led_1_3 = 0;
 80010a6:	4b4d      	ldr	r3, [pc, #308]	; (80011dc <display+0x25c>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]

    if (count_led_2_4 < counter_led_green)
 80010ac:	4b51      	ldr	r3, [pc, #324]	; (80011f4 <display+0x274>)
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	4b4e      	ldr	r3, [pc, #312]	; (80011ec <display+0x26c>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	da1f      	bge.n	80010f8 <display+0x178>
    {
        led_buffer[2] = (counter_led_green - count_led_2_4) / 10;
 80010b8:	4b4c      	ldr	r3, [pc, #304]	; (80011ec <display+0x26c>)
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	4b4d      	ldr	r3, [pc, #308]	; (80011f4 <display+0x274>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	1ad3      	subs	r3, r2, r3
 80010c2:	4a48      	ldr	r2, [pc, #288]	; (80011e4 <display+0x264>)
 80010c4:	fb82 1203 	smull	r1, r2, r2, r3
 80010c8:	1092      	asrs	r2, r2, #2
 80010ca:	17db      	asrs	r3, r3, #31
 80010cc:	1ad3      	subs	r3, r2, r3
 80010ce:	4a46      	ldr	r2, [pc, #280]	; (80011e8 <display+0x268>)
 80010d0:	6093      	str	r3, [r2, #8]
        led_buffer[3] = (counter_led_green - count_led_2_4) % 10;
 80010d2:	4b46      	ldr	r3, [pc, #280]	; (80011ec <display+0x26c>)
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	4b47      	ldr	r3, [pc, #284]	; (80011f4 <display+0x274>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	1ad1      	subs	r1, r2, r3
 80010dc:	4b41      	ldr	r3, [pc, #260]	; (80011e4 <display+0x264>)
 80010de:	fb83 2301 	smull	r2, r3, r3, r1
 80010e2:	109a      	asrs	r2, r3, #2
 80010e4:	17cb      	asrs	r3, r1, #31
 80010e6:	1ad2      	subs	r2, r2, r3
 80010e8:	4613      	mov	r3, r2
 80010ea:	009b      	lsls	r3, r3, #2
 80010ec:	4413      	add	r3, r2
 80010ee:	005b      	lsls	r3, r3, #1
 80010f0:	1aca      	subs	r2, r1, r3
 80010f2:	4b3d      	ldr	r3, [pc, #244]	; (80011e8 <display+0x268>)
 80010f4:	60da      	str	r2, [r3, #12]
 80010f6:	e059      	b.n	80011ac <display+0x22c>
    }
    else
    {
        if (count_led_2_4 < (counter_led_green + counter_led_yellow))
 80010f8:	4b3c      	ldr	r3, [pc, #240]	; (80011ec <display+0x26c>)
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	4b3c      	ldr	r3, [pc, #240]	; (80011f0 <display+0x270>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	441a      	add	r2, r3
 8001102:	4b3c      	ldr	r3, [pc, #240]	; (80011f4 <display+0x274>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	429a      	cmp	r2, r3
 8001108:	dd25      	ble.n	8001156 <display+0x1d6>
        {
            led_buffer[2] = (counter_led_green + counter_led_yellow - count_led_2_4) / 10;
 800110a:	4b38      	ldr	r3, [pc, #224]	; (80011ec <display+0x26c>)
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	4b38      	ldr	r3, [pc, #224]	; (80011f0 <display+0x270>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	441a      	add	r2, r3
 8001114:	4b37      	ldr	r3, [pc, #220]	; (80011f4 <display+0x274>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	4a32      	ldr	r2, [pc, #200]	; (80011e4 <display+0x264>)
 800111c:	fb82 1203 	smull	r1, r2, r2, r3
 8001120:	1092      	asrs	r2, r2, #2
 8001122:	17db      	asrs	r3, r3, #31
 8001124:	1ad3      	subs	r3, r2, r3
 8001126:	4a30      	ldr	r2, [pc, #192]	; (80011e8 <display+0x268>)
 8001128:	6093      	str	r3, [r2, #8]
            led_buffer[3] = (counter_led_green + counter_led_yellow - count_led_2_4) % 10;
 800112a:	4b30      	ldr	r3, [pc, #192]	; (80011ec <display+0x26c>)
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	4b30      	ldr	r3, [pc, #192]	; (80011f0 <display+0x270>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	441a      	add	r2, r3
 8001134:	4b2f      	ldr	r3, [pc, #188]	; (80011f4 <display+0x274>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	1ad1      	subs	r1, r2, r3
 800113a:	4b2a      	ldr	r3, [pc, #168]	; (80011e4 <display+0x264>)
 800113c:	fb83 2301 	smull	r2, r3, r3, r1
 8001140:	109a      	asrs	r2, r3, #2
 8001142:	17cb      	asrs	r3, r1, #31
 8001144:	1ad2      	subs	r2, r2, r3
 8001146:	4613      	mov	r3, r2
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	4413      	add	r3, r2
 800114c:	005b      	lsls	r3, r3, #1
 800114e:	1aca      	subs	r2, r1, r3
 8001150:	4b25      	ldr	r3, [pc, #148]	; (80011e8 <display+0x268>)
 8001152:	60da      	str	r2, [r3, #12]
 8001154:	e02a      	b.n	80011ac <display+0x22c>
        }
        else
        {
            led_buffer[2] = (counter_led_red + counter_led_green + counter_led_yellow - count_led_2_4) / 10;
 8001156:	4b22      	ldr	r3, [pc, #136]	; (80011e0 <display+0x260>)
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	4b24      	ldr	r3, [pc, #144]	; (80011ec <display+0x26c>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	441a      	add	r2, r3
 8001160:	4b23      	ldr	r3, [pc, #140]	; (80011f0 <display+0x270>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	441a      	add	r2, r3
 8001166:	4b23      	ldr	r3, [pc, #140]	; (80011f4 <display+0x274>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	1ad3      	subs	r3, r2, r3
 800116c:	4a1d      	ldr	r2, [pc, #116]	; (80011e4 <display+0x264>)
 800116e:	fb82 1203 	smull	r1, r2, r2, r3
 8001172:	1092      	asrs	r2, r2, #2
 8001174:	17db      	asrs	r3, r3, #31
 8001176:	1ad3      	subs	r3, r2, r3
 8001178:	4a1b      	ldr	r2, [pc, #108]	; (80011e8 <display+0x268>)
 800117a:	6093      	str	r3, [r2, #8]
            led_buffer[3] = (counter_led_red + counter_led_green + counter_led_yellow - count_led_2_4) % 10;
 800117c:	4b18      	ldr	r3, [pc, #96]	; (80011e0 <display+0x260>)
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	4b1a      	ldr	r3, [pc, #104]	; (80011ec <display+0x26c>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	441a      	add	r2, r3
 8001186:	4b1a      	ldr	r3, [pc, #104]	; (80011f0 <display+0x270>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	441a      	add	r2, r3
 800118c:	4b19      	ldr	r3, [pc, #100]	; (80011f4 <display+0x274>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	1ad1      	subs	r1, r2, r3
 8001192:	4b14      	ldr	r3, [pc, #80]	; (80011e4 <display+0x264>)
 8001194:	fb83 2301 	smull	r2, r3, r3, r1
 8001198:	109a      	asrs	r2, r3, #2
 800119a:	17cb      	asrs	r3, r1, #31
 800119c:	1ad2      	subs	r2, r2, r3
 800119e:	4613      	mov	r3, r2
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	4413      	add	r3, r2
 80011a4:	005b      	lsls	r3, r3, #1
 80011a6:	1aca      	subs	r2, r1, r3
 80011a8:	4b0f      	ldr	r3, [pc, #60]	; (80011e8 <display+0x268>)
 80011aa:	60da      	str	r2, [r3, #12]
        }
    }
    count_led_2_4++;
 80011ac:	4b11      	ldr	r3, [pc, #68]	; (80011f4 <display+0x274>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	3301      	adds	r3, #1
 80011b2:	4a10      	ldr	r2, [pc, #64]	; (80011f4 <display+0x274>)
 80011b4:	6013      	str	r3, [r2, #0]
    if (count_led_2_4 >= counter_led_red + counter_led_green + counter_led_yellow)
 80011b6:	4b0a      	ldr	r3, [pc, #40]	; (80011e0 <display+0x260>)
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	4b0c      	ldr	r3, [pc, #48]	; (80011ec <display+0x26c>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	441a      	add	r2, r3
 80011c0:	4b0b      	ldr	r3, [pc, #44]	; (80011f0 <display+0x270>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	441a      	add	r2, r3
 80011c6:	4b0b      	ldr	r3, [pc, #44]	; (80011f4 <display+0x274>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	429a      	cmp	r2, r3
 80011cc:	dc02      	bgt.n	80011d4 <display+0x254>
        count_led_2_4 = 0;
 80011ce:	4b09      	ldr	r3, [pc, #36]	; (80011f4 <display+0x274>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
}
 80011d4:	bf00      	nop
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bc80      	pop	{r7}
 80011da:	4770      	bx	lr
 80011dc:	20000098 	.word	0x20000098
 80011e0:	2000003c 	.word	0x2000003c
 80011e4:	66666667 	.word	0x66666667
 80011e8:	20000048 	.word	0x20000048
 80011ec:	20000044 	.word	0x20000044
 80011f0:	20000040 	.word	0x20000040
 80011f4:	2000009c 	.word	0x2000009c

080011f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011fc:	f000 fafc 	bl	80017f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001200:	f000 f828 	bl	8001254 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001204:	f000 f8ae 	bl	8001364 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001208:	f000 f860 	bl	80012cc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
HAL_TIM_Base_Start_IT(&htim2);
 800120c:	480f      	ldr	r0, [pc, #60]	; (800124c <main+0x54>)
 800120e:	f001 fa5d 	bl	80026cc <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


setTimer1ForTrafficLight(1000);
 8001212:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001216:	f000 f91f 	bl	8001458 <setTimer1ForTrafficLight>
setTimer2ForEn7seg(1000);
 800121a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800121e:	f000 f935 	bl	800148c <setTimer2ForEn7seg>
setTimer3ForDisplay(1000);
 8001222:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001226:	f000 f94b 	bl	80014c0 <setTimer3ForDisplay>
setTimer4For7segFollowMode(1000);
 800122a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800122e:	f000 f961 	bl	80014f4 <setTimer4For7segFollowMode>
setTimer5ForToggle(1000);
 8001232:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001236:	f000 f977 	bl	8001528 <setTimer5ForToggle>

status = MODE_1;
 800123a:	4b05      	ldr	r3, [pc, #20]	; (8001250 <main+0x58>)
 800123c:	220b      	movs	r2, #11
 800123e:	601a      	str	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */
	  fsm_run();
 8001240:	f7ff f8c8 	bl	80003d4 <fsm_run>
	  fsm_automatic_mode1_run();
 8001244:	f7ff fbce 	bl	80009e4 <fsm_automatic_mode1_run>
	  fsm_run();
 8001248:	e7fa      	b.n	8001240 <main+0x48>
 800124a:	bf00      	nop
 800124c:	200000c8 	.word	0x200000c8
 8001250:	20000090 	.word	0x20000090

08001254 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b090      	sub	sp, #64	; 0x40
 8001258:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800125a:	f107 0318 	add.w	r3, r7, #24
 800125e:	2228      	movs	r2, #40	; 0x28
 8001260:	2100      	movs	r1, #0
 8001262:	4618      	mov	r0, r3
 8001264:	f001 fdea 	bl	8002e3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001268:	1d3b      	adds	r3, r7, #4
 800126a:	2200      	movs	r2, #0
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	605a      	str	r2, [r3, #4]
 8001270:	609a      	str	r2, [r3, #8]
 8001272:	60da      	str	r2, [r3, #12]
 8001274:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001276:	2302      	movs	r3, #2
 8001278:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800127a:	2301      	movs	r3, #1
 800127c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800127e:	2310      	movs	r3, #16
 8001280:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001282:	2300      	movs	r3, #0
 8001284:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001286:	f107 0318 	add.w	r3, r7, #24
 800128a:	4618      	mov	r0, r3
 800128c:	f000 fde6 	bl	8001e5c <HAL_RCC_OscConfig>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001296:	f000 f8d9 	bl	800144c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800129a:	230f      	movs	r3, #15
 800129c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800129e:	2300      	movs	r3, #0
 80012a0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012a2:	2300      	movs	r3, #0
 80012a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012a6:	2300      	movs	r3, #0
 80012a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012aa:	2300      	movs	r3, #0
 80012ac:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80012ae:	1d3b      	adds	r3, r7, #4
 80012b0:	2100      	movs	r1, #0
 80012b2:	4618      	mov	r0, r3
 80012b4:	f001 f852 	bl	800235c <HAL_RCC_ClockConfig>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80012be:	f000 f8c5 	bl	800144c <Error_Handler>
  }
}
 80012c2:	bf00      	nop
 80012c4:	3740      	adds	r7, #64	; 0x40
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
	...

080012cc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b086      	sub	sp, #24
 80012d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012d2:	f107 0308 	add.w	r3, r7, #8
 80012d6:	2200      	movs	r2, #0
 80012d8:	601a      	str	r2, [r3, #0]
 80012da:	605a      	str	r2, [r3, #4]
 80012dc:	609a      	str	r2, [r3, #8]
 80012de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012e0:	463b      	mov	r3, r7
 80012e2:	2200      	movs	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]
 80012e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012e8:	4b1d      	ldr	r3, [pc, #116]	; (8001360 <MX_TIM2_Init+0x94>)
 80012ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012ee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80012f0:	4b1b      	ldr	r3, [pc, #108]	; (8001360 <MX_TIM2_Init+0x94>)
 80012f2:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80012f6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012f8:	4b19      	ldr	r3, [pc, #100]	; (8001360 <MX_TIM2_Init+0x94>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80012fe:	4b18      	ldr	r3, [pc, #96]	; (8001360 <MX_TIM2_Init+0x94>)
 8001300:	2209      	movs	r2, #9
 8001302:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001304:	4b16      	ldr	r3, [pc, #88]	; (8001360 <MX_TIM2_Init+0x94>)
 8001306:	2200      	movs	r2, #0
 8001308:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800130a:	4b15      	ldr	r3, [pc, #84]	; (8001360 <MX_TIM2_Init+0x94>)
 800130c:	2200      	movs	r2, #0
 800130e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001310:	4813      	ldr	r0, [pc, #76]	; (8001360 <MX_TIM2_Init+0x94>)
 8001312:	f001 f98b 	bl	800262c <HAL_TIM_Base_Init>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800131c:	f000 f896 	bl	800144c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001320:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001324:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001326:	f107 0308 	add.w	r3, r7, #8
 800132a:	4619      	mov	r1, r3
 800132c:	480c      	ldr	r0, [pc, #48]	; (8001360 <MX_TIM2_Init+0x94>)
 800132e:	f001 fb21 	bl	8002974 <HAL_TIM_ConfigClockSource>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001338:	f000 f888 	bl	800144c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800133c:	2300      	movs	r3, #0
 800133e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001340:	2300      	movs	r3, #0
 8001342:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001344:	463b      	mov	r3, r7
 8001346:	4619      	mov	r1, r3
 8001348:	4805      	ldr	r0, [pc, #20]	; (8001360 <MX_TIM2_Init+0x94>)
 800134a:	f001 fce9 	bl	8002d20 <HAL_TIMEx_MasterConfigSynchronization>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001354:	f000 f87a 	bl	800144c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001358:	bf00      	nop
 800135a:	3718      	adds	r7, #24
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	200000c8 	.word	0x200000c8

08001364 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b086      	sub	sp, #24
 8001368:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800136a:	f107 0308 	add.w	r3, r7, #8
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	605a      	str	r2, [r3, #4]
 8001374:	609a      	str	r2, [r3, #8]
 8001376:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001378:	4b29      	ldr	r3, [pc, #164]	; (8001420 <MX_GPIO_Init+0xbc>)
 800137a:	699b      	ldr	r3, [r3, #24]
 800137c:	4a28      	ldr	r2, [pc, #160]	; (8001420 <MX_GPIO_Init+0xbc>)
 800137e:	f043 0304 	orr.w	r3, r3, #4
 8001382:	6193      	str	r3, [r2, #24]
 8001384:	4b26      	ldr	r3, [pc, #152]	; (8001420 <MX_GPIO_Init+0xbc>)
 8001386:	699b      	ldr	r3, [r3, #24]
 8001388:	f003 0304 	and.w	r3, r3, #4
 800138c:	607b      	str	r3, [r7, #4]
 800138e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001390:	4b23      	ldr	r3, [pc, #140]	; (8001420 <MX_GPIO_Init+0xbc>)
 8001392:	699b      	ldr	r3, [r3, #24]
 8001394:	4a22      	ldr	r2, [pc, #136]	; (8001420 <MX_GPIO_Init+0xbc>)
 8001396:	f043 0308 	orr.w	r3, r3, #8
 800139a:	6193      	str	r3, [r2, #24]
 800139c:	4b20      	ldr	r3, [pc, #128]	; (8001420 <MX_GPIO_Init+0xbc>)
 800139e:	699b      	ldr	r3, [r3, #24]
 80013a0:	f003 0308 	and.w	r3, r3, #8
 80013a4:	603b      	str	r3, [r7, #0]
 80013a6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_1_3_Pin|LED_YELLOW_1_3_Pin|LED_GREEN_1_3_Pin|LED_RED_2_4_Pin
 80013a8:	2200      	movs	r2, #0
 80013aa:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 80013ae:	481d      	ldr	r0, [pc, #116]	; (8001424 <MX_GPIO_Init+0xc0>)
 80013b0:	f000 fd23 	bl	8001dfa <HAL_GPIO_WritePin>
                          |LED_YELLOW_2_4_Pin|LED_GREEN_2_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_Pin|SEG1_Pin|SEG2_Pin|EN3_Pin
 80013b4:	2200      	movs	r2, #0
 80013b6:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80013ba:	481b      	ldr	r0, [pc, #108]	; (8001428 <MX_GPIO_Init+0xc4>)
 80013bc:	f000 fd1d 	bl	8001dfa <HAL_GPIO_WritePin>
                          |SEG3_Pin|SEG4_Pin|SEG5_Pin|SEG6_Pin
                          |EN0_Pin|EN1_Pin|EN2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_RED_1_3_Pin LED_YELLOW_1_3_Pin LED_GREEN_1_3_Pin LED_RED_2_4_Pin
                           LED_YELLOW_2_4_Pin LED_GREEN_2_4_Pin */
  GPIO_InitStruct.Pin = LED_RED_1_3_Pin|LED_YELLOW_1_3_Pin|LED_GREEN_1_3_Pin|LED_RED_2_4_Pin
 80013c0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80013c4:	60bb      	str	r3, [r7, #8]
                          |LED_YELLOW_2_4_Pin|LED_GREEN_2_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c6:	2301      	movs	r3, #1
 80013c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ca:	2300      	movs	r3, #0
 80013cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ce:	2302      	movs	r3, #2
 80013d0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d2:	f107 0308 	add.w	r3, r7, #8
 80013d6:	4619      	mov	r1, r3
 80013d8:	4812      	ldr	r0, [pc, #72]	; (8001424 <MX_GPIO_Init+0xc0>)
 80013da:	f000 fb7d 	bl	8001ad8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin EN3_Pin
                           SEG3_Pin SEG4_Pin SEG5_Pin SEG6_Pin
                           EN0_Pin EN1_Pin EN2_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|EN3_Pin
 80013de:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80013e2:	60bb      	str	r3, [r7, #8]
                          |SEG3_Pin|SEG4_Pin|SEG5_Pin|SEG6_Pin
                          |EN0_Pin|EN1_Pin|EN2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e4:	2301      	movs	r3, #1
 80013e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e8:	2300      	movs	r3, #0
 80013ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ec:	2302      	movs	r3, #2
 80013ee:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013f0:	f107 0308 	add.w	r3, r7, #8
 80013f4:	4619      	mov	r1, r3
 80013f6:	480c      	ldr	r0, [pc, #48]	; (8001428 <MX_GPIO_Init+0xc4>)
 80013f8:	f000 fb6e 	bl	8001ad8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button1_Pin Button2_Pin Button3_Pin */
  GPIO_InitStruct.Pin = Button1_Pin|Button2_Pin|Button3_Pin;
 80013fc:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001400:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001402:	2300      	movs	r3, #0
 8001404:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001406:	2301      	movs	r3, #1
 8001408:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800140a:	f107 0308 	add.w	r3, r7, #8
 800140e:	4619      	mov	r1, r3
 8001410:	4804      	ldr	r0, [pc, #16]	; (8001424 <MX_GPIO_Init+0xc0>)
 8001412:	f000 fb61 	bl	8001ad8 <HAL_GPIO_Init>

}
 8001416:	bf00      	nop
 8001418:	3718      	adds	r7, #24
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	40021000 	.word	0x40021000
 8001424:	40010800 	.word	0x40010800
 8001428:	40010c00 	.word	0x40010c00

0800142c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
	timerRun();
 8001434:	f000 f8c2 	bl	80015bc <timerRun>
	getKeySelectInput();
 8001438:	f7fe fee2 	bl	8000200 <getKeySelectInput>
	getKeyModifyInput();
 800143c:	f7fe ff2e 	bl	800029c <getKeyModifyInput>
	getKeySetValueInput();
 8001440:	f7fe ff7a 	bl	8000338 <getKeySetValueInput>
}
 8001444:	bf00      	nop
 8001446:	3708      	adds	r7, #8
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}

0800144c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001450:	b672      	cpsid	i
}
 8001452:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001454:	e7fe      	b.n	8001454 <Error_Handler+0x8>
	...

08001458 <setTimer1ForTrafficLight>:
int timer4_flag_for_7seg_follow_mode = 0;

int timer5_counter_for_toggle = 0;
int timer5_flag_for_toggle = 0;
/////////////////////////
void setTimer1ForTrafficLight(int duration){
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
	timer1_counter_for_traffic_light = duration / TIMER_CYCLE;
 8001460:	4b07      	ldr	r3, [pc, #28]	; (8001480 <setTimer1ForTrafficLight+0x28>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	687a      	ldr	r2, [r7, #4]
 8001466:	fb92 f3f3 	sdiv	r3, r2, r3
 800146a:	4a06      	ldr	r2, [pc, #24]	; (8001484 <setTimer1ForTrafficLight+0x2c>)
 800146c:	6013      	str	r3, [r2, #0]
	timer1_flag_for_traffic_light = 0;
 800146e:	4b06      	ldr	r3, [pc, #24]	; (8001488 <setTimer1ForTrafficLight+0x30>)
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
}
 8001474:	bf00      	nop
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	bc80      	pop	{r7}
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	20000058 	.word	0x20000058
 8001484:	200000a0 	.word	0x200000a0
 8001488:	200000a4 	.word	0x200000a4

0800148c <setTimer2ForEn7seg>:

void setTimer2ForEn7seg(int duration){
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
	timer2_counter_for_en_7seg = duration / TIMER_CYCLE;
 8001494:	4b07      	ldr	r3, [pc, #28]	; (80014b4 <setTimer2ForEn7seg+0x28>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	687a      	ldr	r2, [r7, #4]
 800149a:	fb92 f3f3 	sdiv	r3, r2, r3
 800149e:	4a06      	ldr	r2, [pc, #24]	; (80014b8 <setTimer2ForEn7seg+0x2c>)
 80014a0:	6013      	str	r3, [r2, #0]
	timer2_flag_for_en_7seg = 0;
 80014a2:	4b06      	ldr	r3, [pc, #24]	; (80014bc <setTimer2ForEn7seg+0x30>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
}
 80014a8:	bf00      	nop
 80014aa:	370c      	adds	r7, #12
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bc80      	pop	{r7}
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	20000058 	.word	0x20000058
 80014b8:	200000a8 	.word	0x200000a8
 80014bc:	200000ac 	.word	0x200000ac

080014c0 <setTimer3ForDisplay>:

void setTimer3ForDisplay(int duration){
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
	timer3_counter_for_display = duration / TIMER_CYCLE;
 80014c8:	4b07      	ldr	r3, [pc, #28]	; (80014e8 <setTimer3ForDisplay+0x28>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	687a      	ldr	r2, [r7, #4]
 80014ce:	fb92 f3f3 	sdiv	r3, r2, r3
 80014d2:	4a06      	ldr	r2, [pc, #24]	; (80014ec <setTimer3ForDisplay+0x2c>)
 80014d4:	6013      	str	r3, [r2, #0]
	timer3_flag_for_display = 0;
 80014d6:	4b06      	ldr	r3, [pc, #24]	; (80014f0 <setTimer3ForDisplay+0x30>)
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
}
 80014dc:	bf00      	nop
 80014de:	370c      	adds	r7, #12
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bc80      	pop	{r7}
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	20000058 	.word	0x20000058
 80014ec:	200000b0 	.word	0x200000b0
 80014f0:	200000b4 	.word	0x200000b4

080014f4 <setTimer4For7segFollowMode>:

void setTimer4For7segFollowMode(int duration){
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
	timer4_counter_for_7seg_follow_mode = duration / TIMER_CYCLE;
 80014fc:	4b07      	ldr	r3, [pc, #28]	; (800151c <setTimer4For7segFollowMode+0x28>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	687a      	ldr	r2, [r7, #4]
 8001502:	fb92 f3f3 	sdiv	r3, r2, r3
 8001506:	4a06      	ldr	r2, [pc, #24]	; (8001520 <setTimer4For7segFollowMode+0x2c>)
 8001508:	6013      	str	r3, [r2, #0]
	timer4_flag_for_7seg_follow_mode = 0;
 800150a:	4b06      	ldr	r3, [pc, #24]	; (8001524 <setTimer4For7segFollowMode+0x30>)
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
}
 8001510:	bf00      	nop
 8001512:	370c      	adds	r7, #12
 8001514:	46bd      	mov	sp, r7
 8001516:	bc80      	pop	{r7}
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	20000058 	.word	0x20000058
 8001520:	200000b8 	.word	0x200000b8
 8001524:	200000bc 	.word	0x200000bc

08001528 <setTimer5ForToggle>:

void setTimer5ForToggle(int duration){
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
	timer5_counter_for_toggle = duration / TIMER_CYCLE;
 8001530:	4b07      	ldr	r3, [pc, #28]	; (8001550 <setTimer5ForToggle+0x28>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	687a      	ldr	r2, [r7, #4]
 8001536:	fb92 f3f3 	sdiv	r3, r2, r3
 800153a:	4a06      	ldr	r2, [pc, #24]	; (8001554 <setTimer5ForToggle+0x2c>)
 800153c:	6013      	str	r3, [r2, #0]
	timer5_flag_for_toggle = 0;
 800153e:	4b06      	ldr	r3, [pc, #24]	; (8001558 <setTimer5ForToggle+0x30>)
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
}
 8001544:	bf00      	nop
 8001546:	370c      	adds	r7, #12
 8001548:	46bd      	mov	sp, r7
 800154a:	bc80      	pop	{r7}
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	20000058 	.word	0x20000058
 8001554:	200000c0 	.word	0x200000c0
 8001558:	200000c4 	.word	0x200000c4

0800155c <resetTimer1ForTrafficLight>:
///////////////////////////////
void resetTimer1ForTrafficLight(){
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
	timer1_counter_for_traffic_light = 0;
 8001560:	4b04      	ldr	r3, [pc, #16]	; (8001574 <resetTimer1ForTrafficLight+0x18>)
 8001562:	2200      	movs	r2, #0
 8001564:	601a      	str	r2, [r3, #0]
	timer1_flag_for_traffic_light = 0;
 8001566:	4b04      	ldr	r3, [pc, #16]	; (8001578 <resetTimer1ForTrafficLight+0x1c>)
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]
}
 800156c:	bf00      	nop
 800156e:	46bd      	mov	sp, r7
 8001570:	bc80      	pop	{r7}
 8001572:	4770      	bx	lr
 8001574:	200000a0 	.word	0x200000a0
 8001578:	200000a4 	.word	0x200000a4

0800157c <resetTimer2ForEn7seg>:

void resetTimer2ForEn7seg(){
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
	timer2_counter_for_en_7seg = 0;
 8001580:	4b04      	ldr	r3, [pc, #16]	; (8001594 <resetTimer2ForEn7seg+0x18>)
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
	timer2_flag_for_en_7seg = 0;
 8001586:	4b04      	ldr	r3, [pc, #16]	; (8001598 <resetTimer2ForEn7seg+0x1c>)
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
}
 800158c:	bf00      	nop
 800158e:	46bd      	mov	sp, r7
 8001590:	bc80      	pop	{r7}
 8001592:	4770      	bx	lr
 8001594:	200000a8 	.word	0x200000a8
 8001598:	200000ac 	.word	0x200000ac

0800159c <resetTimer3ForDisplay>:

void resetTimer3ForDisplay(){
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
	timer3_counter_for_display = 0;
 80015a0:	4b04      	ldr	r3, [pc, #16]	; (80015b4 <resetTimer3ForDisplay+0x18>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	601a      	str	r2, [r3, #0]
	timer3_flag_for_display = 0;
 80015a6:	4b04      	ldr	r3, [pc, #16]	; (80015b8 <resetTimer3ForDisplay+0x1c>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
}
 80015ac:	bf00      	nop
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bc80      	pop	{r7}
 80015b2:	4770      	bx	lr
 80015b4:	200000b0 	.word	0x200000b0
 80015b8:	200000b4 	.word	0x200000b4

080015bc <timerRun>:
void resetTimer5ForToggle(){
	timer5_counter_for_toggle = 0;
	timer5_flag_for_toggle = 0;
}
//////////////////////////////
void timerRun(){
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
	if (timer1_counter_for_traffic_light > 0){
 80015c0:	4b29      	ldr	r3, [pc, #164]	; (8001668 <timerRun+0xac>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	dd0b      	ble.n	80015e0 <timerRun+0x24>
		timer1_counter_for_traffic_light--;
 80015c8:	4b27      	ldr	r3, [pc, #156]	; (8001668 <timerRun+0xac>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	3b01      	subs	r3, #1
 80015ce:	4a26      	ldr	r2, [pc, #152]	; (8001668 <timerRun+0xac>)
 80015d0:	6013      	str	r3, [r2, #0]
		if(timer1_counter_for_traffic_light == 0){
 80015d2:	4b25      	ldr	r3, [pc, #148]	; (8001668 <timerRun+0xac>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d102      	bne.n	80015e0 <timerRun+0x24>
			timer1_flag_for_traffic_light = 1;
 80015da:	4b24      	ldr	r3, [pc, #144]	; (800166c <timerRun+0xb0>)
 80015dc:	2201      	movs	r2, #1
 80015de:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer2_counter_for_en_7seg > 0){
 80015e0:	4b23      	ldr	r3, [pc, #140]	; (8001670 <timerRun+0xb4>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	dd0b      	ble.n	8001600 <timerRun+0x44>
		timer2_counter_for_en_7seg--;
 80015e8:	4b21      	ldr	r3, [pc, #132]	; (8001670 <timerRun+0xb4>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	3b01      	subs	r3, #1
 80015ee:	4a20      	ldr	r2, [pc, #128]	; (8001670 <timerRun+0xb4>)
 80015f0:	6013      	str	r3, [r2, #0]
		if(timer2_counter_for_en_7seg == 0){
 80015f2:	4b1f      	ldr	r3, [pc, #124]	; (8001670 <timerRun+0xb4>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d102      	bne.n	8001600 <timerRun+0x44>
			timer2_flag_for_en_7seg = 1;
 80015fa:	4b1e      	ldr	r3, [pc, #120]	; (8001674 <timerRun+0xb8>)
 80015fc:	2201      	movs	r2, #1
 80015fe:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer3_counter_for_display >  0){
 8001600:	4b1d      	ldr	r3, [pc, #116]	; (8001678 <timerRun+0xbc>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	2b00      	cmp	r3, #0
 8001606:	dd0b      	ble.n	8001620 <timerRun+0x64>
		timer3_counter_for_display--;
 8001608:	4b1b      	ldr	r3, [pc, #108]	; (8001678 <timerRun+0xbc>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	3b01      	subs	r3, #1
 800160e:	4a1a      	ldr	r2, [pc, #104]	; (8001678 <timerRun+0xbc>)
 8001610:	6013      	str	r3, [r2, #0]
		if(timer3_counter_for_display == 0){
 8001612:	4b19      	ldr	r3, [pc, #100]	; (8001678 <timerRun+0xbc>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d102      	bne.n	8001620 <timerRun+0x64>
			timer3_flag_for_display = 1;
 800161a:	4b18      	ldr	r3, [pc, #96]	; (800167c <timerRun+0xc0>)
 800161c:	2201      	movs	r2, #1
 800161e:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer4_counter_for_7seg_follow_mode > 0){
 8001620:	4b17      	ldr	r3, [pc, #92]	; (8001680 <timerRun+0xc4>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	2b00      	cmp	r3, #0
 8001626:	dd0b      	ble.n	8001640 <timerRun+0x84>
		timer4_counter_for_7seg_follow_mode--;
 8001628:	4b15      	ldr	r3, [pc, #84]	; (8001680 <timerRun+0xc4>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	3b01      	subs	r3, #1
 800162e:	4a14      	ldr	r2, [pc, #80]	; (8001680 <timerRun+0xc4>)
 8001630:	6013      	str	r3, [r2, #0]
		if(timer4_counter_for_7seg_follow_mode == 0){
 8001632:	4b13      	ldr	r3, [pc, #76]	; (8001680 <timerRun+0xc4>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d102      	bne.n	8001640 <timerRun+0x84>
			timer4_flag_for_7seg_follow_mode = 1;
 800163a:	4b12      	ldr	r3, [pc, #72]	; (8001684 <timerRun+0xc8>)
 800163c:	2201      	movs	r2, #1
 800163e:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer5_counter_for_toggle > 0){
 8001640:	4b11      	ldr	r3, [pc, #68]	; (8001688 <timerRun+0xcc>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2b00      	cmp	r3, #0
 8001646:	dd0b      	ble.n	8001660 <timerRun+0xa4>
		timer5_counter_for_toggle--;
 8001648:	4b0f      	ldr	r3, [pc, #60]	; (8001688 <timerRun+0xcc>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	3b01      	subs	r3, #1
 800164e:	4a0e      	ldr	r2, [pc, #56]	; (8001688 <timerRun+0xcc>)
 8001650:	6013      	str	r3, [r2, #0]
		if(timer5_counter_for_toggle == 0){
 8001652:	4b0d      	ldr	r3, [pc, #52]	; (8001688 <timerRun+0xcc>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d102      	bne.n	8001660 <timerRun+0xa4>
			timer5_flag_for_toggle = 1;
 800165a:	4b0c      	ldr	r3, [pc, #48]	; (800168c <timerRun+0xd0>)
 800165c:	2201      	movs	r2, #1
 800165e:	601a      	str	r2, [r3, #0]
		}
	}

}
 8001660:	bf00      	nop
 8001662:	46bd      	mov	sp, r7
 8001664:	bc80      	pop	{r7}
 8001666:	4770      	bx	lr
 8001668:	200000a0 	.word	0x200000a0
 800166c:	200000a4 	.word	0x200000a4
 8001670:	200000a8 	.word	0x200000a8
 8001674:	200000ac 	.word	0x200000ac
 8001678:	200000b0 	.word	0x200000b0
 800167c:	200000b4 	.word	0x200000b4
 8001680:	200000b8 	.word	0x200000b8
 8001684:	200000bc 	.word	0x200000bc
 8001688:	200000c0 	.word	0x200000c0
 800168c:	200000c4 	.word	0x200000c4

08001690 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001690:	b480      	push	{r7}
 8001692:	b085      	sub	sp, #20
 8001694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001696:	4b15      	ldr	r3, [pc, #84]	; (80016ec <HAL_MspInit+0x5c>)
 8001698:	699b      	ldr	r3, [r3, #24]
 800169a:	4a14      	ldr	r2, [pc, #80]	; (80016ec <HAL_MspInit+0x5c>)
 800169c:	f043 0301 	orr.w	r3, r3, #1
 80016a0:	6193      	str	r3, [r2, #24]
 80016a2:	4b12      	ldr	r3, [pc, #72]	; (80016ec <HAL_MspInit+0x5c>)
 80016a4:	699b      	ldr	r3, [r3, #24]
 80016a6:	f003 0301 	and.w	r3, r3, #1
 80016aa:	60bb      	str	r3, [r7, #8]
 80016ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ae:	4b0f      	ldr	r3, [pc, #60]	; (80016ec <HAL_MspInit+0x5c>)
 80016b0:	69db      	ldr	r3, [r3, #28]
 80016b2:	4a0e      	ldr	r2, [pc, #56]	; (80016ec <HAL_MspInit+0x5c>)
 80016b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016b8:	61d3      	str	r3, [r2, #28]
 80016ba:	4b0c      	ldr	r3, [pc, #48]	; (80016ec <HAL_MspInit+0x5c>)
 80016bc:	69db      	ldr	r3, [r3, #28]
 80016be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016c2:	607b      	str	r3, [r7, #4]
 80016c4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80016c6:	4b0a      	ldr	r3, [pc, #40]	; (80016f0 <HAL_MspInit+0x60>)
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	60fb      	str	r3, [r7, #12]
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80016d2:	60fb      	str	r3, [r7, #12]
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80016da:	60fb      	str	r3, [r7, #12]
 80016dc:	4a04      	ldr	r2, [pc, #16]	; (80016f0 <HAL_MspInit+0x60>)
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016e2:	bf00      	nop
 80016e4:	3714      	adds	r7, #20
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bc80      	pop	{r7}
 80016ea:	4770      	bx	lr
 80016ec:	40021000 	.word	0x40021000
 80016f0:	40010000 	.word	0x40010000

080016f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b084      	sub	sp, #16
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001704:	d113      	bne.n	800172e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001706:	4b0c      	ldr	r3, [pc, #48]	; (8001738 <HAL_TIM_Base_MspInit+0x44>)
 8001708:	69db      	ldr	r3, [r3, #28]
 800170a:	4a0b      	ldr	r2, [pc, #44]	; (8001738 <HAL_TIM_Base_MspInit+0x44>)
 800170c:	f043 0301 	orr.w	r3, r3, #1
 8001710:	61d3      	str	r3, [r2, #28]
 8001712:	4b09      	ldr	r3, [pc, #36]	; (8001738 <HAL_TIM_Base_MspInit+0x44>)
 8001714:	69db      	ldr	r3, [r3, #28]
 8001716:	f003 0301 	and.w	r3, r3, #1
 800171a:	60fb      	str	r3, [r7, #12]
 800171c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800171e:	2200      	movs	r2, #0
 8001720:	2100      	movs	r1, #0
 8001722:	201c      	movs	r0, #28
 8001724:	f000 f9a1 	bl	8001a6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001728:	201c      	movs	r0, #28
 800172a:	f000 f9ba 	bl	8001aa2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800172e:	bf00      	nop
 8001730:	3710      	adds	r7, #16
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	40021000 	.word	0x40021000

0800173c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001740:	e7fe      	b.n	8001740 <NMI_Handler+0x4>

08001742 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001742:	b480      	push	{r7}
 8001744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001746:	e7fe      	b.n	8001746 <HardFault_Handler+0x4>

08001748 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800174c:	e7fe      	b.n	800174c <MemManage_Handler+0x4>

0800174e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800174e:	b480      	push	{r7}
 8001750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001752:	e7fe      	b.n	8001752 <BusFault_Handler+0x4>

08001754 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001758:	e7fe      	b.n	8001758 <UsageFault_Handler+0x4>

0800175a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800175a:	b480      	push	{r7}
 800175c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800175e:	bf00      	nop
 8001760:	46bd      	mov	sp, r7
 8001762:	bc80      	pop	{r7}
 8001764:	4770      	bx	lr

08001766 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001766:	b480      	push	{r7}
 8001768:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800176a:	bf00      	nop
 800176c:	46bd      	mov	sp, r7
 800176e:	bc80      	pop	{r7}
 8001770:	4770      	bx	lr

08001772 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001772:	b480      	push	{r7}
 8001774:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001776:	bf00      	nop
 8001778:	46bd      	mov	sp, r7
 800177a:	bc80      	pop	{r7}
 800177c:	4770      	bx	lr

0800177e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800177e:	b580      	push	{r7, lr}
 8001780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001782:	f000 f87f 	bl	8001884 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001786:	bf00      	nop
 8001788:	bd80      	pop	{r7, pc}
	...

0800178c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001790:	4802      	ldr	r0, [pc, #8]	; (800179c <TIM2_IRQHandler+0x10>)
 8001792:	f000 ffe7 	bl	8002764 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001796:	bf00      	nop
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	200000c8 	.word	0x200000c8

080017a0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017a4:	bf00      	nop
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bc80      	pop	{r7}
 80017aa:	4770      	bx	lr

080017ac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017ac:	480c      	ldr	r0, [pc, #48]	; (80017e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017ae:	490d      	ldr	r1, [pc, #52]	; (80017e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017b0:	4a0d      	ldr	r2, [pc, #52]	; (80017e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017b4:	e002      	b.n	80017bc <LoopCopyDataInit>

080017b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017ba:	3304      	adds	r3, #4

080017bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017c0:	d3f9      	bcc.n	80017b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017c2:	4a0a      	ldr	r2, [pc, #40]	; (80017ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017c4:	4c0a      	ldr	r4, [pc, #40]	; (80017f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80017c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017c8:	e001      	b.n	80017ce <LoopFillZerobss>

080017ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017cc:	3204      	adds	r2, #4

080017ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017d0:	d3fb      	bcc.n	80017ca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80017d2:	f7ff ffe5 	bl	80017a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017d6:	f001 fb0d 	bl	8002df4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017da:	f7ff fd0d 	bl	80011f8 <main>
  bx lr
 80017de:	4770      	bx	lr
  ldr r0, =_sdata
 80017e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017e4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80017e8:	08002e8c 	.word	0x08002e8c
  ldr r2, =_sbss
 80017ec:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80017f0:	20000114 	.word	0x20000114

080017f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017f4:	e7fe      	b.n	80017f4 <ADC1_2_IRQHandler>
	...

080017f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017fc:	4b08      	ldr	r3, [pc, #32]	; (8001820 <HAL_Init+0x28>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a07      	ldr	r2, [pc, #28]	; (8001820 <HAL_Init+0x28>)
 8001802:	f043 0310 	orr.w	r3, r3, #16
 8001806:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001808:	2003      	movs	r0, #3
 800180a:	f000 f923 	bl	8001a54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800180e:	200f      	movs	r0, #15
 8001810:	f000 f808 	bl	8001824 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001814:	f7ff ff3c 	bl	8001690 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001818:	2300      	movs	r3, #0
}
 800181a:	4618      	mov	r0, r3
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	40022000 	.word	0x40022000

08001824 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800182c:	4b12      	ldr	r3, [pc, #72]	; (8001878 <HAL_InitTick+0x54>)
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	4b12      	ldr	r3, [pc, #72]	; (800187c <HAL_InitTick+0x58>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	4619      	mov	r1, r3
 8001836:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800183a:	fbb3 f3f1 	udiv	r3, r3, r1
 800183e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001842:	4618      	mov	r0, r3
 8001844:	f000 f93b 	bl	8001abe <HAL_SYSTICK_Config>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e00e      	b.n	8001870 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2b0f      	cmp	r3, #15
 8001856:	d80a      	bhi.n	800186e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001858:	2200      	movs	r2, #0
 800185a:	6879      	ldr	r1, [r7, #4]
 800185c:	f04f 30ff 	mov.w	r0, #4294967295
 8001860:	f000 f903 	bl	8001a6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001864:	4a06      	ldr	r2, [pc, #24]	; (8001880 <HAL_InitTick+0x5c>)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800186a:	2300      	movs	r3, #0
 800186c:	e000      	b.n	8001870 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
}
 8001870:	4618      	mov	r0, r3
 8001872:	3708      	adds	r7, #8
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	2000005c 	.word	0x2000005c
 800187c:	20000064 	.word	0x20000064
 8001880:	20000060 	.word	0x20000060

08001884 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001888:	4b05      	ldr	r3, [pc, #20]	; (80018a0 <HAL_IncTick+0x1c>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	461a      	mov	r2, r3
 800188e:	4b05      	ldr	r3, [pc, #20]	; (80018a4 <HAL_IncTick+0x20>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4413      	add	r3, r2
 8001894:	4a03      	ldr	r2, [pc, #12]	; (80018a4 <HAL_IncTick+0x20>)
 8001896:	6013      	str	r3, [r2, #0]
}
 8001898:	bf00      	nop
 800189a:	46bd      	mov	sp, r7
 800189c:	bc80      	pop	{r7}
 800189e:	4770      	bx	lr
 80018a0:	20000064 	.word	0x20000064
 80018a4:	20000110 	.word	0x20000110

080018a8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  return uwTick;
 80018ac:	4b02      	ldr	r3, [pc, #8]	; (80018b8 <HAL_GetTick+0x10>)
 80018ae:	681b      	ldr	r3, [r3, #0]
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bc80      	pop	{r7}
 80018b6:	4770      	bx	lr
 80018b8:	20000110 	.word	0x20000110

080018bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018bc:	b480      	push	{r7}
 80018be:	b085      	sub	sp, #20
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f003 0307 	and.w	r3, r3, #7
 80018ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018cc:	4b0c      	ldr	r3, [pc, #48]	; (8001900 <__NVIC_SetPriorityGrouping+0x44>)
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018d2:	68ba      	ldr	r2, [r7, #8]
 80018d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018d8:	4013      	ands	r3, r2
 80018da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018ee:	4a04      	ldr	r2, [pc, #16]	; (8001900 <__NVIC_SetPriorityGrouping+0x44>)
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	60d3      	str	r3, [r2, #12]
}
 80018f4:	bf00      	nop
 80018f6:	3714      	adds	r7, #20
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bc80      	pop	{r7}
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	e000ed00 	.word	0xe000ed00

08001904 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001908:	4b04      	ldr	r3, [pc, #16]	; (800191c <__NVIC_GetPriorityGrouping+0x18>)
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	0a1b      	lsrs	r3, r3, #8
 800190e:	f003 0307 	and.w	r3, r3, #7
}
 8001912:	4618      	mov	r0, r3
 8001914:	46bd      	mov	sp, r7
 8001916:	bc80      	pop	{r7}
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	e000ed00 	.word	0xe000ed00

08001920 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	4603      	mov	r3, r0
 8001928:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800192a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800192e:	2b00      	cmp	r3, #0
 8001930:	db0b      	blt.n	800194a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001932:	79fb      	ldrb	r3, [r7, #7]
 8001934:	f003 021f 	and.w	r2, r3, #31
 8001938:	4906      	ldr	r1, [pc, #24]	; (8001954 <__NVIC_EnableIRQ+0x34>)
 800193a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193e:	095b      	lsrs	r3, r3, #5
 8001940:	2001      	movs	r0, #1
 8001942:	fa00 f202 	lsl.w	r2, r0, r2
 8001946:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800194a:	bf00      	nop
 800194c:	370c      	adds	r7, #12
 800194e:	46bd      	mov	sp, r7
 8001950:	bc80      	pop	{r7}
 8001952:	4770      	bx	lr
 8001954:	e000e100 	.word	0xe000e100

08001958 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	4603      	mov	r3, r0
 8001960:	6039      	str	r1, [r7, #0]
 8001962:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001964:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001968:	2b00      	cmp	r3, #0
 800196a:	db0a      	blt.n	8001982 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	b2da      	uxtb	r2, r3
 8001970:	490c      	ldr	r1, [pc, #48]	; (80019a4 <__NVIC_SetPriority+0x4c>)
 8001972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001976:	0112      	lsls	r2, r2, #4
 8001978:	b2d2      	uxtb	r2, r2
 800197a:	440b      	add	r3, r1
 800197c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001980:	e00a      	b.n	8001998 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	b2da      	uxtb	r2, r3
 8001986:	4908      	ldr	r1, [pc, #32]	; (80019a8 <__NVIC_SetPriority+0x50>)
 8001988:	79fb      	ldrb	r3, [r7, #7]
 800198a:	f003 030f 	and.w	r3, r3, #15
 800198e:	3b04      	subs	r3, #4
 8001990:	0112      	lsls	r2, r2, #4
 8001992:	b2d2      	uxtb	r2, r2
 8001994:	440b      	add	r3, r1
 8001996:	761a      	strb	r2, [r3, #24]
}
 8001998:	bf00      	nop
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	bc80      	pop	{r7}
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	e000e100 	.word	0xe000e100
 80019a8:	e000ed00 	.word	0xe000ed00

080019ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b089      	sub	sp, #36	; 0x24
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	60f8      	str	r0, [r7, #12]
 80019b4:	60b9      	str	r1, [r7, #8]
 80019b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	f003 0307 	and.w	r3, r3, #7
 80019be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	f1c3 0307 	rsb	r3, r3, #7
 80019c6:	2b04      	cmp	r3, #4
 80019c8:	bf28      	it	cs
 80019ca:	2304      	movcs	r3, #4
 80019cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	3304      	adds	r3, #4
 80019d2:	2b06      	cmp	r3, #6
 80019d4:	d902      	bls.n	80019dc <NVIC_EncodePriority+0x30>
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	3b03      	subs	r3, #3
 80019da:	e000      	b.n	80019de <NVIC_EncodePriority+0x32>
 80019dc:	2300      	movs	r3, #0
 80019de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019e0:	f04f 32ff 	mov.w	r2, #4294967295
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ea:	43da      	mvns	r2, r3
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	401a      	ands	r2, r3
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019f4:	f04f 31ff 	mov.w	r1, #4294967295
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	fa01 f303 	lsl.w	r3, r1, r3
 80019fe:	43d9      	mvns	r1, r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a04:	4313      	orrs	r3, r2
         );
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3724      	adds	r7, #36	; 0x24
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bc80      	pop	{r7}
 8001a0e:	4770      	bx	lr

08001a10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	3b01      	subs	r3, #1
 8001a1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a20:	d301      	bcc.n	8001a26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a22:	2301      	movs	r3, #1
 8001a24:	e00f      	b.n	8001a46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a26:	4a0a      	ldr	r2, [pc, #40]	; (8001a50 <SysTick_Config+0x40>)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	3b01      	subs	r3, #1
 8001a2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a2e:	210f      	movs	r1, #15
 8001a30:	f04f 30ff 	mov.w	r0, #4294967295
 8001a34:	f7ff ff90 	bl	8001958 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a38:	4b05      	ldr	r3, [pc, #20]	; (8001a50 <SysTick_Config+0x40>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a3e:	4b04      	ldr	r3, [pc, #16]	; (8001a50 <SysTick_Config+0x40>)
 8001a40:	2207      	movs	r2, #7
 8001a42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a44:	2300      	movs	r3, #0
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	e000e010 	.word	0xe000e010

08001a54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f7ff ff2d 	bl	80018bc <__NVIC_SetPriorityGrouping>
}
 8001a62:	bf00      	nop
 8001a64:	3708      	adds	r7, #8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}

08001a6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a6a:	b580      	push	{r7, lr}
 8001a6c:	b086      	sub	sp, #24
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	4603      	mov	r3, r0
 8001a72:	60b9      	str	r1, [r7, #8]
 8001a74:	607a      	str	r2, [r7, #4]
 8001a76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a7c:	f7ff ff42 	bl	8001904 <__NVIC_GetPriorityGrouping>
 8001a80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	68b9      	ldr	r1, [r7, #8]
 8001a86:	6978      	ldr	r0, [r7, #20]
 8001a88:	f7ff ff90 	bl	80019ac <NVIC_EncodePriority>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a92:	4611      	mov	r1, r2
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7ff ff5f 	bl	8001958 <__NVIC_SetPriority>
}
 8001a9a:	bf00      	nop
 8001a9c:	3718      	adds	r7, #24
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}

08001aa2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	b082      	sub	sp, #8
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001aac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7ff ff35 	bl	8001920 <__NVIC_EnableIRQ>
}
 8001ab6:	bf00      	nop
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}

08001abe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001abe:	b580      	push	{r7, lr}
 8001ac0:	b082      	sub	sp, #8
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f7ff ffa2 	bl	8001a10 <SysTick_Config>
 8001acc:	4603      	mov	r3, r0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
	...

08001ad8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b08b      	sub	sp, #44	; 0x2c
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001aea:	e148      	b.n	8001d7e <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001aec:	2201      	movs	r2, #1
 8001aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af0:	fa02 f303 	lsl.w	r3, r2, r3
 8001af4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	69fa      	ldr	r2, [r7, #28]
 8001afc:	4013      	ands	r3, r2
 8001afe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	f040 8137 	bne.w	8001d78 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	4aa3      	ldr	r2, [pc, #652]	; (8001d9c <HAL_GPIO_Init+0x2c4>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d05e      	beq.n	8001bd2 <HAL_GPIO_Init+0xfa>
 8001b14:	4aa1      	ldr	r2, [pc, #644]	; (8001d9c <HAL_GPIO_Init+0x2c4>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d875      	bhi.n	8001c06 <HAL_GPIO_Init+0x12e>
 8001b1a:	4aa1      	ldr	r2, [pc, #644]	; (8001da0 <HAL_GPIO_Init+0x2c8>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d058      	beq.n	8001bd2 <HAL_GPIO_Init+0xfa>
 8001b20:	4a9f      	ldr	r2, [pc, #636]	; (8001da0 <HAL_GPIO_Init+0x2c8>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d86f      	bhi.n	8001c06 <HAL_GPIO_Init+0x12e>
 8001b26:	4a9f      	ldr	r2, [pc, #636]	; (8001da4 <HAL_GPIO_Init+0x2cc>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d052      	beq.n	8001bd2 <HAL_GPIO_Init+0xfa>
 8001b2c:	4a9d      	ldr	r2, [pc, #628]	; (8001da4 <HAL_GPIO_Init+0x2cc>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d869      	bhi.n	8001c06 <HAL_GPIO_Init+0x12e>
 8001b32:	4a9d      	ldr	r2, [pc, #628]	; (8001da8 <HAL_GPIO_Init+0x2d0>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d04c      	beq.n	8001bd2 <HAL_GPIO_Init+0xfa>
 8001b38:	4a9b      	ldr	r2, [pc, #620]	; (8001da8 <HAL_GPIO_Init+0x2d0>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d863      	bhi.n	8001c06 <HAL_GPIO_Init+0x12e>
 8001b3e:	4a9b      	ldr	r2, [pc, #620]	; (8001dac <HAL_GPIO_Init+0x2d4>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d046      	beq.n	8001bd2 <HAL_GPIO_Init+0xfa>
 8001b44:	4a99      	ldr	r2, [pc, #612]	; (8001dac <HAL_GPIO_Init+0x2d4>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d85d      	bhi.n	8001c06 <HAL_GPIO_Init+0x12e>
 8001b4a:	2b12      	cmp	r3, #18
 8001b4c:	d82a      	bhi.n	8001ba4 <HAL_GPIO_Init+0xcc>
 8001b4e:	2b12      	cmp	r3, #18
 8001b50:	d859      	bhi.n	8001c06 <HAL_GPIO_Init+0x12e>
 8001b52:	a201      	add	r2, pc, #4	; (adr r2, 8001b58 <HAL_GPIO_Init+0x80>)
 8001b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b58:	08001bd3 	.word	0x08001bd3
 8001b5c:	08001bad 	.word	0x08001bad
 8001b60:	08001bbf 	.word	0x08001bbf
 8001b64:	08001c01 	.word	0x08001c01
 8001b68:	08001c07 	.word	0x08001c07
 8001b6c:	08001c07 	.word	0x08001c07
 8001b70:	08001c07 	.word	0x08001c07
 8001b74:	08001c07 	.word	0x08001c07
 8001b78:	08001c07 	.word	0x08001c07
 8001b7c:	08001c07 	.word	0x08001c07
 8001b80:	08001c07 	.word	0x08001c07
 8001b84:	08001c07 	.word	0x08001c07
 8001b88:	08001c07 	.word	0x08001c07
 8001b8c:	08001c07 	.word	0x08001c07
 8001b90:	08001c07 	.word	0x08001c07
 8001b94:	08001c07 	.word	0x08001c07
 8001b98:	08001c07 	.word	0x08001c07
 8001b9c:	08001bb5 	.word	0x08001bb5
 8001ba0:	08001bc9 	.word	0x08001bc9
 8001ba4:	4a82      	ldr	r2, [pc, #520]	; (8001db0 <HAL_GPIO_Init+0x2d8>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d013      	beq.n	8001bd2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001baa:	e02c      	b.n	8001c06 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	623b      	str	r3, [r7, #32]
          break;
 8001bb2:	e029      	b.n	8001c08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	3304      	adds	r3, #4
 8001bba:	623b      	str	r3, [r7, #32]
          break;
 8001bbc:	e024      	b.n	8001c08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	68db      	ldr	r3, [r3, #12]
 8001bc2:	3308      	adds	r3, #8
 8001bc4:	623b      	str	r3, [r7, #32]
          break;
 8001bc6:	e01f      	b.n	8001c08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	330c      	adds	r3, #12
 8001bce:	623b      	str	r3, [r7, #32]
          break;
 8001bd0:	e01a      	b.n	8001c08 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d102      	bne.n	8001be0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001bda:	2304      	movs	r3, #4
 8001bdc:	623b      	str	r3, [r7, #32]
          break;
 8001bde:	e013      	b.n	8001c08 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d105      	bne.n	8001bf4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001be8:	2308      	movs	r3, #8
 8001bea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	69fa      	ldr	r2, [r7, #28]
 8001bf0:	611a      	str	r2, [r3, #16]
          break;
 8001bf2:	e009      	b.n	8001c08 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bf4:	2308      	movs	r3, #8
 8001bf6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	69fa      	ldr	r2, [r7, #28]
 8001bfc:	615a      	str	r2, [r3, #20]
          break;
 8001bfe:	e003      	b.n	8001c08 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c00:	2300      	movs	r3, #0
 8001c02:	623b      	str	r3, [r7, #32]
          break;
 8001c04:	e000      	b.n	8001c08 <HAL_GPIO_Init+0x130>
          break;
 8001c06:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c08:	69bb      	ldr	r3, [r7, #24]
 8001c0a:	2bff      	cmp	r3, #255	; 0xff
 8001c0c:	d801      	bhi.n	8001c12 <HAL_GPIO_Init+0x13a>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	e001      	b.n	8001c16 <HAL_GPIO_Init+0x13e>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	3304      	adds	r3, #4
 8001c16:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	2bff      	cmp	r3, #255	; 0xff
 8001c1c:	d802      	bhi.n	8001c24 <HAL_GPIO_Init+0x14c>
 8001c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	e002      	b.n	8001c2a <HAL_GPIO_Init+0x152>
 8001c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c26:	3b08      	subs	r3, #8
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	210f      	movs	r1, #15
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	fa01 f303 	lsl.w	r3, r1, r3
 8001c38:	43db      	mvns	r3, r3
 8001c3a:	401a      	ands	r2, r3
 8001c3c:	6a39      	ldr	r1, [r7, #32]
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	fa01 f303 	lsl.w	r3, r1, r3
 8001c44:	431a      	orrs	r2, r3
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	f000 8090 	beq.w	8001d78 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c58:	4b56      	ldr	r3, [pc, #344]	; (8001db4 <HAL_GPIO_Init+0x2dc>)
 8001c5a:	699b      	ldr	r3, [r3, #24]
 8001c5c:	4a55      	ldr	r2, [pc, #340]	; (8001db4 <HAL_GPIO_Init+0x2dc>)
 8001c5e:	f043 0301 	orr.w	r3, r3, #1
 8001c62:	6193      	str	r3, [r2, #24]
 8001c64:	4b53      	ldr	r3, [pc, #332]	; (8001db4 <HAL_GPIO_Init+0x2dc>)
 8001c66:	699b      	ldr	r3, [r3, #24]
 8001c68:	f003 0301 	and.w	r3, r3, #1
 8001c6c:	60bb      	str	r3, [r7, #8]
 8001c6e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c70:	4a51      	ldr	r2, [pc, #324]	; (8001db8 <HAL_GPIO_Init+0x2e0>)
 8001c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c74:	089b      	lsrs	r3, r3, #2
 8001c76:	3302      	adds	r3, #2
 8001c78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c7c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c80:	f003 0303 	and.w	r3, r3, #3
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	220f      	movs	r2, #15
 8001c88:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8c:	43db      	mvns	r3, r3
 8001c8e:	68fa      	ldr	r2, [r7, #12]
 8001c90:	4013      	ands	r3, r2
 8001c92:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	4a49      	ldr	r2, [pc, #292]	; (8001dbc <HAL_GPIO_Init+0x2e4>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d00d      	beq.n	8001cb8 <HAL_GPIO_Init+0x1e0>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	4a48      	ldr	r2, [pc, #288]	; (8001dc0 <HAL_GPIO_Init+0x2e8>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d007      	beq.n	8001cb4 <HAL_GPIO_Init+0x1dc>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	4a47      	ldr	r2, [pc, #284]	; (8001dc4 <HAL_GPIO_Init+0x2ec>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d101      	bne.n	8001cb0 <HAL_GPIO_Init+0x1d8>
 8001cac:	2302      	movs	r3, #2
 8001cae:	e004      	b.n	8001cba <HAL_GPIO_Init+0x1e2>
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	e002      	b.n	8001cba <HAL_GPIO_Init+0x1e2>
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e000      	b.n	8001cba <HAL_GPIO_Init+0x1e2>
 8001cb8:	2300      	movs	r3, #0
 8001cba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cbc:	f002 0203 	and.w	r2, r2, #3
 8001cc0:	0092      	lsls	r2, r2, #2
 8001cc2:	4093      	lsls	r3, r2
 8001cc4:	68fa      	ldr	r2, [r7, #12]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001cca:	493b      	ldr	r1, [pc, #236]	; (8001db8 <HAL_GPIO_Init+0x2e0>)
 8001ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cce:	089b      	lsrs	r3, r3, #2
 8001cd0:	3302      	adds	r3, #2
 8001cd2:	68fa      	ldr	r2, [r7, #12]
 8001cd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d006      	beq.n	8001cf2 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ce4:	4b38      	ldr	r3, [pc, #224]	; (8001dc8 <HAL_GPIO_Init+0x2f0>)
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	4937      	ldr	r1, [pc, #220]	; (8001dc8 <HAL_GPIO_Init+0x2f0>)
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	600b      	str	r3, [r1, #0]
 8001cf0:	e006      	b.n	8001d00 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001cf2:	4b35      	ldr	r3, [pc, #212]	; (8001dc8 <HAL_GPIO_Init+0x2f0>)
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	43db      	mvns	r3, r3
 8001cfa:	4933      	ldr	r1, [pc, #204]	; (8001dc8 <HAL_GPIO_Init+0x2f0>)
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d006      	beq.n	8001d1a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d0c:	4b2e      	ldr	r3, [pc, #184]	; (8001dc8 <HAL_GPIO_Init+0x2f0>)
 8001d0e:	685a      	ldr	r2, [r3, #4]
 8001d10:	492d      	ldr	r1, [pc, #180]	; (8001dc8 <HAL_GPIO_Init+0x2f0>)
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	604b      	str	r3, [r1, #4]
 8001d18:	e006      	b.n	8001d28 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d1a:	4b2b      	ldr	r3, [pc, #172]	; (8001dc8 <HAL_GPIO_Init+0x2f0>)
 8001d1c:	685a      	ldr	r2, [r3, #4]
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	43db      	mvns	r3, r3
 8001d22:	4929      	ldr	r1, [pc, #164]	; (8001dc8 <HAL_GPIO_Init+0x2f0>)
 8001d24:	4013      	ands	r3, r2
 8001d26:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d006      	beq.n	8001d42 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d34:	4b24      	ldr	r3, [pc, #144]	; (8001dc8 <HAL_GPIO_Init+0x2f0>)
 8001d36:	689a      	ldr	r2, [r3, #8]
 8001d38:	4923      	ldr	r1, [pc, #140]	; (8001dc8 <HAL_GPIO_Init+0x2f0>)
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	608b      	str	r3, [r1, #8]
 8001d40:	e006      	b.n	8001d50 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d42:	4b21      	ldr	r3, [pc, #132]	; (8001dc8 <HAL_GPIO_Init+0x2f0>)
 8001d44:	689a      	ldr	r2, [r3, #8]
 8001d46:	69bb      	ldr	r3, [r7, #24]
 8001d48:	43db      	mvns	r3, r3
 8001d4a:	491f      	ldr	r1, [pc, #124]	; (8001dc8 <HAL_GPIO_Init+0x2f0>)
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d006      	beq.n	8001d6a <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d5c:	4b1a      	ldr	r3, [pc, #104]	; (8001dc8 <HAL_GPIO_Init+0x2f0>)
 8001d5e:	68da      	ldr	r2, [r3, #12]
 8001d60:	4919      	ldr	r1, [pc, #100]	; (8001dc8 <HAL_GPIO_Init+0x2f0>)
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	60cb      	str	r3, [r1, #12]
 8001d68:	e006      	b.n	8001d78 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d6a:	4b17      	ldr	r3, [pc, #92]	; (8001dc8 <HAL_GPIO_Init+0x2f0>)
 8001d6c:	68da      	ldr	r2, [r3, #12]
 8001d6e:	69bb      	ldr	r3, [r7, #24]
 8001d70:	43db      	mvns	r3, r3
 8001d72:	4915      	ldr	r1, [pc, #84]	; (8001dc8 <HAL_GPIO_Init+0x2f0>)
 8001d74:	4013      	ands	r3, r2
 8001d76:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d84:	fa22 f303 	lsr.w	r3, r2, r3
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	f47f aeaf 	bne.w	8001aec <HAL_GPIO_Init+0x14>
  }
}
 8001d8e:	bf00      	nop
 8001d90:	bf00      	nop
 8001d92:	372c      	adds	r7, #44	; 0x2c
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bc80      	pop	{r7}
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	10320000 	.word	0x10320000
 8001da0:	10310000 	.word	0x10310000
 8001da4:	10220000 	.word	0x10220000
 8001da8:	10210000 	.word	0x10210000
 8001dac:	10120000 	.word	0x10120000
 8001db0:	10110000 	.word	0x10110000
 8001db4:	40021000 	.word	0x40021000
 8001db8:	40010000 	.word	0x40010000
 8001dbc:	40010800 	.word	0x40010800
 8001dc0:	40010c00 	.word	0x40010c00
 8001dc4:	40011000 	.word	0x40011000
 8001dc8:	40010400 	.word	0x40010400

08001dcc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b085      	sub	sp, #20
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	689a      	ldr	r2, [r3, #8]
 8001ddc:	887b      	ldrh	r3, [r7, #2]
 8001dde:	4013      	ands	r3, r2
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d002      	beq.n	8001dea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001de4:	2301      	movs	r3, #1
 8001de6:	73fb      	strb	r3, [r7, #15]
 8001de8:	e001      	b.n	8001dee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001dea:	2300      	movs	r3, #0
 8001dec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001dee:	7bfb      	ldrb	r3, [r7, #15]
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3714      	adds	r7, #20
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bc80      	pop	{r7}
 8001df8:	4770      	bx	lr

08001dfa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dfa:	b480      	push	{r7}
 8001dfc:	b083      	sub	sp, #12
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]
 8001e02:	460b      	mov	r3, r1
 8001e04:	807b      	strh	r3, [r7, #2]
 8001e06:	4613      	mov	r3, r2
 8001e08:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e0a:	787b      	ldrb	r3, [r7, #1]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d003      	beq.n	8001e18 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e10:	887a      	ldrh	r2, [r7, #2]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e16:	e003      	b.n	8001e20 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e18:	887b      	ldrh	r3, [r7, #2]
 8001e1a:	041a      	lsls	r2, r3, #16
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	611a      	str	r2, [r3, #16]
}
 8001e20:	bf00      	nop
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bc80      	pop	{r7}
 8001e28:	4770      	bx	lr

08001e2a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e2a:	b480      	push	{r7}
 8001e2c:	b085      	sub	sp, #20
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	6078      	str	r0, [r7, #4]
 8001e32:	460b      	mov	r3, r1
 8001e34:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	68db      	ldr	r3, [r3, #12]
 8001e3a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e3c:	887a      	ldrh	r2, [r7, #2]
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	4013      	ands	r3, r2
 8001e42:	041a      	lsls	r2, r3, #16
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	43d9      	mvns	r1, r3
 8001e48:	887b      	ldrh	r3, [r7, #2]
 8001e4a:	400b      	ands	r3, r1
 8001e4c:	431a      	orrs	r2, r3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	611a      	str	r2, [r3, #16]
}
 8001e52:	bf00      	nop
 8001e54:	3714      	adds	r7, #20
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bc80      	pop	{r7}
 8001e5a:	4770      	bx	lr

08001e5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b086      	sub	sp, #24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d101      	bne.n	8001e6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e26c      	b.n	8002348 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0301 	and.w	r3, r3, #1
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	f000 8087 	beq.w	8001f8a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e7c:	4b92      	ldr	r3, [pc, #584]	; (80020c8 <HAL_RCC_OscConfig+0x26c>)
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f003 030c 	and.w	r3, r3, #12
 8001e84:	2b04      	cmp	r3, #4
 8001e86:	d00c      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e88:	4b8f      	ldr	r3, [pc, #572]	; (80020c8 <HAL_RCC_OscConfig+0x26c>)
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f003 030c 	and.w	r3, r3, #12
 8001e90:	2b08      	cmp	r3, #8
 8001e92:	d112      	bne.n	8001eba <HAL_RCC_OscConfig+0x5e>
 8001e94:	4b8c      	ldr	r3, [pc, #560]	; (80020c8 <HAL_RCC_OscConfig+0x26c>)
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ea0:	d10b      	bne.n	8001eba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ea2:	4b89      	ldr	r3, [pc, #548]	; (80020c8 <HAL_RCC_OscConfig+0x26c>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d06c      	beq.n	8001f88 <HAL_RCC_OscConfig+0x12c>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d168      	bne.n	8001f88 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e246      	b.n	8002348 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ec2:	d106      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x76>
 8001ec4:	4b80      	ldr	r3, [pc, #512]	; (80020c8 <HAL_RCC_OscConfig+0x26c>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a7f      	ldr	r2, [pc, #508]	; (80020c8 <HAL_RCC_OscConfig+0x26c>)
 8001eca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ece:	6013      	str	r3, [r2, #0]
 8001ed0:	e02e      	b.n	8001f30 <HAL_RCC_OscConfig+0xd4>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d10c      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x98>
 8001eda:	4b7b      	ldr	r3, [pc, #492]	; (80020c8 <HAL_RCC_OscConfig+0x26c>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a7a      	ldr	r2, [pc, #488]	; (80020c8 <HAL_RCC_OscConfig+0x26c>)
 8001ee0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ee4:	6013      	str	r3, [r2, #0]
 8001ee6:	4b78      	ldr	r3, [pc, #480]	; (80020c8 <HAL_RCC_OscConfig+0x26c>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a77      	ldr	r2, [pc, #476]	; (80020c8 <HAL_RCC_OscConfig+0x26c>)
 8001eec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ef0:	6013      	str	r3, [r2, #0]
 8001ef2:	e01d      	b.n	8001f30 <HAL_RCC_OscConfig+0xd4>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001efc:	d10c      	bne.n	8001f18 <HAL_RCC_OscConfig+0xbc>
 8001efe:	4b72      	ldr	r3, [pc, #456]	; (80020c8 <HAL_RCC_OscConfig+0x26c>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a71      	ldr	r2, [pc, #452]	; (80020c8 <HAL_RCC_OscConfig+0x26c>)
 8001f04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f08:	6013      	str	r3, [r2, #0]
 8001f0a:	4b6f      	ldr	r3, [pc, #444]	; (80020c8 <HAL_RCC_OscConfig+0x26c>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a6e      	ldr	r2, [pc, #440]	; (80020c8 <HAL_RCC_OscConfig+0x26c>)
 8001f10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f14:	6013      	str	r3, [r2, #0]
 8001f16:	e00b      	b.n	8001f30 <HAL_RCC_OscConfig+0xd4>
 8001f18:	4b6b      	ldr	r3, [pc, #428]	; (80020c8 <HAL_RCC_OscConfig+0x26c>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a6a      	ldr	r2, [pc, #424]	; (80020c8 <HAL_RCC_OscConfig+0x26c>)
 8001f1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f22:	6013      	str	r3, [r2, #0]
 8001f24:	4b68      	ldr	r3, [pc, #416]	; (80020c8 <HAL_RCC_OscConfig+0x26c>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a67      	ldr	r2, [pc, #412]	; (80020c8 <HAL_RCC_OscConfig+0x26c>)
 8001f2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f2e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d013      	beq.n	8001f60 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f38:	f7ff fcb6 	bl	80018a8 <HAL_GetTick>
 8001f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f3e:	e008      	b.n	8001f52 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f40:	f7ff fcb2 	bl	80018a8 <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	2b64      	cmp	r3, #100	; 0x64
 8001f4c:	d901      	bls.n	8001f52 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e1fa      	b.n	8002348 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f52:	4b5d      	ldr	r3, [pc, #372]	; (80020c8 <HAL_RCC_OscConfig+0x26c>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d0f0      	beq.n	8001f40 <HAL_RCC_OscConfig+0xe4>
 8001f5e:	e014      	b.n	8001f8a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f60:	f7ff fca2 	bl	80018a8 <HAL_GetTick>
 8001f64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f66:	e008      	b.n	8001f7a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f68:	f7ff fc9e 	bl	80018a8 <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	2b64      	cmp	r3, #100	; 0x64
 8001f74:	d901      	bls.n	8001f7a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e1e6      	b.n	8002348 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f7a:	4b53      	ldr	r3, [pc, #332]	; (80020c8 <HAL_RCC_OscConfig+0x26c>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d1f0      	bne.n	8001f68 <HAL_RCC_OscConfig+0x10c>
 8001f86:	e000      	b.n	8001f8a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0302 	and.w	r3, r3, #2
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d063      	beq.n	800205e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f96:	4b4c      	ldr	r3, [pc, #304]	; (80020c8 <HAL_RCC_OscConfig+0x26c>)
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f003 030c 	and.w	r3, r3, #12
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d00b      	beq.n	8001fba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001fa2:	4b49      	ldr	r3, [pc, #292]	; (80020c8 <HAL_RCC_OscConfig+0x26c>)
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f003 030c 	and.w	r3, r3, #12
 8001faa:	2b08      	cmp	r3, #8
 8001fac:	d11c      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x18c>
 8001fae:	4b46      	ldr	r3, [pc, #280]	; (80020c8 <HAL_RCC_OscConfig+0x26c>)
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d116      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fba:	4b43      	ldr	r3, [pc, #268]	; (80020c8 <HAL_RCC_OscConfig+0x26c>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0302 	and.w	r3, r3, #2
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d005      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x176>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	691b      	ldr	r3, [r3, #16]
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d001      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e1ba      	b.n	8002348 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fd2:	4b3d      	ldr	r3, [pc, #244]	; (80020c8 <HAL_RCC_OscConfig+0x26c>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	695b      	ldr	r3, [r3, #20]
 8001fde:	00db      	lsls	r3, r3, #3
 8001fe0:	4939      	ldr	r1, [pc, #228]	; (80020c8 <HAL_RCC_OscConfig+0x26c>)
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fe6:	e03a      	b.n	800205e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	691b      	ldr	r3, [r3, #16]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d020      	beq.n	8002032 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ff0:	4b36      	ldr	r3, [pc, #216]	; (80020cc <HAL_RCC_OscConfig+0x270>)
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff6:	f7ff fc57 	bl	80018a8 <HAL_GetTick>
 8001ffa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ffc:	e008      	b.n	8002010 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ffe:	f7ff fc53 	bl	80018a8 <HAL_GetTick>
 8002002:	4602      	mov	r2, r0
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	2b02      	cmp	r3, #2
 800200a:	d901      	bls.n	8002010 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800200c:	2303      	movs	r3, #3
 800200e:	e19b      	b.n	8002348 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002010:	4b2d      	ldr	r3, [pc, #180]	; (80020c8 <HAL_RCC_OscConfig+0x26c>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0302 	and.w	r3, r3, #2
 8002018:	2b00      	cmp	r3, #0
 800201a:	d0f0      	beq.n	8001ffe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800201c:	4b2a      	ldr	r3, [pc, #168]	; (80020c8 <HAL_RCC_OscConfig+0x26c>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	695b      	ldr	r3, [r3, #20]
 8002028:	00db      	lsls	r3, r3, #3
 800202a:	4927      	ldr	r1, [pc, #156]	; (80020c8 <HAL_RCC_OscConfig+0x26c>)
 800202c:	4313      	orrs	r3, r2
 800202e:	600b      	str	r3, [r1, #0]
 8002030:	e015      	b.n	800205e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002032:	4b26      	ldr	r3, [pc, #152]	; (80020cc <HAL_RCC_OscConfig+0x270>)
 8002034:	2200      	movs	r2, #0
 8002036:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002038:	f7ff fc36 	bl	80018a8 <HAL_GetTick>
 800203c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800203e:	e008      	b.n	8002052 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002040:	f7ff fc32 	bl	80018a8 <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	2b02      	cmp	r3, #2
 800204c:	d901      	bls.n	8002052 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e17a      	b.n	8002348 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002052:	4b1d      	ldr	r3, [pc, #116]	; (80020c8 <HAL_RCC_OscConfig+0x26c>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0302 	and.w	r3, r3, #2
 800205a:	2b00      	cmp	r3, #0
 800205c:	d1f0      	bne.n	8002040 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0308 	and.w	r3, r3, #8
 8002066:	2b00      	cmp	r3, #0
 8002068:	d03a      	beq.n	80020e0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	699b      	ldr	r3, [r3, #24]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d019      	beq.n	80020a6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002072:	4b17      	ldr	r3, [pc, #92]	; (80020d0 <HAL_RCC_OscConfig+0x274>)
 8002074:	2201      	movs	r2, #1
 8002076:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002078:	f7ff fc16 	bl	80018a8 <HAL_GetTick>
 800207c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800207e:	e008      	b.n	8002092 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002080:	f7ff fc12 	bl	80018a8 <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	2b02      	cmp	r3, #2
 800208c:	d901      	bls.n	8002092 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e15a      	b.n	8002348 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002092:	4b0d      	ldr	r3, [pc, #52]	; (80020c8 <HAL_RCC_OscConfig+0x26c>)
 8002094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002096:	f003 0302 	and.w	r3, r3, #2
 800209a:	2b00      	cmp	r3, #0
 800209c:	d0f0      	beq.n	8002080 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800209e:	2001      	movs	r0, #1
 80020a0:	f000 faa6 	bl	80025f0 <RCC_Delay>
 80020a4:	e01c      	b.n	80020e0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020a6:	4b0a      	ldr	r3, [pc, #40]	; (80020d0 <HAL_RCC_OscConfig+0x274>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020ac:	f7ff fbfc 	bl	80018a8 <HAL_GetTick>
 80020b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020b2:	e00f      	b.n	80020d4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020b4:	f7ff fbf8 	bl	80018a8 <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d908      	bls.n	80020d4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e140      	b.n	8002348 <HAL_RCC_OscConfig+0x4ec>
 80020c6:	bf00      	nop
 80020c8:	40021000 	.word	0x40021000
 80020cc:	42420000 	.word	0x42420000
 80020d0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020d4:	4b9e      	ldr	r3, [pc, #632]	; (8002350 <HAL_RCC_OscConfig+0x4f4>)
 80020d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d8:	f003 0302 	and.w	r3, r3, #2
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d1e9      	bne.n	80020b4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 0304 	and.w	r3, r3, #4
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	f000 80a6 	beq.w	800223a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020ee:	2300      	movs	r3, #0
 80020f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020f2:	4b97      	ldr	r3, [pc, #604]	; (8002350 <HAL_RCC_OscConfig+0x4f4>)
 80020f4:	69db      	ldr	r3, [r3, #28]
 80020f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d10d      	bne.n	800211a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020fe:	4b94      	ldr	r3, [pc, #592]	; (8002350 <HAL_RCC_OscConfig+0x4f4>)
 8002100:	69db      	ldr	r3, [r3, #28]
 8002102:	4a93      	ldr	r2, [pc, #588]	; (8002350 <HAL_RCC_OscConfig+0x4f4>)
 8002104:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002108:	61d3      	str	r3, [r2, #28]
 800210a:	4b91      	ldr	r3, [pc, #580]	; (8002350 <HAL_RCC_OscConfig+0x4f4>)
 800210c:	69db      	ldr	r3, [r3, #28]
 800210e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002112:	60bb      	str	r3, [r7, #8]
 8002114:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002116:	2301      	movs	r3, #1
 8002118:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800211a:	4b8e      	ldr	r3, [pc, #568]	; (8002354 <HAL_RCC_OscConfig+0x4f8>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002122:	2b00      	cmp	r3, #0
 8002124:	d118      	bne.n	8002158 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002126:	4b8b      	ldr	r3, [pc, #556]	; (8002354 <HAL_RCC_OscConfig+0x4f8>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a8a      	ldr	r2, [pc, #552]	; (8002354 <HAL_RCC_OscConfig+0x4f8>)
 800212c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002130:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002132:	f7ff fbb9 	bl	80018a8 <HAL_GetTick>
 8002136:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002138:	e008      	b.n	800214c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800213a:	f7ff fbb5 	bl	80018a8 <HAL_GetTick>
 800213e:	4602      	mov	r2, r0
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	2b64      	cmp	r3, #100	; 0x64
 8002146:	d901      	bls.n	800214c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002148:	2303      	movs	r3, #3
 800214a:	e0fd      	b.n	8002348 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800214c:	4b81      	ldr	r3, [pc, #516]	; (8002354 <HAL_RCC_OscConfig+0x4f8>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002154:	2b00      	cmp	r3, #0
 8002156:	d0f0      	beq.n	800213a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	2b01      	cmp	r3, #1
 800215e:	d106      	bne.n	800216e <HAL_RCC_OscConfig+0x312>
 8002160:	4b7b      	ldr	r3, [pc, #492]	; (8002350 <HAL_RCC_OscConfig+0x4f4>)
 8002162:	6a1b      	ldr	r3, [r3, #32]
 8002164:	4a7a      	ldr	r2, [pc, #488]	; (8002350 <HAL_RCC_OscConfig+0x4f4>)
 8002166:	f043 0301 	orr.w	r3, r3, #1
 800216a:	6213      	str	r3, [r2, #32]
 800216c:	e02d      	b.n	80021ca <HAL_RCC_OscConfig+0x36e>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	68db      	ldr	r3, [r3, #12]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d10c      	bne.n	8002190 <HAL_RCC_OscConfig+0x334>
 8002176:	4b76      	ldr	r3, [pc, #472]	; (8002350 <HAL_RCC_OscConfig+0x4f4>)
 8002178:	6a1b      	ldr	r3, [r3, #32]
 800217a:	4a75      	ldr	r2, [pc, #468]	; (8002350 <HAL_RCC_OscConfig+0x4f4>)
 800217c:	f023 0301 	bic.w	r3, r3, #1
 8002180:	6213      	str	r3, [r2, #32]
 8002182:	4b73      	ldr	r3, [pc, #460]	; (8002350 <HAL_RCC_OscConfig+0x4f4>)
 8002184:	6a1b      	ldr	r3, [r3, #32]
 8002186:	4a72      	ldr	r2, [pc, #456]	; (8002350 <HAL_RCC_OscConfig+0x4f4>)
 8002188:	f023 0304 	bic.w	r3, r3, #4
 800218c:	6213      	str	r3, [r2, #32]
 800218e:	e01c      	b.n	80021ca <HAL_RCC_OscConfig+0x36e>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	2b05      	cmp	r3, #5
 8002196:	d10c      	bne.n	80021b2 <HAL_RCC_OscConfig+0x356>
 8002198:	4b6d      	ldr	r3, [pc, #436]	; (8002350 <HAL_RCC_OscConfig+0x4f4>)
 800219a:	6a1b      	ldr	r3, [r3, #32]
 800219c:	4a6c      	ldr	r2, [pc, #432]	; (8002350 <HAL_RCC_OscConfig+0x4f4>)
 800219e:	f043 0304 	orr.w	r3, r3, #4
 80021a2:	6213      	str	r3, [r2, #32]
 80021a4:	4b6a      	ldr	r3, [pc, #424]	; (8002350 <HAL_RCC_OscConfig+0x4f4>)
 80021a6:	6a1b      	ldr	r3, [r3, #32]
 80021a8:	4a69      	ldr	r2, [pc, #420]	; (8002350 <HAL_RCC_OscConfig+0x4f4>)
 80021aa:	f043 0301 	orr.w	r3, r3, #1
 80021ae:	6213      	str	r3, [r2, #32]
 80021b0:	e00b      	b.n	80021ca <HAL_RCC_OscConfig+0x36e>
 80021b2:	4b67      	ldr	r3, [pc, #412]	; (8002350 <HAL_RCC_OscConfig+0x4f4>)
 80021b4:	6a1b      	ldr	r3, [r3, #32]
 80021b6:	4a66      	ldr	r2, [pc, #408]	; (8002350 <HAL_RCC_OscConfig+0x4f4>)
 80021b8:	f023 0301 	bic.w	r3, r3, #1
 80021bc:	6213      	str	r3, [r2, #32]
 80021be:	4b64      	ldr	r3, [pc, #400]	; (8002350 <HAL_RCC_OscConfig+0x4f4>)
 80021c0:	6a1b      	ldr	r3, [r3, #32]
 80021c2:	4a63      	ldr	r2, [pc, #396]	; (8002350 <HAL_RCC_OscConfig+0x4f4>)
 80021c4:	f023 0304 	bic.w	r3, r3, #4
 80021c8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	68db      	ldr	r3, [r3, #12]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d015      	beq.n	80021fe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021d2:	f7ff fb69 	bl	80018a8 <HAL_GetTick>
 80021d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021d8:	e00a      	b.n	80021f0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021da:	f7ff fb65 	bl	80018a8 <HAL_GetTick>
 80021de:	4602      	mov	r2, r0
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d901      	bls.n	80021f0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80021ec:	2303      	movs	r3, #3
 80021ee:	e0ab      	b.n	8002348 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021f0:	4b57      	ldr	r3, [pc, #348]	; (8002350 <HAL_RCC_OscConfig+0x4f4>)
 80021f2:	6a1b      	ldr	r3, [r3, #32]
 80021f4:	f003 0302 	and.w	r3, r3, #2
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d0ee      	beq.n	80021da <HAL_RCC_OscConfig+0x37e>
 80021fc:	e014      	b.n	8002228 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021fe:	f7ff fb53 	bl	80018a8 <HAL_GetTick>
 8002202:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002204:	e00a      	b.n	800221c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002206:	f7ff fb4f 	bl	80018a8 <HAL_GetTick>
 800220a:	4602      	mov	r2, r0
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	f241 3288 	movw	r2, #5000	; 0x1388
 8002214:	4293      	cmp	r3, r2
 8002216:	d901      	bls.n	800221c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002218:	2303      	movs	r3, #3
 800221a:	e095      	b.n	8002348 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800221c:	4b4c      	ldr	r3, [pc, #304]	; (8002350 <HAL_RCC_OscConfig+0x4f4>)
 800221e:	6a1b      	ldr	r3, [r3, #32]
 8002220:	f003 0302 	and.w	r3, r3, #2
 8002224:	2b00      	cmp	r3, #0
 8002226:	d1ee      	bne.n	8002206 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002228:	7dfb      	ldrb	r3, [r7, #23]
 800222a:	2b01      	cmp	r3, #1
 800222c:	d105      	bne.n	800223a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800222e:	4b48      	ldr	r3, [pc, #288]	; (8002350 <HAL_RCC_OscConfig+0x4f4>)
 8002230:	69db      	ldr	r3, [r3, #28]
 8002232:	4a47      	ldr	r2, [pc, #284]	; (8002350 <HAL_RCC_OscConfig+0x4f4>)
 8002234:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002238:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	69db      	ldr	r3, [r3, #28]
 800223e:	2b00      	cmp	r3, #0
 8002240:	f000 8081 	beq.w	8002346 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002244:	4b42      	ldr	r3, [pc, #264]	; (8002350 <HAL_RCC_OscConfig+0x4f4>)
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f003 030c 	and.w	r3, r3, #12
 800224c:	2b08      	cmp	r3, #8
 800224e:	d061      	beq.n	8002314 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	69db      	ldr	r3, [r3, #28]
 8002254:	2b02      	cmp	r3, #2
 8002256:	d146      	bne.n	80022e6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002258:	4b3f      	ldr	r3, [pc, #252]	; (8002358 <HAL_RCC_OscConfig+0x4fc>)
 800225a:	2200      	movs	r2, #0
 800225c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800225e:	f7ff fb23 	bl	80018a8 <HAL_GetTick>
 8002262:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002264:	e008      	b.n	8002278 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002266:	f7ff fb1f 	bl	80018a8 <HAL_GetTick>
 800226a:	4602      	mov	r2, r0
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	2b02      	cmp	r3, #2
 8002272:	d901      	bls.n	8002278 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e067      	b.n	8002348 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002278:	4b35      	ldr	r3, [pc, #212]	; (8002350 <HAL_RCC_OscConfig+0x4f4>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d1f0      	bne.n	8002266 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6a1b      	ldr	r3, [r3, #32]
 8002288:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800228c:	d108      	bne.n	80022a0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800228e:	4b30      	ldr	r3, [pc, #192]	; (8002350 <HAL_RCC_OscConfig+0x4f4>)
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	492d      	ldr	r1, [pc, #180]	; (8002350 <HAL_RCC_OscConfig+0x4f4>)
 800229c:	4313      	orrs	r3, r2
 800229e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022a0:	4b2b      	ldr	r3, [pc, #172]	; (8002350 <HAL_RCC_OscConfig+0x4f4>)
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6a19      	ldr	r1, [r3, #32]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b0:	430b      	orrs	r3, r1
 80022b2:	4927      	ldr	r1, [pc, #156]	; (8002350 <HAL_RCC_OscConfig+0x4f4>)
 80022b4:	4313      	orrs	r3, r2
 80022b6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022b8:	4b27      	ldr	r3, [pc, #156]	; (8002358 <HAL_RCC_OscConfig+0x4fc>)
 80022ba:	2201      	movs	r2, #1
 80022bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022be:	f7ff faf3 	bl	80018a8 <HAL_GetTick>
 80022c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022c4:	e008      	b.n	80022d8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022c6:	f7ff faef 	bl	80018a8 <HAL_GetTick>
 80022ca:	4602      	mov	r2, r0
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	d901      	bls.n	80022d8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80022d4:	2303      	movs	r3, #3
 80022d6:	e037      	b.n	8002348 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022d8:	4b1d      	ldr	r3, [pc, #116]	; (8002350 <HAL_RCC_OscConfig+0x4f4>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d0f0      	beq.n	80022c6 <HAL_RCC_OscConfig+0x46a>
 80022e4:	e02f      	b.n	8002346 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022e6:	4b1c      	ldr	r3, [pc, #112]	; (8002358 <HAL_RCC_OscConfig+0x4fc>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ec:	f7ff fadc 	bl	80018a8 <HAL_GetTick>
 80022f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022f2:	e008      	b.n	8002306 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022f4:	f7ff fad8 	bl	80018a8 <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d901      	bls.n	8002306 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e020      	b.n	8002348 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002306:	4b12      	ldr	r3, [pc, #72]	; (8002350 <HAL_RCC_OscConfig+0x4f4>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d1f0      	bne.n	80022f4 <HAL_RCC_OscConfig+0x498>
 8002312:	e018      	b.n	8002346 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	69db      	ldr	r3, [r3, #28]
 8002318:	2b01      	cmp	r3, #1
 800231a:	d101      	bne.n	8002320 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e013      	b.n	8002348 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002320:	4b0b      	ldr	r3, [pc, #44]	; (8002350 <HAL_RCC_OscConfig+0x4f4>)
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6a1b      	ldr	r3, [r3, #32]
 8002330:	429a      	cmp	r2, r3
 8002332:	d106      	bne.n	8002342 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800233e:	429a      	cmp	r2, r3
 8002340:	d001      	beq.n	8002346 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e000      	b.n	8002348 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002346:	2300      	movs	r3, #0
}
 8002348:	4618      	mov	r0, r3
 800234a:	3718      	adds	r7, #24
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	40021000 	.word	0x40021000
 8002354:	40007000 	.word	0x40007000
 8002358:	42420060 	.word	0x42420060

0800235c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b084      	sub	sp, #16
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d101      	bne.n	8002370 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e0d0      	b.n	8002512 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002370:	4b6a      	ldr	r3, [pc, #424]	; (800251c <HAL_RCC_ClockConfig+0x1c0>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0307 	and.w	r3, r3, #7
 8002378:	683a      	ldr	r2, [r7, #0]
 800237a:	429a      	cmp	r2, r3
 800237c:	d910      	bls.n	80023a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800237e:	4b67      	ldr	r3, [pc, #412]	; (800251c <HAL_RCC_ClockConfig+0x1c0>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f023 0207 	bic.w	r2, r3, #7
 8002386:	4965      	ldr	r1, [pc, #404]	; (800251c <HAL_RCC_ClockConfig+0x1c0>)
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	4313      	orrs	r3, r2
 800238c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800238e:	4b63      	ldr	r3, [pc, #396]	; (800251c <HAL_RCC_ClockConfig+0x1c0>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0307 	and.w	r3, r3, #7
 8002396:	683a      	ldr	r2, [r7, #0]
 8002398:	429a      	cmp	r2, r3
 800239a:	d001      	beq.n	80023a0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e0b8      	b.n	8002512 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0302 	and.w	r3, r3, #2
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d020      	beq.n	80023ee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0304 	and.w	r3, r3, #4
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d005      	beq.n	80023c4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023b8:	4b59      	ldr	r3, [pc, #356]	; (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	4a58      	ldr	r2, [pc, #352]	; (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 80023be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80023c2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0308 	and.w	r3, r3, #8
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d005      	beq.n	80023dc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023d0:	4b53      	ldr	r3, [pc, #332]	; (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	4a52      	ldr	r2, [pc, #328]	; (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 80023d6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80023da:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023dc:	4b50      	ldr	r3, [pc, #320]	; (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	494d      	ldr	r1, [pc, #308]	; (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 80023ea:	4313      	orrs	r3, r2
 80023ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0301 	and.w	r3, r3, #1
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d040      	beq.n	800247c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d107      	bne.n	8002412 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002402:	4b47      	ldr	r3, [pc, #284]	; (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d115      	bne.n	800243a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e07f      	b.n	8002512 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	2b02      	cmp	r3, #2
 8002418:	d107      	bne.n	800242a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800241a:	4b41      	ldr	r3, [pc, #260]	; (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d109      	bne.n	800243a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e073      	b.n	8002512 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800242a:	4b3d      	ldr	r3, [pc, #244]	; (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0302 	and.w	r3, r3, #2
 8002432:	2b00      	cmp	r3, #0
 8002434:	d101      	bne.n	800243a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e06b      	b.n	8002512 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800243a:	4b39      	ldr	r3, [pc, #228]	; (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	f023 0203 	bic.w	r2, r3, #3
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	4936      	ldr	r1, [pc, #216]	; (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 8002448:	4313      	orrs	r3, r2
 800244a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800244c:	f7ff fa2c 	bl	80018a8 <HAL_GetTick>
 8002450:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002452:	e00a      	b.n	800246a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002454:	f7ff fa28 	bl	80018a8 <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002462:	4293      	cmp	r3, r2
 8002464:	d901      	bls.n	800246a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e053      	b.n	8002512 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800246a:	4b2d      	ldr	r3, [pc, #180]	; (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f003 020c 	and.w	r2, r3, #12
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	429a      	cmp	r2, r3
 800247a:	d1eb      	bne.n	8002454 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800247c:	4b27      	ldr	r3, [pc, #156]	; (800251c <HAL_RCC_ClockConfig+0x1c0>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0307 	and.w	r3, r3, #7
 8002484:	683a      	ldr	r2, [r7, #0]
 8002486:	429a      	cmp	r2, r3
 8002488:	d210      	bcs.n	80024ac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800248a:	4b24      	ldr	r3, [pc, #144]	; (800251c <HAL_RCC_ClockConfig+0x1c0>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f023 0207 	bic.w	r2, r3, #7
 8002492:	4922      	ldr	r1, [pc, #136]	; (800251c <HAL_RCC_ClockConfig+0x1c0>)
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	4313      	orrs	r3, r2
 8002498:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800249a:	4b20      	ldr	r3, [pc, #128]	; (800251c <HAL_RCC_ClockConfig+0x1c0>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0307 	and.w	r3, r3, #7
 80024a2:	683a      	ldr	r2, [r7, #0]
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d001      	beq.n	80024ac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e032      	b.n	8002512 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 0304 	and.w	r3, r3, #4
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d008      	beq.n	80024ca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024b8:	4b19      	ldr	r3, [pc, #100]	; (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	4916      	ldr	r1, [pc, #88]	; (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 80024c6:	4313      	orrs	r3, r2
 80024c8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0308 	and.w	r3, r3, #8
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d009      	beq.n	80024ea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80024d6:	4b12      	ldr	r3, [pc, #72]	; (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	691b      	ldr	r3, [r3, #16]
 80024e2:	00db      	lsls	r3, r3, #3
 80024e4:	490e      	ldr	r1, [pc, #56]	; (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024ea:	f000 f821 	bl	8002530 <HAL_RCC_GetSysClockFreq>
 80024ee:	4602      	mov	r2, r0
 80024f0:	4b0b      	ldr	r3, [pc, #44]	; (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	091b      	lsrs	r3, r3, #4
 80024f6:	f003 030f 	and.w	r3, r3, #15
 80024fa:	490a      	ldr	r1, [pc, #40]	; (8002524 <HAL_RCC_ClockConfig+0x1c8>)
 80024fc:	5ccb      	ldrb	r3, [r1, r3]
 80024fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002502:	4a09      	ldr	r2, [pc, #36]	; (8002528 <HAL_RCC_ClockConfig+0x1cc>)
 8002504:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002506:	4b09      	ldr	r3, [pc, #36]	; (800252c <HAL_RCC_ClockConfig+0x1d0>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4618      	mov	r0, r3
 800250c:	f7ff f98a 	bl	8001824 <HAL_InitTick>

  return HAL_OK;
 8002510:	2300      	movs	r3, #0
}
 8002512:	4618      	mov	r0, r3
 8002514:	3710      	adds	r7, #16
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	40022000 	.word	0x40022000
 8002520:	40021000 	.word	0x40021000
 8002524:	08002e74 	.word	0x08002e74
 8002528:	2000005c 	.word	0x2000005c
 800252c:	20000060 	.word	0x20000060

08002530 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002530:	b490      	push	{r4, r7}
 8002532:	b08a      	sub	sp, #40	; 0x28
 8002534:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002536:	4b2a      	ldr	r3, [pc, #168]	; (80025e0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002538:	1d3c      	adds	r4, r7, #4
 800253a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800253c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002540:	f240 2301 	movw	r3, #513	; 0x201
 8002544:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002546:	2300      	movs	r3, #0
 8002548:	61fb      	str	r3, [r7, #28]
 800254a:	2300      	movs	r3, #0
 800254c:	61bb      	str	r3, [r7, #24]
 800254e:	2300      	movs	r3, #0
 8002550:	627b      	str	r3, [r7, #36]	; 0x24
 8002552:	2300      	movs	r3, #0
 8002554:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002556:	2300      	movs	r3, #0
 8002558:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800255a:	4b22      	ldr	r3, [pc, #136]	; (80025e4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	f003 030c 	and.w	r3, r3, #12
 8002566:	2b04      	cmp	r3, #4
 8002568:	d002      	beq.n	8002570 <HAL_RCC_GetSysClockFreq+0x40>
 800256a:	2b08      	cmp	r3, #8
 800256c:	d003      	beq.n	8002576 <HAL_RCC_GetSysClockFreq+0x46>
 800256e:	e02d      	b.n	80025cc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002570:	4b1d      	ldr	r3, [pc, #116]	; (80025e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002572:	623b      	str	r3, [r7, #32]
      break;
 8002574:	e02d      	b.n	80025d2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	0c9b      	lsrs	r3, r3, #18
 800257a:	f003 030f 	and.w	r3, r3, #15
 800257e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002582:	4413      	add	r3, r2
 8002584:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002588:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002590:	2b00      	cmp	r3, #0
 8002592:	d013      	beq.n	80025bc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002594:	4b13      	ldr	r3, [pc, #76]	; (80025e4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	0c5b      	lsrs	r3, r3, #17
 800259a:	f003 0301 	and.w	r3, r3, #1
 800259e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80025a2:	4413      	add	r3, r2
 80025a4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80025a8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	4a0e      	ldr	r2, [pc, #56]	; (80025e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025ae:	fb02 f203 	mul.w	r2, r2, r3
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80025b8:	627b      	str	r3, [r7, #36]	; 0x24
 80025ba:	e004      	b.n	80025c6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	4a0b      	ldr	r2, [pc, #44]	; (80025ec <HAL_RCC_GetSysClockFreq+0xbc>)
 80025c0:	fb02 f303 	mul.w	r3, r2, r3
 80025c4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80025c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c8:	623b      	str	r3, [r7, #32]
      break;
 80025ca:	e002      	b.n	80025d2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80025cc:	4b06      	ldr	r3, [pc, #24]	; (80025e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025ce:	623b      	str	r3, [r7, #32]
      break;
 80025d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025d2:	6a3b      	ldr	r3, [r7, #32]
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3728      	adds	r7, #40	; 0x28
 80025d8:	46bd      	mov	sp, r7
 80025da:	bc90      	pop	{r4, r7}
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	08002e64 	.word	0x08002e64
 80025e4:	40021000 	.word	0x40021000
 80025e8:	007a1200 	.word	0x007a1200
 80025ec:	003d0900 	.word	0x003d0900

080025f0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b085      	sub	sp, #20
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80025f8:	4b0a      	ldr	r3, [pc, #40]	; (8002624 <RCC_Delay+0x34>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a0a      	ldr	r2, [pc, #40]	; (8002628 <RCC_Delay+0x38>)
 80025fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002602:	0a5b      	lsrs	r3, r3, #9
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	fb02 f303 	mul.w	r3, r2, r3
 800260a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800260c:	bf00      	nop
  }
  while (Delay --);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	1e5a      	subs	r2, r3, #1
 8002612:	60fa      	str	r2, [r7, #12]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d1f9      	bne.n	800260c <RCC_Delay+0x1c>
}
 8002618:	bf00      	nop
 800261a:	bf00      	nop
 800261c:	3714      	adds	r7, #20
 800261e:	46bd      	mov	sp, r7
 8002620:	bc80      	pop	{r7}
 8002622:	4770      	bx	lr
 8002624:	2000005c 	.word	0x2000005c
 8002628:	10624dd3 	.word	0x10624dd3

0800262c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d101      	bne.n	800263e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e041      	b.n	80026c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002644:	b2db      	uxtb	r3, r3
 8002646:	2b00      	cmp	r3, #0
 8002648:	d106      	bne.n	8002658 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f7ff f84e 	bl	80016f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2202      	movs	r2, #2
 800265c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	3304      	adds	r3, #4
 8002668:	4619      	mov	r1, r3
 800266a:	4610      	mov	r0, r2
 800266c:	f000 fa6a 	bl	8002b44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2201      	movs	r2, #1
 8002674:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2201      	movs	r2, #1
 800268c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2201      	movs	r2, #1
 8002694:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2201      	movs	r2, #1
 800269c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2201      	movs	r2, #1
 80026a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2201      	movs	r2, #1
 80026ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2201      	movs	r2, #1
 80026b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2201      	movs	r2, #1
 80026bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026c0:	2300      	movs	r3, #0
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3708      	adds	r7, #8
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
	...

080026cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b085      	sub	sp, #20
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d001      	beq.n	80026e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e035      	b.n	8002750 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2202      	movs	r2, #2
 80026e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	68da      	ldr	r2, [r3, #12]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f042 0201 	orr.w	r2, r2, #1
 80026fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a16      	ldr	r2, [pc, #88]	; (800275c <HAL_TIM_Base_Start_IT+0x90>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d009      	beq.n	800271a <HAL_TIM_Base_Start_IT+0x4e>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800270e:	d004      	beq.n	800271a <HAL_TIM_Base_Start_IT+0x4e>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a12      	ldr	r2, [pc, #72]	; (8002760 <HAL_TIM_Base_Start_IT+0x94>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d111      	bne.n	800273e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	f003 0307 	and.w	r3, r3, #7
 8002724:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2b06      	cmp	r3, #6
 800272a:	d010      	beq.n	800274e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f042 0201 	orr.w	r2, r2, #1
 800273a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800273c:	e007      	b.n	800274e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f042 0201 	orr.w	r2, r2, #1
 800274c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800274e:	2300      	movs	r3, #0
}
 8002750:	4618      	mov	r0, r3
 8002752:	3714      	adds	r7, #20
 8002754:	46bd      	mov	sp, r7
 8002756:	bc80      	pop	{r7}
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	40012c00 	.word	0x40012c00
 8002760:	40000400 	.word	0x40000400

08002764 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	691b      	ldr	r3, [r3, #16]
 8002772:	f003 0302 	and.w	r3, r3, #2
 8002776:	2b02      	cmp	r3, #2
 8002778:	d122      	bne.n	80027c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	f003 0302 	and.w	r3, r3, #2
 8002784:	2b02      	cmp	r3, #2
 8002786:	d11b      	bne.n	80027c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f06f 0202 	mvn.w	r2, #2
 8002790:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2201      	movs	r2, #1
 8002796:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	699b      	ldr	r3, [r3, #24]
 800279e:	f003 0303 	and.w	r3, r3, #3
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d003      	beq.n	80027ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f000 f9b1 	bl	8002b0e <HAL_TIM_IC_CaptureCallback>
 80027ac:	e005      	b.n	80027ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f000 f9a4 	bl	8002afc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f000 f9b3 	bl	8002b20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2200      	movs	r2, #0
 80027be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	691b      	ldr	r3, [r3, #16]
 80027c6:	f003 0304 	and.w	r3, r3, #4
 80027ca:	2b04      	cmp	r3, #4
 80027cc:	d122      	bne.n	8002814 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	f003 0304 	and.w	r3, r3, #4
 80027d8:	2b04      	cmp	r3, #4
 80027da:	d11b      	bne.n	8002814 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f06f 0204 	mvn.w	r2, #4
 80027e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2202      	movs	r2, #2
 80027ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	699b      	ldr	r3, [r3, #24]
 80027f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d003      	beq.n	8002802 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f000 f987 	bl	8002b0e <HAL_TIM_IC_CaptureCallback>
 8002800:	e005      	b.n	800280e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f000 f97a 	bl	8002afc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f000 f989 	bl	8002b20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2200      	movs	r2, #0
 8002812:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	691b      	ldr	r3, [r3, #16]
 800281a:	f003 0308 	and.w	r3, r3, #8
 800281e:	2b08      	cmp	r3, #8
 8002820:	d122      	bne.n	8002868 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	f003 0308 	and.w	r3, r3, #8
 800282c:	2b08      	cmp	r3, #8
 800282e:	d11b      	bne.n	8002868 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f06f 0208 	mvn.w	r2, #8
 8002838:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2204      	movs	r2, #4
 800283e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	69db      	ldr	r3, [r3, #28]
 8002846:	f003 0303 	and.w	r3, r3, #3
 800284a:	2b00      	cmp	r3, #0
 800284c:	d003      	beq.n	8002856 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f000 f95d 	bl	8002b0e <HAL_TIM_IC_CaptureCallback>
 8002854:	e005      	b.n	8002862 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f000 f950 	bl	8002afc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f000 f95f 	bl	8002b20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	691b      	ldr	r3, [r3, #16]
 800286e:	f003 0310 	and.w	r3, r3, #16
 8002872:	2b10      	cmp	r3, #16
 8002874:	d122      	bne.n	80028bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	f003 0310 	and.w	r3, r3, #16
 8002880:	2b10      	cmp	r3, #16
 8002882:	d11b      	bne.n	80028bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f06f 0210 	mvn.w	r2, #16
 800288c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2208      	movs	r2, #8
 8002892:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	69db      	ldr	r3, [r3, #28]
 800289a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d003      	beq.n	80028aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f000 f933 	bl	8002b0e <HAL_TIM_IC_CaptureCallback>
 80028a8:	e005      	b.n	80028b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f000 f926 	bl	8002afc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f000 f935 	bl	8002b20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	691b      	ldr	r3, [r3, #16]
 80028c2:	f003 0301 	and.w	r3, r3, #1
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d10e      	bne.n	80028e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	f003 0301 	and.w	r3, r3, #1
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d107      	bne.n	80028e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f06f 0201 	mvn.w	r2, #1
 80028e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f7fe fda2 	bl	800142c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028f2:	2b80      	cmp	r3, #128	; 0x80
 80028f4:	d10e      	bne.n	8002914 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002900:	2b80      	cmp	r3, #128	; 0x80
 8002902:	d107      	bne.n	8002914 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800290c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f000 fa67 	bl	8002de2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	691b      	ldr	r3, [r3, #16]
 800291a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800291e:	2b40      	cmp	r3, #64	; 0x40
 8002920:	d10e      	bne.n	8002940 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800292c:	2b40      	cmp	r3, #64	; 0x40
 800292e:	d107      	bne.n	8002940 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002938:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f000 f8f9 	bl	8002b32 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	691b      	ldr	r3, [r3, #16]
 8002946:	f003 0320 	and.w	r3, r3, #32
 800294a:	2b20      	cmp	r3, #32
 800294c:	d10e      	bne.n	800296c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	f003 0320 	and.w	r3, r3, #32
 8002958:	2b20      	cmp	r3, #32
 800295a:	d107      	bne.n	800296c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f06f 0220 	mvn.w	r2, #32
 8002964:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f000 fa32 	bl	8002dd0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800296c:	bf00      	nop
 800296e:	3708      	adds	r7, #8
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}

08002974 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002984:	2b01      	cmp	r3, #1
 8002986:	d101      	bne.n	800298c <HAL_TIM_ConfigClockSource+0x18>
 8002988:	2302      	movs	r3, #2
 800298a:	e0b3      	b.n	8002af4 <HAL_TIM_ConfigClockSource+0x180>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2202      	movs	r2, #2
 8002998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80029aa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80029b2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	68fa      	ldr	r2, [r7, #12]
 80029ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029c4:	d03e      	beq.n	8002a44 <HAL_TIM_ConfigClockSource+0xd0>
 80029c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029ca:	f200 8087 	bhi.w	8002adc <HAL_TIM_ConfigClockSource+0x168>
 80029ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029d2:	f000 8085 	beq.w	8002ae0 <HAL_TIM_ConfigClockSource+0x16c>
 80029d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029da:	d87f      	bhi.n	8002adc <HAL_TIM_ConfigClockSource+0x168>
 80029dc:	2b70      	cmp	r3, #112	; 0x70
 80029de:	d01a      	beq.n	8002a16 <HAL_TIM_ConfigClockSource+0xa2>
 80029e0:	2b70      	cmp	r3, #112	; 0x70
 80029e2:	d87b      	bhi.n	8002adc <HAL_TIM_ConfigClockSource+0x168>
 80029e4:	2b60      	cmp	r3, #96	; 0x60
 80029e6:	d050      	beq.n	8002a8a <HAL_TIM_ConfigClockSource+0x116>
 80029e8:	2b60      	cmp	r3, #96	; 0x60
 80029ea:	d877      	bhi.n	8002adc <HAL_TIM_ConfigClockSource+0x168>
 80029ec:	2b50      	cmp	r3, #80	; 0x50
 80029ee:	d03c      	beq.n	8002a6a <HAL_TIM_ConfigClockSource+0xf6>
 80029f0:	2b50      	cmp	r3, #80	; 0x50
 80029f2:	d873      	bhi.n	8002adc <HAL_TIM_ConfigClockSource+0x168>
 80029f4:	2b40      	cmp	r3, #64	; 0x40
 80029f6:	d058      	beq.n	8002aaa <HAL_TIM_ConfigClockSource+0x136>
 80029f8:	2b40      	cmp	r3, #64	; 0x40
 80029fa:	d86f      	bhi.n	8002adc <HAL_TIM_ConfigClockSource+0x168>
 80029fc:	2b30      	cmp	r3, #48	; 0x30
 80029fe:	d064      	beq.n	8002aca <HAL_TIM_ConfigClockSource+0x156>
 8002a00:	2b30      	cmp	r3, #48	; 0x30
 8002a02:	d86b      	bhi.n	8002adc <HAL_TIM_ConfigClockSource+0x168>
 8002a04:	2b20      	cmp	r3, #32
 8002a06:	d060      	beq.n	8002aca <HAL_TIM_ConfigClockSource+0x156>
 8002a08:	2b20      	cmp	r3, #32
 8002a0a:	d867      	bhi.n	8002adc <HAL_TIM_ConfigClockSource+0x168>
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d05c      	beq.n	8002aca <HAL_TIM_ConfigClockSource+0x156>
 8002a10:	2b10      	cmp	r3, #16
 8002a12:	d05a      	beq.n	8002aca <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002a14:	e062      	b.n	8002adc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6818      	ldr	r0, [r3, #0]
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	6899      	ldr	r1, [r3, #8]
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	685a      	ldr	r2, [r3, #4]
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	f000 f95c 	bl	8002ce2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002a38:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	68fa      	ldr	r2, [r7, #12]
 8002a40:	609a      	str	r2, [r3, #8]
      break;
 8002a42:	e04e      	b.n	8002ae2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6818      	ldr	r0, [r3, #0]
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	6899      	ldr	r1, [r3, #8]
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	685a      	ldr	r2, [r3, #4]
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	f000 f945 	bl	8002ce2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	689a      	ldr	r2, [r3, #8]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a66:	609a      	str	r2, [r3, #8]
      break;
 8002a68:	e03b      	b.n	8002ae2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6818      	ldr	r0, [r3, #0]
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	6859      	ldr	r1, [r3, #4]
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	461a      	mov	r2, r3
 8002a78:	f000 f8bc 	bl	8002bf4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	2150      	movs	r1, #80	; 0x50
 8002a82:	4618      	mov	r0, r3
 8002a84:	f000 f913 	bl	8002cae <TIM_ITRx_SetConfig>
      break;
 8002a88:	e02b      	b.n	8002ae2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6818      	ldr	r0, [r3, #0]
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	6859      	ldr	r1, [r3, #4]
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	461a      	mov	r2, r3
 8002a98:	f000 f8da 	bl	8002c50 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	2160      	movs	r1, #96	; 0x60
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f000 f903 	bl	8002cae <TIM_ITRx_SetConfig>
      break;
 8002aa8:	e01b      	b.n	8002ae2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6818      	ldr	r0, [r3, #0]
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	6859      	ldr	r1, [r3, #4]
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	f000 f89c 	bl	8002bf4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2140      	movs	r1, #64	; 0x40
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f000 f8f3 	bl	8002cae <TIM_ITRx_SetConfig>
      break;
 8002ac8:	e00b      	b.n	8002ae2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	4610      	mov	r0, r2
 8002ad6:	f000 f8ea 	bl	8002cae <TIM_ITRx_SetConfig>
        break;
 8002ada:	e002      	b.n	8002ae2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002adc:	bf00      	nop
 8002ade:	e000      	b.n	8002ae2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002ae0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002af2:	2300      	movs	r3, #0
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3710      	adds	r7, #16
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}

08002afc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b083      	sub	sp, #12
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b04:	bf00      	nop
 8002b06:	370c      	adds	r7, #12
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bc80      	pop	{r7}
 8002b0c:	4770      	bx	lr

08002b0e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b0e:	b480      	push	{r7}
 8002b10:	b083      	sub	sp, #12
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b16:	bf00      	nop
 8002b18:	370c      	adds	r7, #12
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bc80      	pop	{r7}
 8002b1e:	4770      	bx	lr

08002b20 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b28:	bf00      	nop
 8002b2a:	370c      	adds	r7, #12
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bc80      	pop	{r7}
 8002b30:	4770      	bx	lr

08002b32 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b32:	b480      	push	{r7}
 8002b34:	b083      	sub	sp, #12
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b3a:	bf00      	nop
 8002b3c:	370c      	adds	r7, #12
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bc80      	pop	{r7}
 8002b42:	4770      	bx	lr

08002b44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b085      	sub	sp, #20
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	4a25      	ldr	r2, [pc, #148]	; (8002bec <TIM_Base_SetConfig+0xa8>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d007      	beq.n	8002b6c <TIM_Base_SetConfig+0x28>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b62:	d003      	beq.n	8002b6c <TIM_Base_SetConfig+0x28>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	4a22      	ldr	r2, [pc, #136]	; (8002bf0 <TIM_Base_SetConfig+0xac>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d108      	bne.n	8002b7e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	68fa      	ldr	r2, [r7, #12]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a1a      	ldr	r2, [pc, #104]	; (8002bec <TIM_Base_SetConfig+0xa8>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d007      	beq.n	8002b96 <TIM_Base_SetConfig+0x52>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b8c:	d003      	beq.n	8002b96 <TIM_Base_SetConfig+0x52>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a17      	ldr	r2, [pc, #92]	; (8002bf0 <TIM_Base_SetConfig+0xac>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d108      	bne.n	8002ba8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	68db      	ldr	r3, [r3, #12]
 8002ba2:	68fa      	ldr	r2, [r7, #12]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	695b      	ldr	r3, [r3, #20]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	68fa      	ldr	r2, [r7, #12]
 8002bba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	689a      	ldr	r2, [r3, #8]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	4a07      	ldr	r2, [pc, #28]	; (8002bec <TIM_Base_SetConfig+0xa8>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d103      	bne.n	8002bdc <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	691a      	ldr	r2, [r3, #16]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2201      	movs	r2, #1
 8002be0:	615a      	str	r2, [r3, #20]
}
 8002be2:	bf00      	nop
 8002be4:	3714      	adds	r7, #20
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bc80      	pop	{r7}
 8002bea:	4770      	bx	lr
 8002bec:	40012c00 	.word	0x40012c00
 8002bf0:	40000400 	.word	0x40000400

08002bf4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b087      	sub	sp, #28
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	60b9      	str	r1, [r7, #8]
 8002bfe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	6a1b      	ldr	r3, [r3, #32]
 8002c04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	6a1b      	ldr	r3, [r3, #32]
 8002c0a:	f023 0201 	bic.w	r2, r3, #1
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	699b      	ldr	r3, [r3, #24]
 8002c16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	011b      	lsls	r3, r3, #4
 8002c24:	693a      	ldr	r2, [r7, #16]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	f023 030a 	bic.w	r3, r3, #10
 8002c30:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002c32:	697a      	ldr	r2, [r7, #20]
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	693a      	ldr	r2, [r7, #16]
 8002c3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	697a      	ldr	r2, [r7, #20]
 8002c44:	621a      	str	r2, [r3, #32]
}
 8002c46:	bf00      	nop
 8002c48:	371c      	adds	r7, #28
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bc80      	pop	{r7}
 8002c4e:	4770      	bx	lr

08002c50 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b087      	sub	sp, #28
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	60f8      	str	r0, [r7, #12]
 8002c58:	60b9      	str	r1, [r7, #8]
 8002c5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	6a1b      	ldr	r3, [r3, #32]
 8002c60:	f023 0210 	bic.w	r2, r3, #16
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	699b      	ldr	r3, [r3, #24]
 8002c6c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6a1b      	ldr	r3, [r3, #32]
 8002c72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c7a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	031b      	lsls	r3, r3, #12
 8002c80:	697a      	ldr	r2, [r7, #20]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002c8c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	011b      	lsls	r3, r3, #4
 8002c92:	693a      	ldr	r2, [r7, #16]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	697a      	ldr	r2, [r7, #20]
 8002c9c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	693a      	ldr	r2, [r7, #16]
 8002ca2:	621a      	str	r2, [r3, #32]
}
 8002ca4:	bf00      	nop
 8002ca6:	371c      	adds	r7, #28
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bc80      	pop	{r7}
 8002cac:	4770      	bx	lr

08002cae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002cae:	b480      	push	{r7}
 8002cb0:	b085      	sub	sp, #20
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
 8002cb6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cc4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002cc6:	683a      	ldr	r2, [r7, #0]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	f043 0307 	orr.w	r3, r3, #7
 8002cd0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	68fa      	ldr	r2, [r7, #12]
 8002cd6:	609a      	str	r2, [r3, #8]
}
 8002cd8:	bf00      	nop
 8002cda:	3714      	adds	r7, #20
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bc80      	pop	{r7}
 8002ce0:	4770      	bx	lr

08002ce2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ce2:	b480      	push	{r7}
 8002ce4:	b087      	sub	sp, #28
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	60f8      	str	r0, [r7, #12]
 8002cea:	60b9      	str	r1, [r7, #8]
 8002cec:	607a      	str	r2, [r7, #4]
 8002cee:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002cfc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	021a      	lsls	r2, r3, #8
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	431a      	orrs	r2, r3
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	697a      	ldr	r2, [r7, #20]
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	697a      	ldr	r2, [r7, #20]
 8002d14:	609a      	str	r2, [r3, #8]
}
 8002d16:	bf00      	nop
 8002d18:	371c      	adds	r7, #28
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bc80      	pop	{r7}
 8002d1e:	4770      	bx	lr

08002d20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b085      	sub	sp, #20
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d101      	bne.n	8002d38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d34:	2302      	movs	r3, #2
 8002d36:	e041      	b.n	8002dbc <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2202      	movs	r2, #2
 8002d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	68fa      	ldr	r2, [r7, #12]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	68fa      	ldr	r2, [r7, #12]
 8002d70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a14      	ldr	r2, [pc, #80]	; (8002dc8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d009      	beq.n	8002d90 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d84:	d004      	beq.n	8002d90 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a10      	ldr	r2, [pc, #64]	; (8002dcc <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d10c      	bne.n	8002daa <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d96:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	68ba      	ldr	r2, [r7, #8]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	68ba      	ldr	r2, [r7, #8]
 8002da8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2201      	movs	r2, #1
 8002dae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002dba:	2300      	movs	r3, #0
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3714      	adds	r7, #20
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bc80      	pop	{r7}
 8002dc4:	4770      	bx	lr
 8002dc6:	bf00      	nop
 8002dc8:	40012c00 	.word	0x40012c00
 8002dcc:	40000400 	.word	0x40000400

08002dd0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002dd8:	bf00      	nop
 8002dda:	370c      	adds	r7, #12
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bc80      	pop	{r7}
 8002de0:	4770      	bx	lr

08002de2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002de2:	b480      	push	{r7}
 8002de4:	b083      	sub	sp, #12
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002dea:	bf00      	nop
 8002dec:	370c      	adds	r7, #12
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bc80      	pop	{r7}
 8002df2:	4770      	bx	lr

08002df4 <__libc_init_array>:
 8002df4:	b570      	push	{r4, r5, r6, lr}
 8002df6:	2600      	movs	r6, #0
 8002df8:	4d0c      	ldr	r5, [pc, #48]	; (8002e2c <__libc_init_array+0x38>)
 8002dfa:	4c0d      	ldr	r4, [pc, #52]	; (8002e30 <__libc_init_array+0x3c>)
 8002dfc:	1b64      	subs	r4, r4, r5
 8002dfe:	10a4      	asrs	r4, r4, #2
 8002e00:	42a6      	cmp	r6, r4
 8002e02:	d109      	bne.n	8002e18 <__libc_init_array+0x24>
 8002e04:	f000 f822 	bl	8002e4c <_init>
 8002e08:	2600      	movs	r6, #0
 8002e0a:	4d0a      	ldr	r5, [pc, #40]	; (8002e34 <__libc_init_array+0x40>)
 8002e0c:	4c0a      	ldr	r4, [pc, #40]	; (8002e38 <__libc_init_array+0x44>)
 8002e0e:	1b64      	subs	r4, r4, r5
 8002e10:	10a4      	asrs	r4, r4, #2
 8002e12:	42a6      	cmp	r6, r4
 8002e14:	d105      	bne.n	8002e22 <__libc_init_array+0x2e>
 8002e16:	bd70      	pop	{r4, r5, r6, pc}
 8002e18:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e1c:	4798      	blx	r3
 8002e1e:	3601      	adds	r6, #1
 8002e20:	e7ee      	b.n	8002e00 <__libc_init_array+0xc>
 8002e22:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e26:	4798      	blx	r3
 8002e28:	3601      	adds	r6, #1
 8002e2a:	e7f2      	b.n	8002e12 <__libc_init_array+0x1e>
 8002e2c:	08002e84 	.word	0x08002e84
 8002e30:	08002e84 	.word	0x08002e84
 8002e34:	08002e84 	.word	0x08002e84
 8002e38:	08002e88 	.word	0x08002e88

08002e3c <memset>:
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	4402      	add	r2, r0
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d100      	bne.n	8002e46 <memset+0xa>
 8002e44:	4770      	bx	lr
 8002e46:	f803 1b01 	strb.w	r1, [r3], #1
 8002e4a:	e7f9      	b.n	8002e40 <memset+0x4>

08002e4c <_init>:
 8002e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e4e:	bf00      	nop
 8002e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e52:	bc08      	pop	{r3}
 8002e54:	469e      	mov	lr, r3
 8002e56:	4770      	bx	lr

08002e58 <_fini>:
 8002e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e5a:	bf00      	nop
 8002e5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e5e:	bc08      	pop	{r3}
 8002e60:	469e      	mov	lr, r3
 8002e62:	4770      	bx	lr
